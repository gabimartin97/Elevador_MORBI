
Elevador_MORBI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000982c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08009940  08009940  00019940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fec  08009fec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009fec  08009fec  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fec  08009fec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  200001e4  0800a1d8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002878  0800a1d8  00022878  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6d6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b20  00000000  00000000  0003c8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000415a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c51b  00000000  00000000  00042560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013569  00000000  00000000  0005ea7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095534  00000000  00000000  00071fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005728  00000000  00000000  0010756c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009924 	.word	0x08009924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08009924 	.word	0x08009924

08000150 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 8000150:	b672      	cpsid	i
        BX      LR
 8000152:	4770      	bx	lr

08000154 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000154:	b662      	cpsie	i
        BX      LR
 8000156:	4770      	bx	lr

08000158 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000158:	b672      	cpsid	i
        PUSH   {R1}
 800015a:	b402      	push	{r1}
        MRS     R1, BASEPRI
 800015c:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 8000160:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000164:	f3bf 8f4f 	dsb	sy
        ISB
 8000168:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 800016c:	4608      	mov	r0, r1
        POP    {R1}
 800016e:	bc02      	pop	{r1}
        CPSIE   I
 8000170:	b662      	cpsie	i
        BX      LR
 8000172:	4770      	bx	lr

08000174 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000174:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000176:	f380 8811 	msr	BASEPRI, r0
        DSB
 800017a:	f3bf 8f4f 	dsb	sy
        ISB
 800017e:	f3bf 8f6f 	isb	sy
        CPSIE   I
 8000182:	b662      	cpsie	i
        BX      LR
 8000184:	4770      	bx	lr

08000186 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000186:	bf30      	wfi
        BX      LR
 8000188:	4770      	bx	lr

0800018a <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 800018a:	bf20      	wfe
        BX      LR
 800018c:	4770      	bx	lr

0800018e <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800018e:	fab0 f080 	clz	r0, r0
        BX      LR
 8000192:	4770      	bx	lr

08000194 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000194:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000198:	fab0 f080 	clz	r0, r0
        BX      LR
 800019c:	4770      	bx	lr

0800019e <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800019e:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 80001a2:	4770      	bx	lr

080001a4 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001a4:	b672      	cpsid	i
    PUSH   {R1}
 80001a6:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001a8:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001ac:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001b0:	f3bf 8f4f 	dsb	sy
    ISB
 80001b4:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001b8:	4608      	mov	r0, r1
    POP    {R1}
 80001ba:	bc02      	pop	{r1}
    CPSIE   I
 80001bc:	b662      	cpsie	i
    BX      LR
 80001be:	4770      	bx	lr

080001c0 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001c0:	b672      	cpsid	i
    MSR     BASEPRI, R0
 80001c2:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001c6:	f3bf 8f4f 	dsb	sy
    ISB
 80001ca:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80001ce:	b662      	cpsie	i
    BX      LR
 80001d0:	4770      	bx	lr

080001d2 <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001d2:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 80001d4:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001d8:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001dc:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001e0:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001e4:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001e6:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001e8:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001ec:	f241 008c 	movw	r0, #4236	; 0x108c
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 80001f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 80001f4:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001f6:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80001fa:	f004 fc7f 	bl	8004afc <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001fe:	4832      	ldr	r0, [pc, #200]	; (80002c8 <OS_CPU_PendSVHandler+0x6c>)
    MOVS    R1, #1
 8000200:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000202:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000204:	f241 70b4 	movw	r0, #6068	; 0x17b4
    MOVT    R0, #:upper16:OSPrioCur
 8000208:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800020c:	f241 41e2 	movw	r1, #5346	; 0x14e2
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000210:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000214:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000216:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000218:	f641 40cc 	movw	r0, #7372	; 0x1ccc
    MOVT    R0, #:upper16:OSTCBCur
 800021c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 8000220:	f641 21b0 	movw	r1, #6832	; 0x1ab0
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000224:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000228:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800022a:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800022c:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800022e:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000232:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000236:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800023a:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800023e:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 8000242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000246:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000248:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800024c:	bc06      	pop	{r1, r2}
    CPSIE    I
 800024e:	b662      	cpsie	i
    BX       R1
 8000250:	4708      	bx	r1

08000252 <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000252:	481e      	ldr	r0, [pc, #120]	; (80002cc <OS_CPU_PendSVHandler+0x70>)
    LDR     R1, =NVIC_PENDSVSET
 8000254:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000258:	6001      	str	r1, [r0, #0]
    BX      LR
 800025a:	4770      	bx	lr

0800025c <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800025c:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 800025e:	f241 0290 	movw	r2, #4240	; 0x1090
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 8000262:	f2c2 0200 	movt	r2, #8192	; 0x2000
    LDR     R1, [R2]
 8000266:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 8000268:	f381 8811 	msr	BASEPRI, r1
    DSB
 800026c:	f3bf 8f4f 	dsb	sy
    ISB
 8000270:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000274:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000276:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 800027a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 800027e:	f641 45cc 	movw	r5, #7372	; 0x1ccc
    MOVT    R5, #:upper16:OSTCBCur
 8000282:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R1, [R5]
 8000286:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000288:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800028a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800028c:	f004 fc36 	bl	8004afc <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000290:	f241 70b4 	movw	r0, #6068	; 0x17b4
    MOVT    R0, #:upper16:OSPrioCur
 8000294:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000298:	f241 41e2 	movw	r1, #5346	; 0x14e2
    MOVT    R1, #:upper16:OSPrioHighRdy
 800029c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002a0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002a2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002a4:	f641 21b0 	movw	r1, #6832	; 0x1ab0
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002ac:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002ae:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002b0:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002b4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ba:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 80002be:	f04f 0200 	mov.w	r2, #0
    MSR     BASEPRI, R2
 80002c2:	f382 8811 	msr	BASEPRI, r2
    BX      LR                                                  @ Exception return will restore remaining context
 80002c6:	4770      	bx	lr
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002c8:	200014d9 	.word	0x200014d9
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002cc:	e000ed04 	.word	0xe000ed04

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_fmul>:
 8000ec4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ecc:	bf1e      	ittt	ne
 8000ece:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ed2:	ea92 0f0c 	teqne	r2, ip
 8000ed6:	ea93 0f0c 	teqne	r3, ip
 8000eda:	d06f      	beq.n	8000fbc <__aeabi_fmul+0xf8>
 8000edc:	441a      	add	r2, r3
 8000ede:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee2:	0240      	lsls	r0, r0, #9
 8000ee4:	bf18      	it	ne
 8000ee6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eea:	d01e      	beq.n	8000f2a <__aeabi_fmul+0x66>
 8000eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ef0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ef4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ef8:	fba0 3101 	umull	r3, r1, r0, r1
 8000efc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000f04:	bf3e      	ittt	cc
 8000f06:	0049      	lslcc	r1, r1, #1
 8000f08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	ea40 0001 	orr.w	r0, r0, r1
 8000f12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f16:	2afd      	cmp	r2, #253	; 0xfd
 8000f18:	d81d      	bhi.n	8000f56 <__aeabi_fmul+0x92>
 8000f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f22:	bf08      	it	eq
 8000f24:	f020 0001 	biceq.w	r0, r0, #1
 8000f28:	4770      	bx	lr
 8000f2a:	f090 0f00 	teq	r0, #0
 8000f2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	0249      	lsleq	r1, r1, #9
 8000f36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f3e:	3a7f      	subs	r2, #127	; 0x7f
 8000f40:	bfc2      	ittt	gt
 8000f42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f4a:	4770      	bxgt	lr
 8000f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	3a01      	subs	r2, #1
 8000f56:	dc5d      	bgt.n	8001014 <__aeabi_fmul+0x150>
 8000f58:	f112 0f19 	cmn.w	r2, #25
 8000f5c:	bfdc      	itt	le
 8000f5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f62:	4770      	bxle	lr
 8000f64:	f1c2 0200 	rsb	r2, r2, #0
 8000f68:	0041      	lsls	r1, r0, #1
 8000f6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f6e:	f1c2 0220 	rsb	r2, r2, #32
 8000f72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f7a:	f140 0000 	adc.w	r0, r0, #0
 8000f7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f82:	bf08      	it	eq
 8000f84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f88:	4770      	bx	lr
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fmul+0xce>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fmul+0xe6>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e78f      	b.n	8000edc <__aeabi_fmul+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	bf18      	it	ne
 8000fc6:	ea93 0f0c 	teqne	r3, ip
 8000fca:	d00a      	beq.n	8000fe2 <__aeabi_fmul+0x11e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1d8      	bne.n	8000f8a <__aeabi_fmul+0xc6>
 8000fd8:	ea80 0001 	eor.w	r0, r0, r1
 8000fdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fe0:	4770      	bx	lr
 8000fe2:	f090 0f00 	teq	r0, #0
 8000fe6:	bf17      	itett	ne
 8000fe8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fec:	4608      	moveq	r0, r1
 8000fee:	f091 0f00 	teqne	r1, #0
 8000ff2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ff6:	d014      	beq.n	8001022 <__aeabi_fmul+0x15e>
 8000ff8:	ea92 0f0c 	teq	r2, ip
 8000ffc:	d101      	bne.n	8001002 <__aeabi_fmul+0x13e>
 8000ffe:	0242      	lsls	r2, r0, #9
 8001000:	d10f      	bne.n	8001022 <__aeabi_fmul+0x15e>
 8001002:	ea93 0f0c 	teq	r3, ip
 8001006:	d103      	bne.n	8001010 <__aeabi_fmul+0x14c>
 8001008:	024b      	lsls	r3, r1, #9
 800100a:	bf18      	it	ne
 800100c:	4608      	movne	r0, r1
 800100e:	d108      	bne.n	8001022 <__aeabi_fmul+0x15e>
 8001010:	ea80 0001 	eor.w	r0, r0, r1
 8001014:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001018:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800101c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001020:	4770      	bx	lr
 8001022:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001026:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800102a:	4770      	bx	lr

0800102c <__aeabi_fdiv>:
 800102c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001030:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001034:	bf1e      	ittt	ne
 8001036:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800103a:	ea92 0f0c 	teqne	r2, ip
 800103e:	ea93 0f0c 	teqne	r3, ip
 8001042:	d069      	beq.n	8001118 <__aeabi_fdiv+0xec>
 8001044:	eba2 0203 	sub.w	r2, r2, r3
 8001048:	ea80 0c01 	eor.w	ip, r0, r1
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001052:	d037      	beq.n	80010c4 <__aeabi_fdiv+0x98>
 8001054:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001058:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800105c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001060:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001064:	428b      	cmp	r3, r1
 8001066:	bf38      	it	cc
 8001068:	005b      	lslcc	r3, r3, #1
 800106a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800106e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001072:	428b      	cmp	r3, r1
 8001074:	bf24      	itt	cs
 8001076:	1a5b      	subcs	r3, r3, r1
 8001078:	ea40 000c 	orrcs.w	r0, r0, ip
 800107c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001080:	bf24      	itt	cs
 8001082:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001086:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800108a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800108e:	bf24      	itt	cs
 8001090:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001094:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001098:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800109c:	bf24      	itt	cs
 800109e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80010a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	bf18      	it	ne
 80010aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80010ae:	d1e0      	bne.n	8001072 <__aeabi_fdiv+0x46>
 80010b0:	2afd      	cmp	r2, #253	; 0xfd
 80010b2:	f63f af50 	bhi.w	8000f56 <__aeabi_fmul+0x92>
 80010b6:	428b      	cmp	r3, r1
 80010b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010bc:	bf08      	it	eq
 80010be:	f020 0001 	biceq.w	r0, r0, #1
 80010c2:	4770      	bx	lr
 80010c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010cc:	327f      	adds	r2, #127	; 0x7f
 80010ce:	bfc2      	ittt	gt
 80010d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010d8:	4770      	bxgt	lr
 80010da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	3a01      	subs	r2, #1
 80010e4:	e737      	b.n	8000f56 <__aeabi_fmul+0x92>
 80010e6:	f092 0f00 	teq	r2, #0
 80010ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010ee:	bf02      	ittt	eq
 80010f0:	0040      	lsleq	r0, r0, #1
 80010f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010f6:	3a01      	subeq	r2, #1
 80010f8:	d0f9      	beq.n	80010ee <__aeabi_fdiv+0xc2>
 80010fa:	ea40 000c 	orr.w	r0, r0, ip
 80010fe:	f093 0f00 	teq	r3, #0
 8001102:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001106:	bf02      	ittt	eq
 8001108:	0049      	lsleq	r1, r1, #1
 800110a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800110e:	3b01      	subeq	r3, #1
 8001110:	d0f9      	beq.n	8001106 <__aeabi_fdiv+0xda>
 8001112:	ea41 010c 	orr.w	r1, r1, ip
 8001116:	e795      	b.n	8001044 <__aeabi_fdiv+0x18>
 8001118:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800111c:	ea92 0f0c 	teq	r2, ip
 8001120:	d108      	bne.n	8001134 <__aeabi_fdiv+0x108>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	f47f af7d 	bne.w	8001022 <__aeabi_fmul+0x15e>
 8001128:	ea93 0f0c 	teq	r3, ip
 800112c:	f47f af70 	bne.w	8001010 <__aeabi_fmul+0x14c>
 8001130:	4608      	mov	r0, r1
 8001132:	e776      	b.n	8001022 <__aeabi_fmul+0x15e>
 8001134:	ea93 0f0c 	teq	r3, ip
 8001138:	d104      	bne.n	8001144 <__aeabi_fdiv+0x118>
 800113a:	024b      	lsls	r3, r1, #9
 800113c:	f43f af4c 	beq.w	8000fd8 <__aeabi_fmul+0x114>
 8001140:	4608      	mov	r0, r1
 8001142:	e76e      	b.n	8001022 <__aeabi_fmul+0x15e>
 8001144:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001148:	bf18      	it	ne
 800114a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800114e:	d1ca      	bne.n	80010e6 <__aeabi_fdiv+0xba>
 8001150:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001154:	f47f af5c 	bne.w	8001010 <__aeabi_fmul+0x14c>
 8001158:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800115c:	f47f af3c 	bne.w	8000fd8 <__aeabi_fmul+0x114>
 8001160:	e75f      	b.n	8001022 <__aeabi_fmul+0x15e>
 8001162:	bf00      	nop

08001164 <__aeabi_f2uiz>:
 8001164:	0042      	lsls	r2, r0, #1
 8001166:	d20e      	bcs.n	8001186 <__aeabi_f2uiz+0x22>
 8001168:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800116c:	d30b      	bcc.n	8001186 <__aeabi_f2uiz+0x22>
 800116e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001172:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001176:	d409      	bmi.n	800118c <__aeabi_f2uiz+0x28>
 8001178:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800117c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001180:	fa23 f002 	lsr.w	r0, r3, r2
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr
 800118c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001190:	d101      	bne.n	8001196 <__aeabi_f2uiz+0x32>
 8001192:	0242      	lsls	r2, r0, #9
 8001194:	d102      	bne.n	800119c <__aeabi_f2uiz+0x38>
 8001196:	f04f 30ff 	mov.w	r0, #4294967295
 800119a:	4770      	bx	lr
 800119c:	f04f 0000 	mov.w	r0, #0
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	; 0x38
 80011a8:	af0a      	add	r7, sp, #40	; 0x28
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
 80011b6:	460b      	mov	r3, r1
 80011b8:	813b      	strh	r3, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <LiquidCrystal+0x90>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d019      	beq.n	80011fa <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80011c6:	8939      	ldrh	r1, [r7, #8]
 80011c8:	897a      	ldrh	r2, [r7, #10]
 80011ca:	2300      	movs	r3, #0
 80011cc:	9308      	str	r3, [sp, #32]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9307      	str	r3, [sp, #28]
 80011d2:	2300      	movs	r3, #0
 80011d4:	9306      	str	r3, [sp, #24]
 80011d6:	2300      	movs	r3, #0
 80011d8:	9305      	str	r3, [sp, #20]
 80011da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011dc:	9304      	str	r3, [sp, #16]
 80011de:	8c3b      	ldrh	r3, [r7, #32]
 80011e0:	9303      	str	r3, [sp, #12]
 80011e2:	8bbb      	ldrh	r3, [r7, #28]
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	8b3b      	ldrh	r3, [r7, #24]
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	460b      	mov	r3, r1
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f820 	bl	8001238 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80011f8:	e018      	b.n	800122c <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80011fa:	8939      	ldrh	r1, [r7, #8]
 80011fc:	897a      	ldrh	r2, [r7, #10]
 80011fe:	2300      	movs	r3, #0
 8001200:	9308      	str	r3, [sp, #32]
 8001202:	2300      	movs	r3, #0
 8001204:	9307      	str	r3, [sp, #28]
 8001206:	2300      	movs	r3, #0
 8001208:	9306      	str	r3, [sp, #24]
 800120a:	2300      	movs	r3, #0
 800120c:	9305      	str	r3, [sp, #20]
 800120e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001210:	9304      	str	r3, [sp, #16]
 8001212:	8c3b      	ldrh	r3, [r7, #32]
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	8bbb      	ldrh	r3, [r7, #28]
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	8b3b      	ldrh	r3, [r7, #24]
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	460b      	mov	r3, r1
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f806 	bl	8001238 <init>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000

08001238 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	4611      	mov	r1, r2
 8001242:	461a      	mov	r2, r3
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	460b      	mov	r3, r1
 800124a:	81bb      	strh	r3, [r7, #12]
 800124c:	4613      	mov	r3, r2
 800124e:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <init+0x84>)
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <init+0x88>)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <init+0x8c>)
 800125e:	8b3b      	ldrh	r3, [r7, #24]
 8001260:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <init+0x90>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <init+0x94>)
 800126a:	8bbb      	ldrh	r3, [r7, #28]
 800126c:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <init+0x94>)
 8001270:	8c3b      	ldrh	r3, [r7, #32]
 8001272:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8001274:	4a15      	ldr	r2, [pc, #84]	; (80012cc <init+0x94>)
 8001276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001278:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <init+0x94>)
 800127c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800127e:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <init+0x94>)
 8001282:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001284:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <init+0x94>)
 8001288:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800128a:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 800128c:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <init+0x94>)
 800128e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001290:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <init+0x94>)
 8001294:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001296:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e002      	b.n	80012ac <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <init+0x98>)
 80012a8:	2210      	movs	r2, #16
 80012aa:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80012ac:	2102      	movs	r1, #2
 80012ae:	2010      	movs	r0, #16
 80012b0:	f000 f810 	bl	80012d4 <begin>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000103c 	.word	0x2000103c
 80012c0:	2000101c 	.word	0x2000101c
 80012c4:	2000103a 	.word	0x2000103a
 80012c8:	20001020 	.word	0x20001020
 80012cc:	20001028 	.word	0x20001028
 80012d0:	20001039 	.word	0x20001039

080012d4 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d906      	bls.n	80012f8 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80012ea:	4b80      	ldr	r3, [pc, #512]	; (80014ec <begin+0x218>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <begin+0x218>)
 80012f6:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80012f8:	4a7d      	ldr	r2, [pc, #500]	; (80014f0 <begin+0x21c>)
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3340      	adds	r3, #64	; 0x40
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f988 	bl	800161c <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800130c:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <begin+0x220>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d009      	beq.n	8001328 <begin+0x54>
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d106      	bne.n	8001328 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800131a:	4b74      	ldr	r3, [pc, #464]	; (80014ec <begin+0x218>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b71      	ldr	r3, [pc, #452]	; (80014ec <begin+0x218>)
 8001326:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8001328:	f000 f8f6 	bl	8001518 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]

  if(_fourbit_mode)
 8001334:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <begin+0x224>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01b      	beq.n	8001374 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 800133c:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <begin+0x228>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <begin+0x22c>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b6e      	ldr	r3, [pc, #440]	; (8001504 <begin+0x230>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	4313      	orrs	r3, r2
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <begin+0x234>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	4313      	orrs	r3, r2
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <begin+0x234>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	4313      	orrs	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <begin+0x234>)
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <begin+0x234>)
 800136a:	88db      	ldrh	r3, [r3, #6]
 800136c:	4313      	orrs	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	e02a      	b.n	80013ca <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001374:	4b61      	ldr	r3, [pc, #388]	; (80014fc <begin+0x228>)
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	4b61      	ldr	r3, [pc, #388]	; (8001500 <begin+0x22c>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4313      	orrs	r3, r2
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b60      	ldr	r3, [pc, #384]	; (8001504 <begin+0x230>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4313      	orrs	r3, r2
 8001386:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <begin+0x234>)
 800138a:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800138c:	4313      	orrs	r3, r2
 800138e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001390:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <begin+0x234>)
 8001392:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001394:	4313      	orrs	r3, r2
 8001396:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <begin+0x234>)
 800139a:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800139c:	4313      	orrs	r3, r2
 800139e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <begin+0x234>)
 80013a2:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <begin+0x234>)
 80013aa:	891b      	ldrh	r3, [r3, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b55      	ldr	r3, [pc, #340]	; (8001508 <begin+0x234>)
 80013b2:	895b      	ldrh	r3, [r3, #10]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <begin+0x234>)
 80013ba:	899b      	ldrh	r3, [r3, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b51      	ldr	r3, [pc, #324]	; (8001508 <begin+0x234>)
 80013c2:	89db      	ldrh	r3, [r3, #14]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013c8:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(_port, &gpio_init);
 80013ca:	4b50      	ldr	r3, [pc, #320]	; (800150c <begin+0x238>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f107 0208 	add.w	r2, r7, #8
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 fc83 	bl	8002ce0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  //HAL_Delay(50);
  OSTimeDlyHMSM(0u, 0u, 0u, 50);
 80013da:	2332      	movs	r3, #50	; 0x32
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2000      	movs	r0, #0
 80013e2:	f005 f8bf 	bl	8006564 <OSTimeDlyHMSM>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <begin+0x238>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a44      	ldr	r2, [pc, #272]	; (80014fc <begin+0x228>)
 80013ec:	8811      	ldrh	r1, [r2, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fe10 	bl	8003016 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80013f6:	4b45      	ldr	r3, [pc, #276]	; (800150c <begin+0x238>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a42      	ldr	r2, [pc, #264]	; (8001504 <begin+0x230>)
 80013fc:	8811      	ldrh	r1, [r2, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fe08 	bl	8003016 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <begin+0x22c>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d007      	beq.n	800141e <begin+0x14a>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <begin+0x238>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <begin+0x22c>)
 8001414:	8811      	ldrh	r1, [r2, #0]
 8001416:	2200      	movs	r2, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fdfc 	bl	8003016 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <begin+0x218>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11e      	bne.n	8001468 <begin+0x194>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 fa4e 	bl	80018cc <write4bits>
    //HAL_Delay(5); // wait min 4.1ms
    OSTimeDlyHMSM(0u, 0u, 0u, 5);
 8001430:	2305      	movs	r3, #5
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2000      	movs	r0, #0
 8001438:	f005 f894 	bl	8006564 <OSTimeDlyHMSM>
    // second try
    write4bits(0x03);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 fa45 	bl	80018cc <write4bits>
    //HAL_Delay(5); // wait min 4.1ms
    OSTimeDlyHMSM(0u, 0u, 0u, 5);
 8001442:	2305      	movs	r3, #5
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2000      	movs	r0, #0
 800144a:	f005 f88b 	bl	8006564 <OSTimeDlyHMSM>
    // third go!
    write4bits(0x03); 
 800144e:	2003      	movs	r0, #3
 8001450:	f000 fa3c 	bl	80018cc <write4bits>
    //HAL_Delay(1);
    OSTimeDlyHMSM(0u, 0u, 0u, 1);
 8001454:	2301      	movs	r3, #1
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2000      	movs	r0, #0
 800145c:	f005 f882 	bl	8006564 <OSTimeDlyHMSM>
    // finally, set to 4-bit interface
    write4bits(0x02); 
 8001460:	2002      	movs	r0, #2
 8001462:	f000 fa33 	bl	80018cc <write4bits>
 8001466:	e023      	b.n	80014b0 <begin+0x1dc>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <begin+0x218>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f99d 	bl	80017b2 <command>
    //HAL_Delay(5);  // wait more than 4.1ms
    OSTimeDlyHMSM(0u, 0u, 0u, 5);
 8001478:	2305      	movs	r3, #5
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2000      	movs	r0, #0
 8001480:	f005 f870 	bl	8006564 <OSTimeDlyHMSM>
    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <begin+0x218>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f043 0320 	orr.w	r3, r3, #32
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f98f 	bl	80017b2 <command>
    //HAL_Delay(1);
    OSTimeDlyHMSM(0u, 0u, 0u, 1);
 8001494:	2301      	movs	r3, #1
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f005 f862 	bl	8006564 <OSTimeDlyHMSM>
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <begin+0x218>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f981 	bl	80017b2 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <begin+0x218>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f979 	bl	80017b2 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <begin+0x23c>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	701a      	strb	r2, [r3, #0]
  display();
 80014c6:	f000 f907 	bl	80016d8 <display>

  // clear it off
  clear();
 80014ca:	f000 f8c5 	bl	8001658 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <begin+0x240>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <begin+0x240>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f967 	bl	80017b2 <command>

}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20001039 	.word	0x20001039
 80014f0:	20001025 	.word	0x20001025
 80014f4:	20000200 	.word	0x20000200
 80014f8:	20000000 	.word	0x20000000
 80014fc:	2000103c 	.word	0x2000103c
 8001500:	2000101c 	.word	0x2000101c
 8001504:	2000103a 	.word	0x2000103a
 8001508:	20001028 	.word	0x20001028
 800150c:	20001020 	.word	0x20001020
 8001510:	20001024 	.word	0x20001024
 8001514:	20001038 	.word	0x20001038

08001518 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <enableClock+0xe8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a38      	ldr	r2, [pc, #224]	; (8001604 <enableClock+0xec>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d10c      	bne.n	8001542 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <enableClock+0xf0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a36      	ldr	r2, [pc, #216]	; (8001608 <enableClock+0xf0>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <enableClock+0xf0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOE_CLK_ENABLE();
/*	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();*/

  // if you have a port that is not listed add it below the other else ifs
}
 8001540:	e058      	b.n	80015f4 <enableClock+0xdc>
  else if(_port == GPIOB)
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <enableClock+0xe8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <enableClock+0xf4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d10c      	bne.n	8001566 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <enableClock+0xf0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <enableClock+0xf0>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <enableClock+0xf0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
}
 8001564:	e046      	b.n	80015f4 <enableClock+0xdc>
  else if(_port == GPIOB)
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <enableClock+0xe8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a28      	ldr	r2, [pc, #160]	; (800160c <enableClock+0xf4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d10c      	bne.n	800158a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <enableClock+0xf0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <enableClock+0xf0>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <enableClock+0xf0>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	e034      	b.n	80015f4 <enableClock+0xdc>
	else if(_port == GPIOC)
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <enableClock+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <enableClock+0xf8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10c      	bne.n	80015ae <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <enableClock+0xf0>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <enableClock+0xf0>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <enableClock+0xf0>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
}
 80015ac:	e022      	b.n	80015f4 <enableClock+0xdc>
	else if(_port == GPIOD)
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <enableClock+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <enableClock+0xfc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10c      	bne.n	80015d2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <enableClock+0xf0>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <enableClock+0xf0>)
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <enableClock+0xf0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	e010      	b.n	80015f4 <enableClock+0xdc>
	else if(_port == GPIOE)
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <enableClock+0xe8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <enableClock+0x100>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10b      	bne.n	80015f4 <enableClock+0xdc>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <enableClock+0xf0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <enableClock+0xf0>)
 80015e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <enableClock+0xf0>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20001020 	.word	0x20001020
 8001604:	40010800 	.word	0x40010800
 8001608:	40021000 	.word	0x40021000
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	40011800 	.word	0x40011800

0800161c <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <setRowOffsets+0x38>)
 8001630:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <setRowOffsets+0x38>)
 8001638:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <setRowOffsets+0x38>)
 8001640:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <setRowOffsets+0x38>)
 8001648:	70da      	strb	r2, [r3, #3]
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20001018 	.word	0x20001018

08001658 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800165c:	2001      	movs	r0, #1
 800165e:	f000 f8a8 	bl	80017b2 <command>
  //HAL_Delay(2);  // this command takes a long time!
  OSTimeDlyHMSM(0u, 0u, 0u, 2);
 8001662:	2302      	movs	r3, #2
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f004 ff7b 	bl	8006564 <OSTimeDlyHMSM>
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <setCursor>:
  //HAL_Delay(2);  // this command takes a long time!
  OSTimeDlyHMSM(0u, 0u, 0u, 2);
}

void setCursor(uint8_t col, uint8_t row)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	460a      	mov	r2, r1
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	4613      	mov	r3, r2
 8001682:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001684:	2304      	movs	r3, #4
 8001686:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d803      	bhi.n	8001698 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <setCursor+0x5c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	79ba      	ldrb	r2, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d303      	bcc.n	80016aa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <setCursor+0x5c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <setCursor+0x60>)
 80016ae:	5cd2      	ldrb	r2, [r2, r3]
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f876 	bl	80017b2 <command>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20001025 	.word	0x20001025
 80016d4:	20001018 	.word	0x20001018

080016d8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <display+0x28>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <display+0x28>)
 80016e8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <display+0x28>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f85c 	bl	80017b2 <command>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20001024 	.word	0x20001024

08001704 <noBlink>:
  _displaycontrol |= LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turn on and off the blinking cursor
void noBlink(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  _displaycontrol &= ~LCD_BLINKON;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <noBlink+0x28>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <noBlink+0x28>)
 8001714:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <noBlink+0x28>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f846 	bl	80017b2 <command>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20001024 	.word	0x20001024

08001730 <blink>:
void blink(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_BLINKON;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <blink+0x28>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <blink+0x28>)
 8001740:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <blink+0x28>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f830 	bl	80017b2 <command>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20001024 	.word	0x20001024

0800175c <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <print+0x12>
 800176a:	2300      	movs	r3, #0
 800176c:	e01d      	b.n	80017aa <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe fdac 	bl	80002d0 <strlen>
 8001778:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800177e:	e00c      	b.n	800179a <print+0x3e>
    if (write(*buffer++)) n++;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	617a      	str	r2, [r7, #20]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f820 	bl	80017ce <write>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <print+0x4a>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	613a      	str	r2, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ed      	bne.n	8001780 <print+0x24>
 80017a4:	e000      	b.n	80017a8 <print+0x4c>
    else break;
 80017a6:	bf00      	nop
  }
  return n;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f813 	bl	80017ec <send>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <write>:

inline size_t write(uint8_t value) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f805 	bl	80017ec <send>
  return 1; // assume sucess
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <send+0x6c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <send+0x70>)
 8001802:	8811      	ldrh	r1, [r2, #0]
 8001804:	79ba      	ldrb	r2, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fc05 	bl	8003016 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <send+0x74>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d007      	beq.n	8001824 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <send+0x6c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <send+0x74>)
 800181a:	8811      	ldrh	r1, [r2, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fbf9 	bl	8003016 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <send+0x78>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <send+0x4e>
    write8bits(value); 
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f874 	bl	8001920 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001838:	e009      	b.n	800184e <send+0x62>
    write4bits(value>>4);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f843 	bl	80018cc <write4bits>
    write4bits(value);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f83f 	bl	80018cc <write4bits>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20001020 	.word	0x20001020
 800185c:	2000103c 	.word	0x2000103c
 8001860:	2000101c 	.word	0x2000101c
 8001864:	20001039 	.word	0x20001039

08001868 <pulseEnable>:

void pulseEnable(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <pulseEnable+0x5c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <pulseEnable+0x60>)
 8001872:	8811      	ldrh	r1, [r2, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fbcd 	bl	8003016 <HAL_GPIO_WritePin>
  //HAL_Delay(1);
  OSTimeDlyHMSM(0u, 0u, 0u, 1);
 800187c:	2301      	movs	r3, #1
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2000      	movs	r0, #0
 8001884:	f004 fe6e 	bl	8006564 <OSTimeDlyHMSM>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <pulseEnable+0x5c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <pulseEnable+0x60>)
 800188e:	8811      	ldrh	r1, [r2, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fbbf 	bl	8003016 <HAL_GPIO_WritePin>
  //HAL_Delay(1);    // enable pulse must be >450ns
  OSTimeDlyHMSM(0u, 0u, 0u, 1);
 8001898:	2301      	movs	r3, #1
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f004 fe60 	bl	8006564 <OSTimeDlyHMSM>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <pulseEnable+0x5c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <pulseEnable+0x60>)
 80018aa:	8811      	ldrh	r1, [r2, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fbb1 	bl	8003016 <HAL_GPIO_WritePin>
  //HAL_Delay(1);   // commands need > 37us to settle
  OSTimeDlyHMSM(0u, 0u, 0u, 1);
 80018b4:	2301      	movs	r3, #1
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2000      	movs	r0, #0
 80018bc:	f004 fe52 	bl	8006564 <OSTimeDlyHMSM>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20001020 	.word	0x20001020
 80018c8:	2000103a 	.word	0x2000103a

080018cc <write4bits>:

void write4bits(uint8_t value) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e013      	b.n	8001904 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <write4bits+0x4c>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <write4bits+0x50>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018e8:	79fa      	ldrb	r2, [r7, #7]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	fa42 f303 	asr.w	r3, r2, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	f001 fb8c 	bl	8003016 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b03      	cmp	r3, #3
 8001908:	dde8      	ble.n	80018dc <write4bits+0x10>
  }

  pulseEnable();
 800190a:	f7ff ffad 	bl	8001868 <pulseEnable>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20001020 	.word	0x20001020
 800191c:	20001028 	.word	0x20001028

08001920 <write8bits>:

void write8bits(uint8_t value) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e013      	b.n	8001958 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <write8bits+0x4c>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <write8bits+0x50>)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	fa42 f303 	asr.w	r3, r2, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	f001 fb62 	bl	8003016 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b07      	cmp	r3, #7
 800195c:	dde8      	ble.n	8001930 <write8bits+0x10>
  }
  
  pulseEnable();
 800195e:	f7ff ff83 	bl	8001868 <pulseEnable>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20001020 	.word	0x20001020
 8001970:	20001028 	.word	0x20001028

08001974 <LecturaPulsadores>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void LecturaPulsadores (void *p_arg)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	menuState=ModoAut;								//Con este estado arranca el programa
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <LecturaPulsadores+0x254>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	while(DEF_TRUE)
	{
		OSTimeDlyHMSM(0, 0, 0, 25u); 				//Tiempo de lectura: 100ms
 8001982:	2319      	movs	r3, #25
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2000      	movs	r0, #0
 800198a:	f004 fdeb 	bl	8006564 <OSTimeDlyHMSM>

		/***************************PULSADOR MENU **************************************/
		if(HAL_GPIO_ReadPin(GPIOB, PULSADOR1_Pin) == GPIO_PIN_RESET && !start)
 800198e:	2120      	movs	r1, #32
 8001990:	488e      	ldr	r0, [pc, #568]	; (8001bcc <LecturaPulsadores+0x258>)
 8001992:	f001 fb29 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11d      	bne.n	80019d8 <LecturaPulsadores+0x64>
 800199c:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <LecturaPulsadores+0x25c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d016      	beq.n	80019d8 <LecturaPulsadores+0x64>
		{
			menuState++;
 80019aa:	4b87      	ldr	r3, [pc, #540]	; (8001bc8 <LecturaPulsadores+0x254>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b85      	ldr	r3, [pc, #532]	; (8001bc8 <LecturaPulsadores+0x254>)
 80019b4:	701a      	strb	r2, [r3, #0]
			if (menuState == count)
 80019b6:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <LecturaPulsadores+0x254>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d102      	bne.n	80019c4 <LecturaPulsadores+0x50>
			{
				menuState = ModoAut;				//El menú es circular
 80019be:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <LecturaPulsadores+0x254>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
			}
			OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 80019c4:	200e      	movs	r0, #14
 80019c6:	f004 fbdb 	bl	8006180 <OSTaskResume>
			OSTimeDlyHMSM(0, 0, 0, 400u);			//Delay luego de pulsarlo
 80019ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2000      	movs	r0, #0
 80019d4:	f004 fdc6 	bl	8006564 <OSTimeDlyHMSM>

		}
		/***************************PULSADOR MENU **************************************/

		/***************************PULSADOR ARRIBA ************************************/
		if(HAL_GPIO_ReadPin(GPIOB, PULSADOR2_Pin) == GPIO_PIN_RESET)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	487c      	ldr	r0, [pc, #496]	; (8001bcc <LecturaPulsadores+0x258>)
 80019dc:	f001 fb04 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d175      	bne.n	8001ad2 <LecturaPulsadores+0x15e>
		{
			switch(menuState)
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <LecturaPulsadores+0x254>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d85f      	bhi.n	8001aae <LecturaPulsadores+0x13a>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <LecturaPulsadores+0x80>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001aaf 	.word	0x08001aaf
 80019f8:	08001a11 	.word	0x08001a11
 80019fc:	08001a3d 	.word	0x08001a3d
 8001a00:	08001a53 	.word	0x08001a53
 8001a04:	08001a6d 	.word	0x08001a6d
 8001a08:	08001a87 	.word	0x08001a87
 8001a0c:	08001aaf 	.word	0x08001aaf
					  	{
					  	case ModoAut:				//Si display muestra modo automatico:
					  		break;

					  	case ModoMan:
					  		if (!HAL_GPIO_ReadPin(GPIOB, Fc_Sup_Pin)) // subo solo si no toco FC
 8001a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a14:	486d      	ldr	r0, [pc, #436]	; (8001bcc <LecturaPulsadores+0x258>)
 8001a16:	f001 fae7 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d106      	bne.n	8001a2e <LecturaPulsadores+0xba>
					  		{
					  			giroHorario = false;
 8001a20:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <LecturaPulsadores+0x260>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
					  			giroAntiHorario = true;
 8001a26:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <LecturaPulsadores+0x264>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
					  		else
					  		{
					  			giroHorario = false;
					  			giroAntiHorario = false;
					  		}
					  		break;
 8001a2c:	e03f      	b.n	8001aae <LecturaPulsadores+0x13a>
					  			giroHorario = false;
 8001a2e:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <LecturaPulsadores+0x260>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
					  			giroAntiHorario = false;
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <LecturaPulsadores+0x264>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
					  		break;
 8001a3a:	e038      	b.n	8001aae <LecturaPulsadores+0x13a>


					  	case CantRejillas:			//Si display muestra cant de rejillas:

					  		if (nRejillas < 255)
 8001a3c:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <LecturaPulsadores+0x268>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2bff      	cmp	r3, #255	; 0xff
 8001a42:	d02d      	beq.n	8001aa0 <LecturaPulsadores+0x12c>
					  		{
					  			nRejillas ++;
 8001a44:	4b65      	ldr	r3, [pc, #404]	; (8001bdc <LecturaPulsadores+0x268>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <LecturaPulsadores+0x268>)
 8001a4e:	701a      	strb	r2, [r3, #0]
					  		}
					  		break;
 8001a50:	e026      	b.n	8001aa0 <LecturaPulsadores+0x12c>

					  	case Desplazamiento:		//Si display muestra desplazamiento:
					  		if (distancia_mm < 65535)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <LecturaPulsadores+0x26c>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d022      	beq.n	8001aa4 <LecturaPulsadores+0x130>
					  		{
					  			distancia_mm ++;
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <LecturaPulsadores+0x26c>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <LecturaPulsadores+0x26c>)
 8001a68:	801a      	strh	r2, [r3, #0]
					  		}
					  		break;
 8001a6a:	e01b      	b.n	8001aa4 <LecturaPulsadores+0x130>

					  	case VelMax:				//Si display muestra velocidad maxima:
					  		if (velMAX_RPM < 65535)
 8001a6c:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <LecturaPulsadores+0x270>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d017      	beq.n	8001aa8 <LecturaPulsadores+0x134>
					  		{
					  			velMAX_RPM++;
 8001a78:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <LecturaPulsadores+0x270>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <LecturaPulsadores+0x270>)
 8001a82:	801a      	strh	r2, [r3, #0]
					  		}
					  		break;
 8001a84:	e010      	b.n	8001aa8 <LecturaPulsadores+0x134>

					  	case VelMin:				//Si display muestra velocidad minima:
					  		if (velMIN_RPM < 65535)
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <LecturaPulsadores+0x274>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00c      	beq.n	8001aac <LecturaPulsadores+0x138>
					  		{
					  			velMIN_RPM++;
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <LecturaPulsadores+0x274>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <LecturaPulsadores+0x274>)
 8001a9c:	801a      	strh	r2, [r3, #0]
					  		}
					  		break;
 8001a9e:	e005      	b.n	8001aac <LecturaPulsadores+0x138>
					  		break;
 8001aa0:	bf00      	nop
 8001aa2:	e004      	b.n	8001aae <LecturaPulsadores+0x13a>
					  		break;
 8001aa4:	bf00      	nop
 8001aa6:	e002      	b.n	8001aae <LecturaPulsadores+0x13a>
					  		break;
 8001aa8:	bf00      	nop
 8001aaa:	e000      	b.n	8001aae <LecturaPulsadores+0x13a>
					  		break;
 8001aac:	bf00      	nop

					  	case count:					//Este estado no debería darse
					  		break;

					  	}
			if( menuState != ModoMan && menuState != ModoAut )
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <LecturaPulsadores+0x254>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d006      	beq.n	8001ac4 <LecturaPulsadores+0x150>
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <LecturaPulsadores+0x254>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <LecturaPulsadores+0x150>
				{
				OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001abe:	200e      	movs	r0, #14
 8001ac0:	f004 fb5e 	bl	8006180 <OSTaskResume>
				}

			OSTimeDlyHMSM(0, 0, 0, 100u);				//Delay luego de pulsarlo
 8001ac4:	2364      	movs	r3, #100	; 0x64
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2000      	movs	r0, #0
 8001acc:	f004 fd4a 	bl	8006564 <OSTimeDlyHMSM>
 8001ad0:	e096      	b.n	8001c00 <LecturaPulsadores+0x28c>

		/***************************PULSADOR ABAJO ************************************/
		else
		{

			if(HAL_GPIO_ReadPin(GPIOB, PULSADOR3_Pin) == GPIO_PIN_RESET)
 8001ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad6:	483d      	ldr	r0, [pc, #244]	; (8001bcc <LecturaPulsadores+0x258>)
 8001ad8:	f001 fa86 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8084 	bne.w	8001bec <LecturaPulsadores+0x278>
			{
				switch(menuState)
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <LecturaPulsadores+0x254>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d85a      	bhi.n	8001ba2 <LecturaPulsadores+0x22e>
 8001aec:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <LecturaPulsadores+0x180>)
 8001aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af2:	bf00      	nop
 8001af4:	08001ba3 	.word	0x08001ba3
 8001af8:	08001b11 	.word	0x08001b11
 8001afc:	08001b3d 	.word	0x08001b3d
 8001b00:	08001b53 	.word	0x08001b53
 8001b04:	08001b69 	.word	0x08001b69
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001ba3 	.word	0x08001ba3
							{
							case ModoAut:			//Si display muestra modo automatico:
								break;

							case ModoMan:			//Si display muestra modo manual:
								if (!HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))
 8001b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b14:	482d      	ldr	r0, [pc, #180]	; (8001bcc <LecturaPulsadores+0x258>)
 8001b16:	f001 fa67 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d106      	bne.n	8001b2e <LecturaPulsadores+0x1ba>
								{						//Bajo solo si no toco el FC
									giroHorario = true;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <LecturaPulsadores+0x260>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
									giroAntiHorario = false;
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <LecturaPulsadores+0x264>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
								else
								{
									giroHorario = false;
									giroAntiHorario = false;
								}
								break;
 8001b2c:	e039      	b.n	8001ba2 <LecturaPulsadores+0x22e>
									giroHorario = false;
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <LecturaPulsadores+0x260>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
									giroAntiHorario = false;
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <LecturaPulsadores+0x264>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
								break;
 8001b3a:	e032      	b.n	8001ba2 <LecturaPulsadores+0x22e>


							case CantRejillas:		//Si display muestra cantidad de rejillas:
								if (nRejillas > 0)
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <LecturaPulsadores+0x268>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d027      	beq.n	8001b94 <LecturaPulsadores+0x220>
								{
									nRejillas --;
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <LecturaPulsadores+0x268>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <LecturaPulsadores+0x268>)
 8001b4e:	701a      	strb	r2, [r3, #0]
								}
								break;
 8001b50:	e020      	b.n	8001b94 <LecturaPulsadores+0x220>

							case Desplazamiento:	//Si display muestra desplazameinto:
								if (distancia_mm > 0)
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <LecturaPulsadores+0x26c>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01e      	beq.n	8001b98 <LecturaPulsadores+0x224>
								{
									distancia_mm --;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <LecturaPulsadores+0x26c>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <LecturaPulsadores+0x26c>)
 8001b64:	801a      	strh	r2, [r3, #0]
								}
								break;
 8001b66:	e017      	b.n	8001b98 <LecturaPulsadores+0x224>

							case VelMax:			//Si display muestra velocidad maxima:
								if (velMAX_RPM > 0)
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <LecturaPulsadores+0x270>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <LecturaPulsadores+0x228>
								{
									velMAX_RPM--;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <LecturaPulsadores+0x270>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <LecturaPulsadores+0x270>)
 8001b7a:	801a      	strh	r2, [r3, #0]
								}
								break;
 8001b7c:	e00e      	b.n	8001b9c <LecturaPulsadores+0x228>

							case VelMin:			//Si display muestra velocidad minima:
								if (velMIN_RPM > 0)
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <LecturaPulsadores+0x274>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <LecturaPulsadores+0x22c>
								{
									velMIN_RPM--;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <LecturaPulsadores+0x274>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <LecturaPulsadores+0x274>)
 8001b90:	801a      	strh	r2, [r3, #0]
								}
								break;
 8001b92:	e005      	b.n	8001ba0 <LecturaPulsadores+0x22c>
								break;
 8001b94:	bf00      	nop
 8001b96:	e004      	b.n	8001ba2 <LecturaPulsadores+0x22e>
								break;
 8001b98:	bf00      	nop
 8001b9a:	e002      	b.n	8001ba2 <LecturaPulsadores+0x22e>
								break;
 8001b9c:	bf00      	nop
 8001b9e:	e000      	b.n	8001ba2 <LecturaPulsadores+0x22e>
								break;
 8001ba0:	bf00      	nop
							case count:			//Este estado no deberia darse:
								break;

							}

				if( menuState != ModoMan && menuState != ModoAut )
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <LecturaPulsadores+0x254>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d006      	beq.n	8001bb8 <LecturaPulsadores+0x244>
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <LecturaPulsadores+0x254>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <LecturaPulsadores+0x244>
				{
				OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001bb2:	200e      	movs	r0, #14
 8001bb4:	f004 fae4 	bl	8006180 <OSTaskResume>
				}
				OSTimeDlyHMSM(0, 0, 0, 100u);			//Delay luego de pulsarlo
 8001bb8:	2364      	movs	r3, #100	; 0x64
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f004 fcd0 	bl	8006564 <OSTimeDlyHMSM>
 8001bc4:	e01c      	b.n	8001c00 <LecturaPulsadores+0x28c>
 8001bc6:	bf00      	nop
 8001bc8:	20001088 	.word	0x20001088
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	20000201 	.word	0x20000201
 8001bd4:	20000202 	.word	0x20000202
 8001bd8:	20000203 	.word	0x20000203
 8001bdc:	20000002 	.word	0x20000002
 8001be0:	20000004 	.word	0x20000004
 8001be4:	20000006 	.word	0x20000006
 8001be8:	20000008 	.word	0x20000008

			}
			else //Si modo manual y no se está pulsando ni arriba ni abajo
			{
				if(menuState == ModoMan)
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <LecturaPulsadores+0x300>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <LecturaPulsadores+0x28c>
				{
					giroHorario = false;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <LecturaPulsadores+0x304>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
					giroAntiHorario = false;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <LecturaPulsadores+0x308>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]


		/***************************PULSADOR ABAJO ************************************/

		/***************************PULSADOR START/STOP *******************************/
		if(HAL_GPIO_ReadPin(GPIOB, PULSADOR4_Pin) == GPIO_PIN_RESET)
 8001c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <LecturaPulsadores+0x30c>)
 8001c06:	f001 f9ef 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aeb8 	bne.w	8001982 <LecturaPulsadores+0xe>
		{
			if (menuState == ModoAut || menuState == ModoMan)	//solo start en manual o automatico
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <LecturaPulsadores+0x300>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <LecturaPulsadores+0x2b0>
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <LecturaPulsadores+0x300>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f47f aeaf 	bne.w	8001982 <LecturaPulsadores+0xe>
			{
				start = !start;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <LecturaPulsadores+0x310>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <LecturaPulsadores+0x310>)
 8001c40:	701a      	strb	r2, [r3, #0]
				if (!start)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <LecturaPulsadores+0x310>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <LecturaPulsadores+0x2e8>
				{
					halt = true;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <LecturaPulsadores+0x314>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
					OSTimeDlyResume(APP_CFG_TASK3_PRIO); //Le quita los delay a la tarea del motor
 8001c56:	200d      	movs	r0, #13
 8001c58:	f004 fce8 	bl	800662c <OSTimeDlyResume>
				}
				OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001c5c:	200e      	movs	r0, #14
 8001c5e:	f004 fa8f 	bl	8006180 <OSTaskResume>
				OSTimeDlyHMSM(0, 0, 0, 400u);			//Delay luego de pulsarlo
 8001c62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f004 fc7a 	bl	8006564 <OSTimeDlyHMSM>
		OSTimeDlyHMSM(0, 0, 0, 25u); 				//Tiempo de lectura: 100ms
 8001c70:	e687      	b.n	8001982 <LecturaPulsadores+0xe>
 8001c72:	bf00      	nop
 8001c74:	20001088 	.word	0x20001088
 8001c78:	20000202 	.word	0x20000202
 8001c7c:	20000203 	.word	0x20000203
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	20000201 	.word	0x20000201
 8001c88:	20000001 	.word	0x20000001

08001c8c <ActualizarDisplay>:
*
* Note(s)     : none.
*********************************************************************************************************
*/
static void ActualizarDisplay (void *p_arg)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af04      	add	r7, sp, #16
 8001c92:	6078      	str	r0, [r7, #4]
												//Configuracion inicial
	menuState=ModoAut;
 8001c94:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <ActualizarDisplay+0x18c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
	LiquidCrystal(GPIOA, LCD_RS_Pin, LCD_RW_Pin, LCD_EN_Pin, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	9303      	str	r3, [sp, #12]
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb6:	4859      	ldr	r0, [pc, #356]	; (8001e1c <ActualizarDisplay+0x190>)
 8001cb8:	f7ff fa74 	bl	80011a4 <LiquidCrystal>
	OSTimeDlyHMSM(0u, 0u, 1u, 0u);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f004 fc4e 	bl	8006564 <OSTimeDlyHMSM>



	  while (1)
	  {
		  	clear();
 8001cc8:	f7ff fcc6 	bl	8001658 <clear>
		  	setCursor(0,0);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fcd0 	bl	8001674 <setCursor>
		  	char buffer[5];			//Este buffer contiene los números de los parametros

		  	switch(menuState)
 8001cd4:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <ActualizarDisplay+0x18c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	f200 8089 	bhi.w	8001df0 <ActualizarDisplay+0x164>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <ActualizarDisplay+0x58>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d01 	.word	0x08001d01
 8001ce8:	08001d37 	.word	0x08001d37
 8001cec:	08001d3f 	.word	0x08001d3f
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d97 	.word	0x08001d97
 8001cf8:	08001dc3 	.word	0x08001dc3
 8001cfc:	08001df1 	.word	0x08001df1
		  	{
		  	case ModoAut:

		  		print("Modo Automatico");
 8001d00:	4847      	ldr	r0, [pc, #284]	; (8001e20 <ActualizarDisplay+0x194>)
 8001d02:	f7ff fd2b 	bl	800175c <print>
		  		if (errorTimeoutSup)
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <ActualizarDisplay+0x198>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <ActualizarDisplay+0x92>
		  		{
		  			setCursor(0,1);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff fcaf 	bl	8001674 <setCursor>
		  			print("Err Fc Sup");
 8001d16:	4844      	ldr	r0, [pc, #272]	; (8001e28 <ActualizarDisplay+0x19c>)
 8001d18:	f7ff fd20 	bl	800175c <print>
		  				setCursor(0,1);
		  				print("Err Fc Inf");
		  			}

		  		}
		  		break;
 8001d1c:	e067      	b.n	8001dee <ActualizarDisplay+0x162>
		  			if (errorTimeoutInf)
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <ActualizarDisplay+0x1a0>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <ActualizarDisplay+0x162>
		  				setCursor(0,1);
 8001d26:	2101      	movs	r1, #1
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fca3 	bl	8001674 <setCursor>
		  				print("Err Fc Inf");
 8001d2e:	4840      	ldr	r0, [pc, #256]	; (8001e30 <ActualizarDisplay+0x1a4>)
 8001d30:	f7ff fd14 	bl	800175c <print>
		  		break;
 8001d34:	e05b      	b.n	8001dee <ActualizarDisplay+0x162>
		  	case ModoMan:

		  		print("Modo Manual");
 8001d36:	483f      	ldr	r0, [pc, #252]	; (8001e34 <ActualizarDisplay+0x1a8>)
 8001d38:	f7ff fd10 	bl	800175c <print>

		  		break;
 8001d3c:	e058      	b.n	8001df0 <ActualizarDisplay+0x164>
		  	case CantRejillas:

		  		print("Cant de Rejillas");
 8001d3e:	483e      	ldr	r0, [pc, #248]	; (8001e38 <ActualizarDisplay+0x1ac>)
 8001d40:	f7ff fd0c 	bl	800175c <print>
		  		setCursor(0,1);
 8001d44:	2101      	movs	r1, #1
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff fc94 	bl	8001674 <setCursor>
		  		sprintf(buffer,"%d",nRejillas);
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <ActualizarDisplay+0x1b0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	493a      	ldr	r1, [pc, #232]	; (8001e40 <ActualizarDisplay+0x1b4>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f005 fbab 	bl	80074b4 <siprintf>
		  		print(buffer);
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fcfa 	bl	800175c <print>
		  		break;
 8001d68:	e042      	b.n	8001df0 <ActualizarDisplay+0x164>

		  	case Desplazamiento:
		  		print("Distancia en mm");
 8001d6a:	4836      	ldr	r0, [pc, #216]	; (8001e44 <ActualizarDisplay+0x1b8>)
 8001d6c:	f7ff fcf6 	bl	800175c <print>
		  		setCursor(0,1);
 8001d70:	2101      	movs	r1, #1
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fc7e 	bl	8001674 <setCursor>
		  		sprintf(buffer,"%d",distancia_mm);
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <ActualizarDisplay+0x1bc>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	492f      	ldr	r1, [pc, #188]	; (8001e40 <ActualizarDisplay+0x1b4>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 fb95 	bl	80074b4 <siprintf>
		  		print(buffer);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fce4 	bl	800175c <print>
		  		break;
 8001d94:	e02c      	b.n	8001df0 <ActualizarDisplay+0x164>

		  	case VelMax:
		  		print("RPM motor Max");
 8001d96:	482d      	ldr	r0, [pc, #180]	; (8001e4c <ActualizarDisplay+0x1c0>)
 8001d98:	f7ff fce0 	bl	800175c <print>
		  		setCursor(0,1);
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff fc68 	bl	8001674 <setCursor>
		  		sprintf(buffer,"%d",velMAX_RPM);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <ActualizarDisplay+0x1c4>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4924      	ldr	r1, [pc, #144]	; (8001e40 <ActualizarDisplay+0x1b4>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 fb7f 	bl	80074b4 <siprintf>
		  		print(buffer);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fcce 	bl	800175c <print>
		  		break;
 8001dc0:	e016      	b.n	8001df0 <ActualizarDisplay+0x164>

		  	case VelMin:
		  		print("RPM motor Min");
 8001dc2:	4824      	ldr	r0, [pc, #144]	; (8001e54 <ActualizarDisplay+0x1c8>)
 8001dc4:	f7ff fcca 	bl	800175c <print>
		  		setCursor(0,1);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fc52 	bl	8001674 <setCursor>
		  		sprintf(buffer,"%d",velMIN_RPM);
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <ActualizarDisplay+0x1cc>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	4919      	ldr	r1, [pc, #100]	; (8001e40 <ActualizarDisplay+0x1b4>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 fb69 	bl	80074b4 <siprintf>
		  		print(buffer);
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fcb8 	bl	800175c <print>
		  		break;
 8001dec:	e000      	b.n	8001df0 <ActualizarDisplay+0x164>
		  		break;
 8001dee:	bf00      	nop

		  	case count:
		  		break;

		  	}
		  	if(start)
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <ActualizarDisplay+0x1d0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <ActualizarDisplay+0x180>
		  	{
		  		setCursor (7,1);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	2007      	movs	r0, #7
 8001dfc:	f7ff fc3a 	bl	8001674 <setCursor>
		  		print("RUN");
 8001e00:	4817      	ldr	r0, [pc, #92]	; (8001e60 <ActualizarDisplay+0x1d4>)
 8001e02:	f7ff fcab 	bl	800175c <print>
		  		blink();
 8001e06:	f7ff fc93 	bl	8001730 <blink>
 8001e0a:	e001      	b.n	8001e10 <ActualizarDisplay+0x184>
		  	}
		  	else
		  	{
		  		noBlink();
 8001e0c:	f7ff fc7a 	bl	8001704 <noBlink>
		  	}

		  	OSTaskSuspend(APP_CFG_TASK2_PRIO); //Se autosuspende
 8001e10:	200e      	movs	r0, #14
 8001e12:	f004 fa9f 	bl	8006354 <OSTaskSuspend>
	  {
 8001e16:	e757      	b.n	8001cc8 <ActualizarDisplay+0x3c>
 8001e18:	20001088 	.word	0x20001088
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	08009940 	.word	0x08009940
 8001e24:	20000204 	.word	0x20000204
 8001e28:	08009950 	.word	0x08009950
 8001e2c:	20000205 	.word	0x20000205
 8001e30:	0800995c 	.word	0x0800995c
 8001e34:	08009968 	.word	0x08009968
 8001e38:	08009974 	.word	0x08009974
 8001e3c:	20000002 	.word	0x20000002
 8001e40:	08009988 	.word	0x08009988
 8001e44:	0800998c 	.word	0x0800998c
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	0800999c 	.word	0x0800999c
 8001e50:	20000006 	.word	0x20000006
 8001e54:	080099ac 	.word	0x080099ac
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20000201 	.word	0x20000201
 8001e60:	080099bc 	.word	0x080099bc

08001e64 <ControlMotor>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void ControlMotor (void *p_arg)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

	while(DEF_TRUE)
	{
		OSTimeDlyHMSM(0u, 0u, 0u, 40);
 8001e6c:	2328      	movs	r3, #40	; 0x28
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2000      	movs	r0, #0
 8001e74:	f004 fb76 	bl	8006564 <OSTimeDlyHMSM>

		if(start)
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <ControlMotor+0x7c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02a      	beq.n	8001ed6 <ControlMotor+0x72>
		{
			if (menuState == ModoMan)	//if modo manual
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <ControlMotor+0x80>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d11f      	bne.n	8001ec8 <ControlMotor+0x64>
			{
				if (giroHorario && !giroAntiHorario )
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <ControlMotor+0x84>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <ControlMotor+0x40>
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <ControlMotor+0x88>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f083 0301 	eor.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <ControlMotor+0x40>
				{
					GiroHorario();
 8001e9e:	f000 fa19 	bl	80022d4 <GiroHorario>
 8001ea2:	e01b      	b.n	8001edc <ControlMotor+0x78>
				}
				else
					if (!giroHorario && giroAntiHorario )
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <ControlMotor+0x84>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <ControlMotor+0x5c>
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <ControlMotor+0x88>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <ControlMotor+0x5c>
					{
						GiroAntiHorario();
 8001eba:	f000 fa2f 	bl	800231c <GiroAntiHorario>
 8001ebe:	e00d      	b.n	8001edc <ControlMotor+0x78>
					}
					else // Si estoy en modo manual but no presiono los pulsadores
					{

						halt = true;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <ControlMotor+0x8c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e7d1      	b.n	8001e6c <ControlMotor+0x8>
					}
			} //End if modo manual
			else
			{
				if(menuState == ModoAut)	//if modo automatico)
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <ControlMotor+0x80>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1cd      	bne.n	8001e6c <ControlMotor+0x8>
				{
					CicloAutomatico();
 8001ed0:	f000 f8a2 	bl	8002018 <CicloAutomatico>
 8001ed4:	e7ca      	b.n	8001e6c <ControlMotor+0x8>
			}

		}
		else   //if not start
		{
			halt = true;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <ControlMotor+0x8c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
		OSTimeDlyHMSM(0u, 0u, 0u, 40);
 8001edc:	e7c6      	b.n	8001e6c <ControlMotor+0x8>
 8001ede:	bf00      	nop
 8001ee0:	20000201 	.word	0x20000201
 8001ee4:	20001088 	.word	0x20001088
 8001ee8:	20000202 	.word	0x20000202
 8001eec:	20000203 	.word	0x20000203
 8001ef0:	20000001 	.word	0x20000001

08001ef4 <Detener>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Detener (void *p_arg)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	while(DEF_TRUE)
		{
			if(halt)
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <Detener+0x34>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <Detener+0x2a>
			{
				HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET); 		//INHABILITO DRIVER
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f0a:	4808      	ldr	r0, [pc, #32]	; (8001f2c <Detener+0x38>)
 8001f0c:	f001 f883 	bl	8003016 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001f10:	2100      	movs	r1, #0
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <Detener+0x3c>)
 8001f14:	f001 fdec 	bl	8003af0 <HAL_TIM_PWM_Stop>
				halt = false;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <Detener+0x34>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
			}
				OSTimeDly(1);							//Tiene alta prioridad y bajo delay
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f004 facc 	bl	80064bc <OSTimeDly>
			if(halt)
 8001f24:	e7ea      	b.n	8001efc <Detener+0x8>
 8001f26:	bf00      	nop
 8001f28:	20000001 	.word	0x20000001
 8001f2c:	40010c00 	.word	0x40010c00
 8001f30:	20001040 	.word	0x20001040

08001f34 <FinalesDeCarrera>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void FinalesDeCarrera (void *p_arg)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

	while(DEF_TRUE)
		{
			if(HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))
 8001f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f40:	480f      	ldr	r0, [pc, #60]	; (8001f80 <FinalesDeCarrera+0x4c>)
 8001f42:	f001 f851 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <FinalesDeCarrera+0x26>
			{
				halt=true;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <FinalesDeCarrera+0x50>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
				OSTaskSuspend(APP_CFG_TASK5_PRIO); //Se autosuspende
 8001f52:	200b      	movs	r0, #11
 8001f54:	f004 f9fe 	bl	8006354 <OSTaskSuspend>
 8001f58:	e00d      	b.n	8001f76 <FinalesDeCarrera+0x42>
			}
			else
			{
				if(HAL_GPIO_ReadPin(GPIOB, Fc_Sup_Pin))
 8001f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f5e:	4808      	ldr	r0, [pc, #32]	; (8001f80 <FinalesDeCarrera+0x4c>)
 8001f60:	f001 f842 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <FinalesDeCarrera+0x42>
						{
							halt=true;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <FinalesDeCarrera+0x50>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
							OSTaskSuspend(APP_CFG_TASK5_PRIO); //Se autosuspende
 8001f70:	200b      	movs	r0, #11
 8001f72:	f004 f9ef 	bl	8006354 <OSTaskSuspend>
						}
			}
			OSTimeDly(2);
 8001f76:	2002      	movs	r0, #2
 8001f78:	f004 faa0 	bl	80064bc <OSTimeDly>
			if(HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))
 8001f7c:	e7de      	b.n	8001f3c <FinalesDeCarrera+0x8>
 8001f7e:	bf00      	nop
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	20000001 	.word	0x20000001

08001f88 <Piezas>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Piezas (void *p_arg)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	bool mismaPieza = false; // Para leer solo flanco ascendente
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]

	while(DEF_TRUE)
		{
		OSTimeDly(50);
 8001f94:	2032      	movs	r0, #50	; 0x32
 8001f96:	f004 fa91 	bl	80064bc <OSTimeDly>
		if(!mismaPieza && HAL_GPIO_ReadPin(GPIOB, Sensor_rejillas_Pin) && !rejillasReady)
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	f083 0301 	eor.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d016      	beq.n	8001fd4 <Piezas+0x4c>
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4817      	ldr	r0, [pc, #92]	; (8002008 <Piezas+0x80>)
 8001faa:	f001 f81d 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00f      	beq.n	8001fd4 <Piezas+0x4c>
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <Piezas+0x84>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <Piezas+0x4c>
		{
			rejillasActuales ++;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <Piezas+0x88>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <Piezas+0x88>)
 8001fcc:	701a      	strb	r2, [r3, #0]
			mismaPieza = true;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e00b      	b.n	8001fec <Piezas+0x64>
		}
		else
		{
			if (mismaPieza && ! HAL_GPIO_ReadPin(GPIOB, Sensor_rejillas_Pin))
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <Piezas+0x64>
 8001fda:	2102      	movs	r1, #2
 8001fdc:	480a      	ldr	r0, [pc, #40]	; (8002008 <Piezas+0x80>)
 8001fde:	f001 f803 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <Piezas+0x64>
			{
				mismaPieza = false; //Flanco descendente
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
			}
		}

		if (rejillasActuales >= nRejillas)
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <Piezas+0x88>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <Piezas+0x8c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3cd      	bcc.n	8001f94 <Piezas+0xc>
		{
			rejillasReady = true;
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <Piezas+0x84>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
			rejillasActuales =0;
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <Piezas+0x88>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
		OSTimeDly(50);
 8002004:	e7c6      	b.n	8001f94 <Piezas+0xc>
 8002006:	bf00      	nop
 8002008:	40010c00 	.word	0x40010c00
 800200c:	20000206 	.word	0x20000206
 8002010:	20000207 	.word	0x20000207
 8002014:	20000002 	.word	0x20000002

08002018 <CicloAutomatico>:
 *  un error
 *
 ****************************************************************************************/

void CicloAutomatico()
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
	/****************** CALCULOS ********************
	*Según la distancia que se desea recorrer, se necesitan x cantidad de pulsos enviados
	*Se envia 2 khz para velocidad max y 1 khz para velocidad min
	*
	**/
	const float delay_ms = ((distancia_mm / desplazamientoXrev ) * pulsosXrev ) / 2000; // Calculo delay
 800201e:	4ba4      	ldr	r3, [pc, #656]	; (80022b0 <CicloAutomatico+0x298>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe faae 	bl	8000584 <__aeabi_i2d>
 8002028:	a39f      	add	r3, pc, #636	; (adr r3, 80022a8 <CicloAutomatico+0x290>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fc3d 	bl	80008ac <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b9d      	ldr	r3, [pc, #628]	; (80022b4 <CicloAutomatico+0x29c>)
 8002040:	f7fe fb0a 	bl	8000658 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b99      	ldr	r3, [pc, #612]	; (80022b8 <CicloAutomatico+0x2a0>)
 8002052:	f7fe fc2b 	bl	80008ac <__aeabi_ddiv>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fdd3 	bl	8000c08 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	60fb      	str	r3, [r7, #12]
	const float tiempo2khz = delay_ms / 2;
 8002066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7fe ffde 	bl	800102c <__aeabi_fdiv>
 8002070:	4603      	mov	r3, r0
 8002072:	60bb      	str	r3, [r7, #8]
	const float tiempo1khz = (delay_ms / 4) * 2;
 8002074:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7fe ffd7 	bl	800102c <__aeabi_fdiv>
 800207e:	4603      	mov	r3, r0
 8002080:	4619      	mov	r1, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe16 	bl	8000cb4 <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	607b      	str	r3, [r7, #4]
	/****************** CALCULOS ********************/
	/****************** Reset Errores ********************/
	if (HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin) && (errorTimeoutInf || errorTimeoutSup)) //Reset errores FC
 800208c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002090:	488a      	ldr	r0, [pc, #552]	; (80022bc <CicloAutomatico+0x2a4>)
 8002092:	f000 ffa9 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <CicloAutomatico+0xa6>
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <CicloAutomatico+0x2a8>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <CicloAutomatico+0x94>
 80020a4:	4b87      	ldr	r3, [pc, #540]	; (80022c4 <CicloAutomatico+0x2ac>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <CicloAutomatico+0xa6>
	{
		errorTimeoutInf = false;
 80020ac:	4b84      	ldr	r3, [pc, #528]	; (80022c0 <CicloAutomatico+0x2a8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
		errorTimeoutSup = false;
 80020b2:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <CicloAutomatico+0x2ac>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
		OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 80020b8:	200e      	movs	r0, #14
 80020ba:	f004 f861 	bl	8006180 <OSTaskResume>

	}
	/****************** Reset Errores ********************/

	/********************** CICLO DE SUBIDA ***********************************/
	if(start && HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))//if start y Fc inferior
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <CicloAutomatico+0x2b0>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d077      	beq.n	80021b6 <CicloAutomatico+0x19e>
 80020c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ca:	487c      	ldr	r0, [pc, #496]	; (80022bc <CicloAutomatico+0x2a4>)
 80020cc:	f000 ff8c 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d06f      	beq.n	80021b6 <CicloAutomatico+0x19e>
	{

		htim4.Instance->PSC = 1;					//Preescaler motor = 1.El motor recibe 1khz
 80020d6:	4b7d      	ldr	r3, [pc, #500]	; (80022cc <CicloAutomatico+0x2b4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
		GiroHorario();
 80020de:	f000 f8f9 	bl	80022d4 <GiroHorario>
		OSTimeDly((uint32_t)tiempo1khz);			//Recorre 1/4 tramo a baja velocidad
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f83e 	bl	8001164 <__aeabi_f2uiz>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f9e6 	bl	80064bc <OSTimeDly>
		OSTaskResume(APP_CFG_TASK5_PRIO); 			//Resume la tarea Finales de Carrera
 80020f0:	200b      	movs	r0, #11
 80020f2:	f004 f845 	bl	8006180 <OSTaskResume>
		if (!start) return;							//Si se interrumpe la marcha
 80020f6:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <CicloAutomatico+0x2b0>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 80bc 	bne.w	800227e <CicloAutomatico+0x266>
		htim4.Instance->PSC = 0;					//Preescaler motor = 0.El motor recibe 2khz
 8002106:	4b71      	ldr	r3, [pc, #452]	; (80022cc <CicloAutomatico+0x2b4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
		OSTimeDly((uint32_t)tiempo2khz);			//Recorre 2/4 tramo a alta velocidad
 800210e:	68b8      	ldr	r0, [r7, #8]
 8002110:	f7ff f828 	bl	8001164 <__aeabi_f2uiz>
 8002114:	4603      	mov	r3, r0
 8002116:	4618      	mov	r0, r3
 8002118:	f004 f9d0 	bl	80064bc <OSTimeDly>
		if (!start) return;
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <CicloAutomatico+0x2b0>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80ab 	bne.w	8002282 <CicloAutomatico+0x26a>
		htim4.Instance->PSC = 1;
 800212c:	4b67      	ldr	r3, [pc, #412]	; (80022cc <CicloAutomatico+0x2b4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
		OSTimeDly((uint32_t)tiempo1khz);			//Recorre 1/4 tramo a baja velocidad
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff f815 	bl	8001164 <__aeabi_f2uiz>
 800213a:	4603      	mov	r3, r0
 800213c:	4618      	mov	r0, r3
 800213e:	f004 f9bd 	bl	80064bc <OSTimeDly>
		if (!start) return;
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <CicloAutomatico+0x2b0>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 809a 	bne.w	8002286 <CicloAutomatico+0x26e>


		OSTimeDly(timeout_Fc_Sup);					//Timeout FC superior
 8002152:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002156:	f004 f9b1 	bl	80064bc <OSTimeDly>
		halt = true;
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <CicloAutomatico+0x2b8>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(GPIOB, Fc_Sup_Pin))   //Si no se alcanzó el final de carrera sup
 8002160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002164:	4855      	ldr	r0, [pc, #340]	; (80022bc <CicloAutomatico+0x2a4>)
 8002166:	f000 ff3f 	bl	8002fe8 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <CicloAutomatico+0x16a>
		{
			errorTimeoutSup = true;
 8002170:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <CicloAutomatico+0x2ac>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
			start = false;
 8002176:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <CicloAutomatico+0x2b0>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
			OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 800217c:	200e      	movs	r0, #14
 800217e:	f003 ffff 	bl	8006180 <OSTaskResume>

		}
		if (!start || errorTimeoutSup ) return;
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <CicloAutomatico+0x2b0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d17c      	bne.n	800228a <CicloAutomatico+0x272>
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <CicloAutomatico+0x2ac>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d178      	bne.n	800228a <CicloAutomatico+0x272>
		OSTimeDly(tiempoDescarga);
 8002198:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800219c:	f004 f98e 	bl	80064bc <OSTimeDly>
		if (!start || errorTimeoutSup) return;
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <CicloAutomatico+0x2b0>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d16f      	bne.n	800228e <CicloAutomatico+0x276>
 80021ae:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <CicloAutomatico+0x2ac>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d16b      	bne.n	800228e <CicloAutomatico+0x276>
	}
	/********************** CICLO DE SUBIDA ***********************************/

	/********************** CICLO DE BAJADA ***********************************/
	if(start && HAL_GPIO_ReadPin(GPIOB, Fc_Sup_Pin))//if start y Fc superior
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <CicloAutomatico+0x2b0>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06e      	beq.n	800229c <CicloAutomatico+0x284>
 80021be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c2:	483e      	ldr	r0, [pc, #248]	; (80022bc <CicloAutomatico+0x2a4>)
 80021c4:	f000 ff10 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d066      	beq.n	800229c <CicloAutomatico+0x284>
	{
		htim4.Instance->PSC = 1;					//Preescaler motor = 1.El motor recibe 1khz
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <CicloAutomatico+0x2b4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
		GiroAntiHorario();
 80021d6:	f000 f8a1 	bl	800231c <GiroAntiHorario>
		OSTimeDly((uint32_t)tiempo1khz);			//Recorre 1/4 tramo a baja velocidad
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe ffc2 	bl	8001164 <__aeabi_f2uiz>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 f96a 	bl	80064bc <OSTimeDly>
		OSTaskResume(APP_CFG_TASK5_PRIO); 			//Resume la tarea Finales de Carrera
 80021e8:	200b      	movs	r0, #11
 80021ea:	f003 ffc9 	bl	8006180 <OSTaskResume>
		if (!start) return;							//Si se interrumpe la marcha
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <CicloAutomatico+0x2b0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d14a      	bne.n	8002292 <CicloAutomatico+0x27a>
		htim4.Instance->PSC = 0;					//Preescaler motor = 0.El motor recibe 2khz
 80021fc:	4b33      	ldr	r3, [pc, #204]	; (80022cc <CicloAutomatico+0x2b4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
		OSTimeDly((uint32_t)tiempo2khz);			//Recorre 2/4 tramo a alta velocidad
 8002204:	68b8      	ldr	r0, [r7, #8]
 8002206:	f7fe ffad 	bl	8001164 <__aeabi_f2uiz>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f004 f955 	bl	80064bc <OSTimeDly>
		if (!start) return;
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <CicloAutomatico+0x2b0>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d13a      	bne.n	8002296 <CicloAutomatico+0x27e>
		htim4.Instance->PSC = 1;
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <CicloAutomatico+0x2b4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2201      	movs	r2, #1
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
		OSTimeDly((uint32_t)tiempo1khz);			//Recorre 1/4 tramo a baja velocidad
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe ff9b 	bl	8001164 <__aeabi_f2uiz>
 800222e:	4603      	mov	r3, r0
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f943 	bl	80064bc <OSTimeDly>
		if (!start) return;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <CicloAutomatico+0x2b0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d12a      	bne.n	800229a <CicloAutomatico+0x282>

		OSTimeDly(timeout_Fc_Inf);					//Timeout FC inferior
 8002244:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002248:	f004 f938 	bl	80064bc <OSTimeDly>
		halt = true;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <CicloAutomatico+0x2b8>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))   //Si no se alcanzó el final de carrera inf
 8002252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002256:	4819      	ldr	r0, [pc, #100]	; (80022bc <CicloAutomatico+0x2a4>)
 8002258:	f000 fec6 	bl	8002fe8 <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <CicloAutomatico+0x25c>
		{
			errorTimeoutInf = true;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <CicloAutomatico+0x2a8>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
			start = false;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <CicloAutomatico+0x2b0>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
			OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 800226e:	200e      	movs	r0, #14
 8002270:	f003 ff86 	bl	8006180 <OSTaskResume>
		}
		OSTimeDly(tiempoDescarga);					//Delay tiempo descarga
 8002274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002278:	f004 f920 	bl	80064bc <OSTimeDly>
 800227c:	e00e      	b.n	800229c <CicloAutomatico+0x284>
		if (!start) return;							//Si se interrumpe la marcha
 800227e:	bf00      	nop
 8002280:	e00c      	b.n	800229c <CicloAutomatico+0x284>
		if (!start) return;
 8002282:	bf00      	nop
 8002284:	e00a      	b.n	800229c <CicloAutomatico+0x284>
		if (!start) return;
 8002286:	bf00      	nop
 8002288:	e008      	b.n	800229c <CicloAutomatico+0x284>
		if (!start || errorTimeoutSup ) return;
 800228a:	bf00      	nop
 800228c:	e006      	b.n	800229c <CicloAutomatico+0x284>
		if (!start || errorTimeoutSup) return;
 800228e:	bf00      	nop
 8002290:	e004      	b.n	800229c <CicloAutomatico+0x284>
		if (!start) return;							//Si se interrumpe la marcha
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <CicloAutomatico+0x284>
		if (!start) return;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <CicloAutomatico+0x284>
		if (!start) return;
 800229a:	bf00      	nop
	}
	/********************** CICLO DE BAJADA ***********************************/

}
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	f3af 8000 	nop.w
 80022a8:	9999999a 	.word	0x9999999a
 80022ac:	3fb99999 	.word	0x3fb99999
 80022b0:	20000004 	.word	0x20000004
 80022b4:	40790000 	.word	0x40790000
 80022b8:	409f4000 	.word	0x409f4000
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	20000205 	.word	0x20000205
 80022c4:	20000204 	.word	0x20000204
 80022c8:	20000201 	.word	0x20000201
 80022cc:	20001040 	.word	0x20001040
 80022d0:	20000001 	.word	0x20000001

080022d4 <GiroHorario>:

void GiroHorario()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_RESET); 		//HABILITO DRIVER
 80022d8:	2200      	movs	r2, #0
 80022da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <GiroHorario+0x40>)
 80022e0:	f000 fe99 	bl	8003016 <HAL_GPIO_WritePin>
	OSTimeDlyHMSM(0, 0, 0, 1u);
 80022e4:	2301      	movs	r3, #1
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	f004 f93a 	bl	8006564 <OSTimeDlyHMSM>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET); 		//GIRO PA UN LADO
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <GiroHorario+0x40>)
 80022f8:	f000 fe8d 	bl	8003016 <HAL_GPIO_WritePin>

	OSTimeDlyHMSM(0, 0, 0, 1u);
 80022fc:	2301      	movs	r3, #1
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2000      	movs	r0, #0
 8002304:	f004 f92e 	bl	8006564 <OSTimeDlyHMSM>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002308:	2100      	movs	r1, #0
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <GiroHorario+0x44>)
 800230c:	f001 fb4e 	bl	80039ac <HAL_TIM_PWM_Start>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40010c00 	.word	0x40010c00
 8002318:	20001040 	.word	0x20001040

0800231c <GiroAntiHorario>:

void GiroAntiHorario()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_RESET); 		//HABILITO DRIVER
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002326:	480d      	ldr	r0, [pc, #52]	; (800235c <GiroAntiHorario+0x40>)
 8002328:	f000 fe75 	bl	8003016 <HAL_GPIO_WritePin>
	OSTimeDlyHMSM(0, 0, 0, 1u);
 800232c:	2301      	movs	r3, #1
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2000      	movs	r0, #0
 8002334:	f004 f916 	bl	8006564 <OSTimeDlyHMSM>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET); 		//GIRO PA OTRO LADO
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <GiroAntiHorario+0x40>)
 8002340:	f000 fe69 	bl	8003016 <HAL_GPIO_WritePin>
	OSTimeDlyHMSM(0, 0, 0, 1u);
 8002344:	2301      	movs	r3, #1
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f004 f90a 	bl	8006564 <OSTimeDlyHMSM>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002350:	2100      	movs	r1, #0
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <GiroAntiHorario+0x44>)
 8002354:	f001 fb2a 	bl	80039ac <HAL_TIM_PWM_Start>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010c00 	.word	0x40010c00
 8002360:	20001040 	.word	0x20001040

08002364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236a:	f000 fc73 	bl	8002c54 <HAL_Init>

  /* USER CODE BEGIN Init */
  CPU_IntDis();
 800236e:	f7fd feef 	bl	8000150 <CPU_IntDis>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 8002372:	2310      	movs	r3, #16
 8002374:	80fb      	strh	r3, [r7, #6]
 8002376:	e009      	b.n	800238c <main+0x28>
  {
  /* Set all external intr. to KA interrupt priority boundary */
  CPU_IntSrcPrioSet(int_id, CPU_CFG_KA_IPL_BOUNDARY, CPU_INT_KA);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2200      	movs	r2, #0
 800237e:	2104      	movs	r1, #4
 8002380:	4618      	mov	r0, r3
 8002382:	f002 f89d 	bl	80044c0 <CPU_IntSrcPrioSet>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	3301      	adds	r3, #1
 800238a:	80fb      	strh	r3, [r7, #6]
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d9f2      	bls.n	8002378 <main+0x14>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002392:	f000 f827 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002396:	f000 f8e3 	bl	8002560 <MX_GPIO_Init>
  MX_TIM4_Init();
 800239a:	f000 f869 	bl	8002470 <MX_TIM4_Init>

  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);



  OSInit();
 800239e:	f002 fc69 	bl	8004c74 <OSInit>
  OSTaskCreateExt( StartupTask,
 80023a2:	2303      	movs	r3, #3
 80023a4:	9304      	str	r3, [sp, #16]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9303      	str	r3, [sp, #12]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <main+0x70>)
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2303      	movs	r3, #3
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2303      	movs	r3, #3
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <main+0x74>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <main+0x78>)
 80023be:	f003 fd21 	bl	8005e04 <OSTaskCreateExt>
				   &StartupTaskStk[0],
				   APP_CFG_STARTUP_TASK_STK_SIZE,
				   0,
				   (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
  #if (OS_TASK_NAME_EN > 0u)
   OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 80023c2:	1d7b      	adds	r3, r7, #5
 80023c4:	461a      	mov	r2, r3
 80023c6:	4906      	ldr	r1, [pc, #24]	; (80023e0 <main+0x7c>)
 80023c8:	2003      	movs	r0, #3
 80023ca:	f003 fe7f 	bl	80060cc <OSTaskNameSet>
    	  	      (INT8U *)"Startup task",
				  &os_err);
  #endif

  OSStart();
 80023ce:	f002 fd3b 	bl	8004e48 <OSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <main+0x6e>
 80023d4:	20000208 	.word	0x20000208
 80023d8:	20000404 	.word	0x20000404
 80023dc:	080026bd 	.word	0x080026bd
 80023e0:	080099c0 	.word	0x080099c0

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b090      	sub	sp, #64	; 0x40
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	f107 0318 	add.w	r3, r7, #24
 80023ee:	2228      	movs	r2, #40	; 0x28
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fbf6 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002414:	2301      	movs	r3, #1
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002418:	2302      	movs	r3, #2
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002422:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fe23 	bl	8003078 <HAL_RCC_OscConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002438:	f000 fa56 	bl	80028e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243c:	230f      	movs	r3, #15
 800243e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f88e 	bl	8003578 <HAL_RCC_ClockConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002462:	f000 fa41 	bl	80028e8 <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3740      	adds	r7, #64	; 0x40
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08e      	sub	sp, #56	; 0x38
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002484:	f107 0320 	add.w	r3, r7, #32
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024a2:	4a2e      	ldr	r2, [pc, #184]	; (800255c <MX_TIM4_Init+0xec>)
 80024a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 36000;
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024b4:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80024b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024c6:	4824      	ldr	r0, [pc, #144]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024c8:	f001 f9c8 	bl	800385c <HAL_TIM_Base_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80024d2:	f000 fa09 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e0:	4619      	mov	r1, r3
 80024e2:	481d      	ldr	r0, [pc, #116]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024e4:	f001 fc26 	bl	8003d34 <HAL_TIM_ConfigClockSource>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80024ee:	f000 f9fb 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024f2:	4819      	ldr	r0, [pc, #100]	; (8002558 <MX_TIM4_Init+0xe8>)
 80024f4:	f001 fa01 	bl	80038fa <HAL_TIM_PWM_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80024fe:	f000 f9f3 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800250a:	f107 0320 	add.w	r3, r7, #32
 800250e:	4619      	mov	r1, r3
 8002510:	4811      	ldr	r0, [pc, #68]	; (8002558 <MX_TIM4_Init+0xe8>)
 8002512:	f001 ff77 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800251c:	f000 f9e4 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002520:	2360      	movs	r3, #96	; 0x60
 8002522:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18000;
 8002524:	f244 6350 	movw	r3, #18000	; 0x4650
 8002528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	4619      	mov	r1, r3
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <MX_TIM4_Init+0xe8>)
 800253a:	f001 fb3d 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002544:	f000 f9d0 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002548:	4803      	ldr	r0, [pc, #12]	; (8002558 <MX_TIM4_Init+0xe8>)
 800254a:	f000 fa23 	bl	8002994 <HAL_TIM_MspPostInit>

}
 800254e:	bf00      	nop
 8002550:	3738      	adds	r7, #56	; 0x38
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20001040 	.word	0x20001040
 800255c:	40000800 	.word	0x40000800

08002560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002574:	4b42      	ldr	r3, [pc, #264]	; (8002680 <MX_GPIO_Init+0x120>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a41      	ldr	r2, [pc, #260]	; (8002680 <MX_GPIO_Init+0x120>)
 800257a:	f043 0310 	orr.w	r3, r3, #16
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <MX_GPIO_Init+0x120>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800258c:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <MX_GPIO_Init+0x120>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <MX_GPIO_Init+0x120>)
 8002592:	f043 0320 	orr.w	r3, r3, #32
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <MX_GPIO_Init+0x120>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <MX_GPIO_Init+0x120>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a35      	ldr	r2, [pc, #212]	; (8002680 <MX_GPIO_Init+0x120>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <MX_GPIO_Init+0x120>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <MX_GPIO_Init+0x120>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <MX_GPIO_Init+0x120>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <MX_GPIO_Init+0x120>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80025d4:	2201      	movs	r2, #1
 80025d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025da:	482a      	ldr	r0, [pc, #168]	; (8002684 <MX_GPIO_Init+0x124>)
 80025dc:	f000 fd1b 	bl	8003016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025e6:	4827      	ldr	r0, [pc, #156]	; (8002684 <MX_GPIO_Init+0x124>)
 80025e8:	f000 fd15 	bl	8003016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80025f2:	4825      	ldr	r0, [pc, #148]	; (8002688 <MX_GPIO_Init+0x128>)
 80025f4:	f000 fd0f 	bl	8003016 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUL_Pin|DIR_Pin|ENA_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80025fe:	4823      	ldr	r0, [pc, #140]	; (800268c <MX_GPIO_Init+0x12c>)
 8002600:	f000 fd09 	bl	8003016 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8002604:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2302      	movs	r3, #2
 8002614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	4619      	mov	r1, r3
 800261c:	4819      	ldr	r0, [pc, #100]	; (8002684 <MX_GPIO_Init+0x124>)
 800261e:	f000 fb5f 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8002622:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8002626:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2302      	movs	r3, #2
 8002632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	4619      	mov	r1, r3
 800263a:	4813      	ldr	r0, [pc, #76]	; (8002688 <MX_GPIO_Init+0x128>)
 800263c:	f000 fb50 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_rejillas_Pin Fc_Inf_Pin Fc_Sup_Pin PULSADOR1_Pin
                           PULSADOR2_Pin PULSADOR3_Pin PULSADOR4_Pin */
  GPIO_InitStruct.Pin = Sensor_rejillas_Pin|Fc_Inf_Pin|Fc_Sup_Pin|PULSADOR1_Pin
 8002640:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8002644:	613b      	str	r3, [r7, #16]
                          |PULSADOR2_Pin|PULSADOR3_Pin|PULSADOR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	f107 0310 	add.w	r3, r7, #16
 8002652:	4619      	mov	r1, r3
 8002654:	480d      	ldr	r0, [pc, #52]	; (800268c <MX_GPIO_Init+0x12c>)
 8002656:	f000 fb43 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUL_Pin DIR_Pin ENA_Pin */
  GPIO_InitStruct.Pin = PUL_Pin|DIR_Pin|ENA_Pin;
 800265a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800265e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002660:	2301      	movs	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2302      	movs	r3, #2
 800266a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4619      	mov	r1, r3
 8002672:	4806      	ldr	r0, [pc, #24]	; (800268c <MX_GPIO_Init+0x12c>)
 8002674:	f000 fb34 	bl	8002ce0 <HAL_GPIO_Init>

}
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40011000 	.word	0x40011000
 8002688:	40010800 	.word	0x40010800
 800268c:	40010c00 	.word	0x40010c00

08002690 <HAL_InitTick>:
*************************************************************************
* STM32Cube HAL FUNCTIONS
*************************************************************************
*/
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
/* define as empty to prevent the system tick being initialized before
    the OS starts */
 return (HAL_OK);
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0

 #if (OS_VERSION >= 30000u)
  OS_ERR os_err;
  os_tick_ctr = OSTimeGet(&os_err);
 #else
  os_tick_ctr = OSTimeGet();
 80026aa:	f004 f83d 	bl	8006728 <OSTimeGet>
 80026ae:	6078      	str	r0, [r7, #4]
 #endif

 return os_tick_ctr;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <StartupTask>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void StartupTask (void *p_arg)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 CPU_INT32U cpu_clk;
 (void)p_arg;
 cpu_clk = HAL_RCC_GetHCLKFreq();
 80026c4:	f001 f8a2 	bl	800380c <HAL_RCC_GetHCLKFreq>
 80026c8:	60f8      	str	r0, [r7, #12]
 /* Initialize and enable System Tick timer */
 OS_CPU_SysTickInitFreq(cpu_clk);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f002 fa54 	bl	8004b78 <OS_CPU_SysTickInitFreq>

 #if (OS_TASK_STAT_EN > 0)
  OSStatInit();                                               /* Determine CPU capacity.                              */
 80026d0:	f002 fbe2 	bl	8004e98 <OSStatInit>
 #endif

// App_EventCreate();                                          /* Create application events.                           */
// App_TaskCreate();
  App_TaskCreate();			/* Create application tasks.               */
 80026d4:	f000 f818 	bl	8002708 <App_TaskCreate>
  App_Task2Create();		/* Create application tasks.  			   */
 80026d8:	f000 f83e 	bl	8002758 <App_Task2Create>
  App_Task3Create();		/* Create application tasks.  			   */
 80026dc:	f000 f864 	bl	80027a8 <App_Task3Create>
  App_Task4Create();
 80026e0:	f000 f88a 	bl	80027f8 <App_Task4Create>
  App_Task5Create();
 80026e4:	f000 f8b0 	bl	8002848 <App_Task5Create>
  App_Task6Create();
 80026e8:	f000 f8d6 	bl	8002898 <App_Task6Create>

 while (DEF_TRUE){
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80026ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <StartupTask+0x48>)
 80026f2:	f000 fca8 	bl	8003046 <HAL_GPIO_TogglePin>
   //UsbPrintf("uCOS-II Running...\n");
   OSTimeDlyHMSM(0u, 0u, 1u, 0u);
 80026f6:	2300      	movs	r3, #0
 80026f8:	2201      	movs	r2, #1
 80026fa:	2100      	movs	r1, #0
 80026fc:	2000      	movs	r0, #0
 80026fe:	f003 ff31 	bl	8006564 <OSTimeDlyHMSM>
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002702:	e7f3      	b.n	80026ec <StartupTask+0x30>
 8002704:	40011000 	.word	0x40011000

08002708 <App_TaskCreate>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void App_TaskCreate (void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) LecturaPulsadores,
 800270e:	2303      	movs	r3, #3
 8002710:	9304      	str	r3, [sp, #16]
 8002712:	2300      	movs	r3, #0
 8002714:	9303      	str	r3, [sp, #12]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <App_TaskCreate+0x40>)
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	230a      	movs	r3, #10
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	230a      	movs	r3, #10
 8002724:	4a09      	ldr	r2, [pc, #36]	; (800274c <App_TaskCreate+0x44>)
 8002726:	2100      	movs	r1, #0
 8002728:	4809      	ldr	r0, [pc, #36]	; (8002750 <App_TaskCreate+0x48>)
 800272a:	f003 fb6b 	bl	8005e04 <OSTaskCreateExt>
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task1Stk[0],
							 (INT32U		  ) APP_CFG_TASK1_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK1_PRIO, (unsigned char *)"Pulsadores", &os_err);
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	461a      	mov	r2, r3
 8002736:	4907      	ldr	r1, [pc, #28]	; (8002754 <App_TaskCreate+0x4c>)
 8002738:	200a      	movs	r0, #10
 800273a:	f003 fcc7 	bl	80060cc <OSTaskNameSet>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000408 	.word	0x20000408
 800274c:	20000604 	.word	0x20000604
 8002750:	08001975 	.word	0x08001975
 8002754:	080099d0 	.word	0x080099d0

08002758 <App_Task2Create>:

static void App_Task2Create (void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) ActualizarDisplay,
 800275e:	2303      	movs	r3, #3
 8002760:	9304      	str	r3, [sp, #16]
 8002762:	2300      	movs	r3, #0
 8002764:	9303      	str	r3, [sp, #12]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	9302      	str	r3, [sp, #8]
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <App_Task2Create+0x40>)
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	230e      	movs	r3, #14
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	230e      	movs	r3, #14
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <App_Task2Create+0x44>)
 8002776:	2100      	movs	r1, #0
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <App_Task2Create+0x48>)
 800277a:	f003 fb43 	bl	8005e04 <OSTaskCreateExt>
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task2Stk[0],
							 (INT32U		  ) APP_CFG_TASK2_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK2_PRIO, (unsigned char *)"Display", &os_err);
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	461a      	mov	r2, r3
 8002786:	4907      	ldr	r1, [pc, #28]	; (80027a4 <App_Task2Create+0x4c>)
 8002788:	200e      	movs	r0, #14
 800278a:	f003 fc9f 	bl	80060cc <OSTaskNameSet>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000608 	.word	0x20000608
 800279c:	20000804 	.word	0x20000804
 80027a0:	08001c8d 	.word	0x08001c8d
 80027a4:	080099dc 	.word	0x080099dc

080027a8 <App_Task3Create>:

static void App_Task3Create (void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) ControlMotor,
 80027ae:	2303      	movs	r3, #3
 80027b0:	9304      	str	r3, [sp, #16]
 80027b2:	2300      	movs	r3, #0
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <App_Task3Create+0x40>)
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	230d      	movs	r3, #13
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	230d      	movs	r3, #13
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <App_Task3Create+0x44>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <App_Task3Create+0x48>)
 80027ca:	f003 fb1b 	bl	8005e04 <OSTaskCreateExt>
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task3Stk[0],
							 (INT32U		  ) APP_CFG_TASK3_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK3_PRIO, (unsigned char *)"Control Motor", &os_err);
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	461a      	mov	r2, r3
 80027d6:	4907      	ldr	r1, [pc, #28]	; (80027f4 <App_Task3Create+0x4c>)
 80027d8:	200d      	movs	r0, #13
 80027da:	f003 fc77 	bl	80060cc <OSTaskNameSet>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000808 	.word	0x20000808
 80027ec:	20000a04 	.word	0x20000a04
 80027f0:	08001e65 	.word	0x08001e65
 80027f4:	080099e4 	.word	0x080099e4

080027f8 <App_Task4Create>:

static void App_Task4Create (void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) Detener,
 80027fe:	2303      	movs	r3, #3
 8002800:	9304      	str	r3, [sp, #16]
 8002802:	2300      	movs	r3, #0
 8002804:	9303      	str	r3, [sp, #12]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <App_Task4Create+0x40>)
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	2309      	movs	r3, #9
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2309      	movs	r3, #9
 8002814:	4a09      	ldr	r2, [pc, #36]	; (800283c <App_Task4Create+0x44>)
 8002816:	2100      	movs	r1, #0
 8002818:	4809      	ldr	r0, [pc, #36]	; (8002840 <App_Task4Create+0x48>)
 800281a:	f003 faf3 	bl	8005e04 <OSTaskCreateExt>
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task4Stk[0],
							 (INT32U		  ) APP_CFG_TASK4_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK4_PRIO, (unsigned char *)"Detener", &os_err);
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	461a      	mov	r2, r3
 8002826:	4907      	ldr	r1, [pc, #28]	; (8002844 <App_Task4Create+0x4c>)
 8002828:	2009      	movs	r0, #9
 800282a:	f003 fc4f 	bl	80060cc <OSTaskNameSet>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000a08 	.word	0x20000a08
 800283c:	20000c04 	.word	0x20000c04
 8002840:	08001ef5 	.word	0x08001ef5
 8002844:	080099f4 	.word	0x080099f4

08002848 <App_Task5Create>:

static void App_Task5Create (void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) FinalesDeCarrera,
 800284e:	2303      	movs	r3, #3
 8002850:	9304      	str	r3, [sp, #16]
 8002852:	2300      	movs	r3, #0
 8002854:	9303      	str	r3, [sp, #12]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <App_Task5Create+0x40>)
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	230b      	movs	r3, #11
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	230b      	movs	r3, #11
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <App_Task5Create+0x44>)
 8002866:	2100      	movs	r1, #0
 8002868:	4809      	ldr	r0, [pc, #36]	; (8002890 <App_Task5Create+0x48>)
 800286a:	f003 facb 	bl	8005e04 <OSTaskCreateExt>
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task5Stk[0],
							 (INT32U		  ) APP_CFG_TASK5_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK5_PRIO, (unsigned char *)"FC", &os_err);
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	461a      	mov	r2, r3
 8002876:	4907      	ldr	r1, [pc, #28]	; (8002894 <App_Task5Create+0x4c>)
 8002878:	200b      	movs	r0, #11
 800287a:	f003 fc27 	bl	80060cc <OSTaskNameSet>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000c08 	.word	0x20000c08
 800288c:	20000e04 	.word	0x20000e04
 8002890:	08001f35 	.word	0x08001f35
 8002894:	080099fc 	.word	0x080099fc

08002898 <App_Task6Create>:

static void App_Task6Create (void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) Piezas,
 800289e:	2303      	movs	r3, #3
 80028a0:	9304      	str	r3, [sp, #16]
 80028a2:	2300      	movs	r3, #0
 80028a4:	9303      	str	r3, [sp, #12]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	9302      	str	r3, [sp, #8]
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <App_Task6Create+0x40>)
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	230c      	movs	r3, #12
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	230c      	movs	r3, #12
 80028b4:	4a09      	ldr	r2, [pc, #36]	; (80028dc <App_Task6Create+0x44>)
 80028b6:	2100      	movs	r1, #0
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <App_Task6Create+0x48>)
 80028ba:	f003 faa3 	bl	8005e04 <OSTaskCreateExt>
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task6Stk[0],
							 (INT32U		  ) APP_CFG_TASK6_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK6_PRIO, (unsigned char *)"Piezas", &os_err);
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	461a      	mov	r2, r3
 80028c6:	4907      	ldr	r1, [pc, #28]	; (80028e4 <App_Task6Create+0x4c>)
 80028c8:	200c      	movs	r0, #12
 80028ca:	f003 fbff 	bl	80060cc <OSTaskNameSet>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000e08 	.word	0x20000e08
 80028dc:	20001004 	.word	0x20001004
 80028e0:	08001f89 	.word	0x08001f89
 80028e4:	08009a00 	.word	0x08009a00

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_MspInit+0x5c>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_MspInit+0x5c>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6193      	str	r3, [r2, #24]
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_MspInit+0x5c>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_MspInit+0x5c>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_MspInit+0x5c>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_MspInit+0x5c>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_MspInit+0x60>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_MspInit+0x60>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40021000 	.word	0x40021000
 8002954:	40010000 	.word	0x40010000

08002958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_TIM_Base_MspInit+0x34>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10b      	bne.n	8002982 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_TIM_Base_MspInit+0x38>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <HAL_TIM_Base_MspInit+0x38>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	61d3      	str	r3, [r2, #28]
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_TIM_Base_MspInit+0x38>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40000800 	.word	0x40000800
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_TIM_MspPostInit+0x58>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d117      	bne.n	80029e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_TIM_MspPostInit+0x5c>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_TIM_MspPostInit+0x5c>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_TIM_MspPostInit+0x5c>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029cc:	2340      	movs	r3, #64	; 0x40
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_TIM_MspPostInit+0x60>)
 80029e0:	f000 f97e 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40000800 	.word	0x40000800
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010c00 	.word	0x40010c00

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <HardFault_Handler+0x4>

08002a0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <MemManage_Handler+0x4>

08002a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <BusFault_Handler+0x4>

08002a16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <UsageFault_Handler+0x4>

08002a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	return 1;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <_kill>:

int _kill(int pid, int sig)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a4c:	f004 f8a0 	bl	8006b90 <__errno>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2216      	movs	r2, #22
 8002a54:	601a      	str	r2, [r3, #0]
	return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_exit>:

void _exit (int status)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffe7 	bl	8002a42 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a74:	e7fe      	b.n	8002a74 <_exit+0x12>

08002a76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e00a      	b.n	8002a9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a88:	f3af 8000 	nop.w
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	60ba      	str	r2, [r7, #8]
 8002a94:	b2ca      	uxtb	r2, r1
 8002a96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	dbf0      	blt.n	8002a88 <_read+0x12>
	}

return len;
 8002aa6:	687b      	ldr	r3, [r7, #4]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e009      	b.n	8002ad6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	60ba      	str	r2, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	dbf1      	blt.n	8002ac2 <_write+0x12>
	}
	return len;
 8002ade:	687b      	ldr	r3, [r7, #4]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_close>:

int _close(int file)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	return -1;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <_isatty>:

int _isatty(int file)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	return 1;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_sbrk+0x50>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x16>
		heap_end = &end;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <_sbrk+0x50>)
 8002b5a:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <_sbrk+0x54>)
 8002b5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <_sbrk+0x50>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <_sbrk+0x50>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	466a      	mov	r2, sp
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d907      	bls.n	8002b82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b72:	f004 f80d 	bl	8006b90 <__errno>
 8002b76:	4603      	mov	r3, r0
 8002b78:	220c      	movs	r2, #12
 8002b7a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	e006      	b.n	8002b90 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <_sbrk+0x50>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <_sbrk+0x50>)
 8002b8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20001008 	.word	0x20001008
 8002b9c:	20002878 	.word	0x20002878

08002ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <SystemInit+0x5c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <SystemInit+0x5c>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <SystemInit+0x5c>)
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4911      	ldr	r1, [pc, #68]	; (8002bfc <SystemInit+0x5c>)
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <SystemInit+0x60>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <SystemInit+0x5c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <SystemInit+0x5c>)
 8002bc2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <SystemInit+0x5c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <SystemInit+0x5c>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <SystemInit+0x5c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <SystemInit+0x5c>)
 8002bde:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002be2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <SystemInit+0x5c>)
 8002be6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002bea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SystemInit+0x64>)
 8002bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bf2:	609a      	str	r2, [r3, #8]
#endif 
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	f8ff0000 	.word	0xf8ff0000
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c0a:	e003      	b.n	8002c14 <LoopCopyDataInit>

08002c0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c12:	3104      	adds	r1, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c14:	480a      	ldr	r0, [pc, #40]	; (8002c40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c1c:	d3f6      	bcc.n	8002c0c <CopyDataInit>
  ldr r2, =_sbss
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c20:	e002      	b.n	8002c28 <LoopFillZerobss>

08002c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c24:	f842 3b04 	str.w	r3, [r2], #4

08002c28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c2c:	d3f9      	bcc.n	8002c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c2e:	f7ff ffb7 	bl	8002ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f003 ffb3 	bl	8006b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c36:	f7ff fb95 	bl	8002364 <main>
  bx lr
 8002c3a:	4770      	bx	lr
  ldr r3, =_sidata
 8002c3c:	08009ff4 	.word	0x08009ff4
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c44:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8002c48:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002c4c:	20002878 	.word	0x20002878

08002c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC1_2_IRQHandler>
	...

08002c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_Init+0x28>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_Init+0x28>)
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 f82f 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7ff fd10 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c70:	f7ff fe40 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000

08002c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ffd5 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b08b      	sub	sp, #44	; 0x2c
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	e169      	b.n	8002fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f040 8158 	bne.w	8002fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a9a      	ldr	r2, [pc, #616]	; (8002f80 <HAL_GPIO_Init+0x2a0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d05e      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d1c:	4a98      	ldr	r2, [pc, #608]	; (8002f80 <HAL_GPIO_Init+0x2a0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d875      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d22:	4a98      	ldr	r2, [pc, #608]	; (8002f84 <HAL_GPIO_Init+0x2a4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d058      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d28:	4a96      	ldr	r2, [pc, #600]	; (8002f84 <HAL_GPIO_Init+0x2a4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d86f      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d2e:	4a96      	ldr	r2, [pc, #600]	; (8002f88 <HAL_GPIO_Init+0x2a8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d052      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d34:	4a94      	ldr	r2, [pc, #592]	; (8002f88 <HAL_GPIO_Init+0x2a8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d869      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d3a:	4a94      	ldr	r2, [pc, #592]	; (8002f8c <HAL_GPIO_Init+0x2ac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04c      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d40:	4a92      	ldr	r2, [pc, #584]	; (8002f8c <HAL_GPIO_Init+0x2ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d863      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d46:	4a92      	ldr	r2, [pc, #584]	; (8002f90 <HAL_GPIO_Init+0x2b0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d046      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d4c:	4a90      	ldr	r2, [pc, #576]	; (8002f90 <HAL_GPIO_Init+0x2b0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d85d      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	d82a      	bhi.n	8002dac <HAL_GPIO_Init+0xcc>
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d859      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_GPIO_Init+0x80>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002ddb 	.word	0x08002ddb
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002dc7 	.word	0x08002dc7
 8002d6c:	08002e09 	.word	0x08002e09
 8002d70:	08002e0f 	.word	0x08002e0f
 8002d74:	08002e0f 	.word	0x08002e0f
 8002d78:	08002e0f 	.word	0x08002e0f
 8002d7c:	08002e0f 	.word	0x08002e0f
 8002d80:	08002e0f 	.word	0x08002e0f
 8002d84:	08002e0f 	.word	0x08002e0f
 8002d88:	08002e0f 	.word	0x08002e0f
 8002d8c:	08002e0f 	.word	0x08002e0f
 8002d90:	08002e0f 	.word	0x08002e0f
 8002d94:	08002e0f 	.word	0x08002e0f
 8002d98:	08002e0f 	.word	0x08002e0f
 8002d9c:	08002e0f 	.word	0x08002e0f
 8002da0:	08002e0f 	.word	0x08002e0f
 8002da4:	08002dbd 	.word	0x08002dbd
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <HAL_GPIO_Init+0x2b4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002db2:	e02c      	b.n	8002e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	623b      	str	r3, [r7, #32]
          break;
 8002dba:	e029      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	623b      	str	r3, [r7, #32]
          break;
 8002dc4:	e024      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	623b      	str	r3, [r7, #32]
          break;
 8002dce:	e01f      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	623b      	str	r3, [r7, #32]
          break;
 8002dd8:	e01a      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de2:	2304      	movs	r3, #4
 8002de4:	623b      	str	r3, [r7, #32]
          break;
 8002de6:	e013      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df0:	2308      	movs	r3, #8
 8002df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	611a      	str	r2, [r3, #16]
          break;
 8002dfa:	e009      	b.n	8002e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	615a      	str	r2, [r3, #20]
          break;
 8002e06:	e003      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
          break;
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          break;
 8002e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	d801      	bhi.n	8002e1a <HAL_GPIO_Init+0x13a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	e001      	b.n	8002e1e <HAL_GPIO_Init+0x13e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2bff      	cmp	r3, #255	; 0xff
 8002e24:	d802      	bhi.n	8002e2c <HAL_GPIO_Init+0x14c>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	e002      	b.n	8002e32 <HAL_GPIO_Init+0x152>
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	3b08      	subs	r3, #8
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	210f      	movs	r1, #15
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80b1 	beq.w	8002fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e60:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e78:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <HAL_GPIO_Init+0x2c0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_GPIO_Init+0x1ec>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3f      	ldr	r2, [pc, #252]	; (8002fa4 <HAL_GPIO_Init+0x2c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_GPIO_Init+0x1e8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3e      	ldr	r2, [pc, #248]	; (8002fa8 <HAL_GPIO_Init+0x2c8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x1e4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3d      	ldr	r2, [pc, #244]	; (8002fac <HAL_GPIO_Init+0x2cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_GPIO_Init+0x1e0>
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e006      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	e004      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e002      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	f002 0203 	and.w	r2, r2, #3
 8002ed4:	0092      	lsls	r2, r2, #2
 8002ed6:	4093      	lsls	r3, r2
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ede:	492f      	ldr	r1, [pc, #188]	; (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	492c      	ldr	r1, [pc, #176]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	4928      	ldr	r1, [pc, #160]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4922      	ldr	r1, [pc, #136]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	491e      	ldr	r1, [pc, #120]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	4914      	ldr	r1, [pc, #80]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d021      	beq.n	8002fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60cb      	str	r3, [r1, #12]
 8002f7c:	e021      	b.n	8002fc2 <HAL_GPIO_Init+0x2e2>
 8002f7e:	bf00      	nop
 8002f80:	10320000 	.word	0x10320000
 8002f84:	10310000 	.word	0x10310000
 8002f88:	10220000 	.word	0x10220000
 8002f8c:	10210000 	.word	0x10210000
 8002f90:	10120000 	.word	0x10120000
 8002f94:	10110000 	.word	0x10110000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	40010c00 	.word	0x40010c00
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	40011400 	.word	0x40011400
 8002fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f47f ae8e 	bne.w	8002cf4 <HAL_GPIO_Init+0x14>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	372c      	adds	r7, #44	; 0x2c
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e001      	b.n	800300a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
 8003022:	4613      	mov	r3, r2
 8003024:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003026:	787b      	ldrb	r3, [r7, #1]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302c:	887a      	ldrh	r2, [r7, #2]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003032:	e003      	b.n	800303c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	041a      	lsls	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	611a      	str	r2, [r3, #16]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003058:	887a      	ldrh	r2, [r7, #2]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	041a      	lsls	r2, r3, #16
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	43d9      	mvns	r1, r3
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	400b      	ands	r3, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e26c      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8087 	beq.w	80031a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003098:	4b92      	ldr	r3, [pc, #584]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d00c      	beq.n	80030be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a4:	4b8f      	ldr	r3, [pc, #572]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d112      	bne.n	80030d6 <HAL_RCC_OscConfig+0x5e>
 80030b0:	4b8c      	ldr	r3, [pc, #560]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030be:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d06c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x12c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d168      	bne.n	80031a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e246      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x76>
 80030e0:	4b80      	ldr	r3, [pc, #512]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a7f      	ldr	r2, [pc, #508]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e02e      	b.n	800314c <HAL_RCC_OscConfig+0xd4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x98>
 80030f6:	4b7b      	ldr	r3, [pc, #492]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a7a      	ldr	r2, [pc, #488]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a77      	ldr	r2, [pc, #476]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xd4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0xbc>
 800311a:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a71      	ldr	r2, [pc, #452]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6e      	ldr	r2, [pc, #440]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xd4>
 8003134:	4b6b      	ldr	r3, [pc, #428]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6a      	ldr	r2, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a67      	ldr	r2, [pc, #412]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff faa6 	bl	80026a4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800315c:	f7ff faa2 	bl	80026a4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e1fa      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xe4>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff fa92 	bl	80026a4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff fa8e 	bl	80026a4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1e6      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x10c>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b2:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x18c>
 80031ca:	4b46      	ldr	r3, [pc, #280]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x176>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1ba      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4939      	ldr	r1, [pc, #228]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <HAL_RCC_OscConfig+0x270>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7ff fa47 	bl	80026a4 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff fa43 	bl	80026a4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e19b      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4927      	ldr	r1, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_RCC_OscConfig+0x270>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7ff fa26 	bl	80026a4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325c:	f7ff fa22 	bl	80026a4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e17a      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d03a      	beq.n	80032fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d019      	beq.n	80032c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7ff fa06 	bl	80026a4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff fa02 	bl	80026a4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e15a      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f000 fab0 	bl	8003820 <RCC_Delay>
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7ff f9ec 	bl	80026a4 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ce:	e00f      	b.n	80032f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7ff f9e8 	bl	80026a4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d908      	bls.n	80032f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e140      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	42420000 	.word	0x42420000
 80032ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b9e      	ldr	r3, [pc, #632]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e9      	bne.n	80032d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a6 	beq.w	8003456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b97      	ldr	r3, [pc, #604]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10d      	bne.n	8003336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	4b94      	ldr	r3, [pc, #592]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4a93      	ldr	r2, [pc, #588]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	61d3      	str	r3, [r2, #28]
 8003326:	4b91      	ldr	r3, [pc, #580]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b8e      	ldr	r3, [pc, #568]	; (8003570 <HAL_RCC_OscConfig+0x4f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d118      	bne.n	8003374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003342:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <HAL_RCC_OscConfig+0x4f8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <HAL_RCC_OscConfig+0x4f8>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334e:	f7ff f9a9 	bl	80026a4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7ff f9a5 	bl	80026a4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0fd      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x4f8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d106      	bne.n	800338a <HAL_RCC_OscConfig+0x312>
 800337c:	4b7b      	ldr	r3, [pc, #492]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a7a      	ldr	r2, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	e02d      	b.n	80033e6 <HAL_RCC_OscConfig+0x36e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x334>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a72      	ldr	r2, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6213      	str	r3, [r2, #32]
 80033aa:	e01c      	b.n	80033e6 <HAL_RCC_OscConfig+0x36e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d10c      	bne.n	80033ce <HAL_RCC_OscConfig+0x356>
 80033b4:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a6c      	ldr	r2, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	f043 0304 	orr.w	r3, r3, #4
 80033be:	6213      	str	r3, [r2, #32]
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a69      	ldr	r2, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	e00b      	b.n	80033e6 <HAL_RCC_OscConfig+0x36e>
 80033ce:	4b67      	ldr	r3, [pc, #412]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a66      	ldr	r2, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	6213      	str	r3, [r2, #32]
 80033da:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d015      	beq.n	800341a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7ff f959 	bl	80026a4 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7ff f955 	bl	80026a4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f241 3288 	movw	r2, #5000	; 0x1388
 8003404:	4293      	cmp	r3, r2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0ab      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	4b57      	ldr	r3, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ee      	beq.n	80033f6 <HAL_RCC_OscConfig+0x37e>
 8003418:	e014      	b.n	8003444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7ff f943 	bl	80026a4 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7ff f93f 	bl	80026a4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e095      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	4b4c      	ldr	r3, [pc, #304]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ee      	bne.n	8003422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d105      	bne.n	8003456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	4b48      	ldr	r3, [pc, #288]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4a47      	ldr	r2, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8081 	beq.w	8003562 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003460:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b08      	cmp	r3, #8
 800346a:	d061      	beq.n	8003530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d146      	bne.n	8003502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003474:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_OscConfig+0x4fc>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7ff f913 	bl	80026a4 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003482:	f7ff f90f 	bl	80026a4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e067      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d108      	bne.n	80034bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034aa:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	492d      	ldr	r1, [pc, #180]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a19      	ldr	r1, [r3, #32]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	430b      	orrs	r3, r1
 80034ce:	4927      	ldr	r1, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_RCC_OscConfig+0x4fc>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7ff f8e3 	bl	80026a4 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7ff f8df 	bl	80026a4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e037      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x46a>
 8003500:	e02f      	b.n	8003562 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_RCC_OscConfig+0x4fc>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7ff f8cc 	bl	80026a4 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7ff f8c8 	bl	80026a4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e020      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x498>
 800352e:	e018      	b.n	8003562 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_OscConfig+0x4f4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	429a      	cmp	r2, r3
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	42420060 	.word	0x42420060

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d0      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4965      	ldr	r1, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d040      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e073      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06b      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4936      	ldr	r1, [pc, #216]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7ff f81c 	bl	80026a4 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7ff f818 	bl	80026a4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e053      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d210      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4922      	ldr	r1, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ffb2 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	08009a88 	.word	0x08009a88
 8003744:	2000000c 	.word	0x2000000c
 8003748:	20000010 	.word	0x20000010

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b490      	push	{r4, r7}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003752:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003754:	1d3c      	adds	r4, r7, #4
 8003756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800375c:	f240 2301 	movw	r3, #513	; 0x201
 8003760:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x46>
 800378a:	e02d      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378e:	623b      	str	r3, [r7, #32]
      break;
 8003790:	e02d      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800379e:	4413      	add	r3, r2
 80037a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c5b      	lsrs	r3, r3, #17
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037be:	4413      	add	r3, r2
 80037c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ca:	fb02 f203 	mul.w	r2, r2, r3
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e004      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	623b      	str	r3, [r7, #32]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ea:	623b      	str	r3, [r7, #32]
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc90      	pop	{r4, r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	08009a08 	.word	0x08009a08
 8003800:	40021000 	.word	0x40021000
 8003804:	007a1200 	.word	0x007a1200
 8003808:	003d0900 	.word	0x003d0900

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b02      	ldr	r3, [pc, #8]	; (800381c <HAL_RCC_GetHCLKFreq+0x10>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	2000000c 	.word	0x2000000c

08003820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <RCC_Delay+0x34>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <RCC_Delay+0x38>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0a5b      	lsrs	r3, r3, #9
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800383c:	bf00      	nop
  }
  while (Delay --);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	60fa      	str	r2, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f9      	bne.n	800383c <RCC_Delay+0x1c>
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	2000000c 	.word	0x2000000c
 8003858:	10624dd3 	.word	0x10624dd3

0800385c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e041      	b.n	80038f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff f868 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fb0e 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e041      	b.n	8003990 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f839 	bl	8003998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 fabf 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_TIM_PWM_Start+0x24>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e022      	b.n	8003a16 <HAL_TIM_PWM_Start+0x6a>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d109      	bne.n	80039ea <HAL_TIM_PWM_Start+0x3e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e015      	b.n	8003a16 <HAL_TIM_PWM_Start+0x6a>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d109      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x58>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e008      	b.n	8003a16 <HAL_TIM_PWM_Start+0x6a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e05e      	b.n	8003adc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Start+0x82>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2c:	e013      	b.n	8003a56 <HAL_TIM_PWM_Start+0xaa>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_PWM_Start+0x92>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_PWM_Start+0xaa>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Start+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	e003      	b.n	8003a56 <HAL_TIM_PWM_Start+0xaa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fcac 	bl	80043bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <HAL_TIM_PWM_Start+0x138>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_TIM_PWM_Start+0x138>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0xfa>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0xfa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_TIM_PWM_Start+0x13c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0xfa>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_TIM_PWM_Start+0x140>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d010      	beq.n	8003ada <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	e007      	b.n	8003ada <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800

08003af0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fc5a 	bl	80043bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <HAL_TIM_PWM_Stop+0xc4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d117      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x52>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	f240 4344 	movw	r3, #1092	; 0x444
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x52>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_TIM_PWM_Stop+0x82>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	f240 4344 	movw	r3, #1092	; 0x444
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_PWM_Stop+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Stop+0x92>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b80:	e013      	b.n	8003baa <HAL_TIM_PWM_Stop+0xba>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0xa2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	e00b      	b.n	8003baa <HAL_TIM_PWM_Stop+0xba>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0xb2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	e003      	b.n	8003baa <HAL_TIM_PWM_Stop+0xba>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40012c00 	.word	0x40012c00

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0ac      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	f200 809f 	bhi.w	8003d20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003d21 	.word	0x08003d21
 8003bf0:	08003d21 	.word	0x08003d21
 8003bf4:	08003d21 	.word	0x08003d21
 8003bf8:	08003c5d 	.word	0x08003c5d
 8003bfc:	08003d21 	.word	0x08003d21
 8003c00:	08003d21 	.word	0x08003d21
 8003c04:	08003d21 	.word	0x08003d21
 8003c08:	08003c9f 	.word	0x08003c9f
 8003c0c:	08003d21 	.word	0x08003d21
 8003c10:	08003d21 	.word	0x08003d21
 8003c14:	08003d21 	.word	0x08003d21
 8003c18:	08003cdf 	.word	0x08003cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f9ac 	bl	8003f80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0208 	orr.w	r2, r2, #8
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	619a      	str	r2, [r3, #24]
      break;
 8003c5a:	e062      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f9f2 	bl	800404c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]
      break;
 8003c9c:	e041      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fa3b 	bl	8004120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0208 	orr.w	r2, r2, #8
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0204 	bic.w	r2, r2, #4
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]
      break;
 8003cdc:	e021      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fa85 	bl	80041f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69d9      	ldr	r1, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	61da      	str	r2, [r3, #28]
      break;
 8003d1e:	e000      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_ConfigClockSource+0x18>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0b3      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x180>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d03e      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0xd0>
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8a:	f200 8087 	bhi.w	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	f000 8085 	beq.w	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d87f      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d01a      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xa2>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d87b      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003da4:	2b60      	cmp	r3, #96	; 0x60
 8003da6:	d050      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x116>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d877      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dac:	2b50      	cmp	r3, #80	; 0x50
 8003dae:	d03c      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0xf6>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d873      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d058      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x136>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d86f      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dbc:	2b30      	cmp	r3, #48	; 0x30
 8003dbe:	d064      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d86b      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d060      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d867      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d05c      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d05a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dd4:	e062      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f000 faca 	bl	800437e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	609a      	str	r2, [r3, #8]
      break;
 8003e02:	e04e      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f000 fab3 	bl	800437e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e26:	609a      	str	r2, [r3, #8]
      break;
 8003e28:	e03b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 fa2a 	bl	8004290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2150      	movs	r1, #80	; 0x50
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fa81 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003e48:	e02b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 fa48 	bl	80042ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2160      	movs	r1, #96	; 0x60
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fa71 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003e68:	e01b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 fa0a 	bl	8004290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fa61 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f000 fa58 	bl	800434a <TIM_ITRx_SetConfig>
        break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <TIM_Base_SetConfig+0xb8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <TIM_Base_SetConfig+0xbc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <TIM_Base_SetConfig+0xc0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <TIM_Base_SetConfig+0xb8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <TIM_Base_SetConfig+0xbc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_Base_SetConfig+0xc0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <TIM_Base_SetConfig+0xb8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800

08003f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0302 	bic.w	r3, r3, #2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <TIM_OC1_SetConfig+0xc8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10c      	bne.n	8003ff6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0308 	bic.w	r3, r3, #8
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <TIM_OC1_SetConfig+0xc8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d111      	bne.n	8004022 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00

0800404c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0320 	bic.w	r3, r3, #32
 8004096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a1d      	ldr	r2, [pc, #116]	; (800411c <TIM_OC2_SetConfig+0xd0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10d      	bne.n	80040c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a14      	ldr	r2, [pc, #80]	; (800411c <TIM_OC2_SetConfig+0xd0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d113      	bne.n	80040f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	40012c00 	.word	0x40012c00

08004120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <TIM_OC3_SetConfig+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10d      	bne.n	800419a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <TIM_OC3_SetConfig+0xd0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d113      	bne.n	80041ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00

080041f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800423e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a0f      	ldr	r2, [pc, #60]	; (800428c <TIM_OC4_SetConfig+0x98>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d109      	bne.n	8004268 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	40012c00 	.word	0x40012c00

08004290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 030a 	bic.w	r3, r3, #10
 80042cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f023 0210 	bic.w	r2, r3, #16
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004316:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	031b      	lsls	r3, r3, #12
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004328:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	621a      	str	r2, [r3, #32]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	f043 0307 	orr.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004398:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	021a      	lsls	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	609a      	str	r2, [r3, #8]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2201      	movs	r2, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	43db      	mvns	r3, r3
 80043de:	401a      	ands	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1a      	ldr	r2, [r3, #32]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e046      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a10      	ldr	r2, [pc, #64]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800

080044c0 <CPU_IntSrcPrioSet>:
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio,
                         CPU_INT08U  type)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
 80044ca:	460b      	mov	r3, r1
 80044cc:	71bb      	strb	r3, [r7, #6]
 80044ce:	4613      	mov	r3, r2
 80044d0:	717b      	strb	r3, [r7, #5]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT16U  pos_max;
    CPU_INT32U  temp;
    CPU_INT32U  prio_offset;
    CPU_SR_ALLOC();
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]


    prio_offset = (prio << (DEF_OCTET_NBR_BITS - CPU_CFG_NVIC_PRIO_BITS));
 80044d6:	79bb      	ldrb	r3, [r7, #6]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	613b      	str	r3, [r7, #16]
    switch (pos) {
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	f200 80c3 	bhi.w	800466a <CPU_IntSrcPrioSet+0x1aa>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <CPU_IntSrcPrioSet+0x2c>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	0800471b 	.word	0x0800471b
 80044f0:	0800471b 	.word	0x0800471b
 80044f4:	0800471b 	.word	0x0800471b
 80044f8:	0800471b 	.word	0x0800471b
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	08004559 	.word	0x08004559
 8004504:	08004587 	.word	0x08004587
 8004508:	0800471b 	.word	0x0800471b
 800450c:	0800471b 	.word	0x0800471b
 8004510:	0800471b 	.word	0x0800471b
 8004514:	0800471b 	.word	0x0800471b
 8004518:	080045b5 	.word	0x080045b5
 800451c:	080045e3 	.word	0x080045e3
 8004520:	0800471b 	.word	0x0800471b
 8004524:	0800460f 	.word	0x0800460f
 8004528:	0800463d 	.word	0x0800463d
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 800452c:	2040      	movs	r0, #64	; 0x40
 800452e:	f7fb fe13 	bl	8000158 <CPU_SR_Save>
 8004532:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8004534:	4b7c      	ldr	r3, [pc, #496]	; (8004728 <CPU_IntSrcPrioSet+0x268>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004540:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 800454a:	4a77      	ldr	r2, [pc, #476]	; (8004728 <CPU_IntSrcPrioSet+0x268>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8004550:	6978      	ldr	r0, [r7, #20]
 8004552:	f7fb fe0f 	bl	8000174 <CPU_SR_Restore>
             break;
 8004556:	e0e3      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8004558:	2040      	movs	r0, #64	; 0x40
 800455a:	f7fb fdfd 	bl	8000158 <CPU_SR_Save>
 800455e:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8004560:	4b71      	ldr	r3, [pc, #452]	; (8004728 <CPU_IntSrcPrioSet+0x268>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456c:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (1 * DEF_OCTET_NBR_BITS));
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8004578:	4a6b      	ldr	r2, [pc, #428]	; (8004728 <CPU_IntSrcPrioSet+0x268>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7fb fdf8 	bl	8000174 <CPU_SR_Restore>
             break;
 8004584:	e0cc      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8004586:	2040      	movs	r0, #64	; 0x40
 8004588:	f7fb fde6 	bl	8000158 <CPU_SR_Save>
 800458c:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 800458e:	4b66      	ldr	r3, [pc, #408]	; (8004728 <CPU_IntSrcPrioSet+0x268>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800459a:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 80045a6:	4a60      	ldr	r2, [pc, #384]	; (8004728 <CPU_IntSrcPrioSet+0x268>)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80045ac:	6978      	ldr	r0, [r7, #20]
 80045ae:	f7fb fde1 	bl	8000174 <CPU_SR_Restore>
             break;
 80045b2:	e0b5      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
 80045b4:	2040      	movs	r0, #64	; 0x40
 80045b6:	f7fb fdcf 	bl	8000158 <CPU_SR_Save>
 80045ba:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI2;
 80045bc:	4b5b      	ldr	r3, [pc, #364]	; (800472c <CPU_IntSrcPrioSet+0x26c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045c8:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI2   = temp;
 80045d4:	4a55      	ldr	r2, [pc, #340]	; (800472c <CPU_IntSrcPrioSet+0x26c>)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80045da:	6978      	ldr	r0, [r7, #20]
 80045dc:	f7fb fdca 	bl	8000174 <CPU_SR_Restore>
             break;
 80045e0:	e09e      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
 80045e2:	2040      	movs	r0, #64	; 0x40
 80045e4:	f7fb fdb8 	bl	8000158 <CPU_SR_Save>
 80045e8:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80045ea:	4b51      	ldr	r3, [pc, #324]	; (8004730 <CPU_IntSrcPrioSet+0x270>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045f6:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8004600:	4a4b      	ldr	r2, [pc, #300]	; (8004730 <CPU_IntSrcPrioSet+0x270>)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8004606:	6978      	ldr	r0, [r7, #20]
 8004608:	f7fb fdb4 	bl	8000174 <CPU_SR_Restore>
             break;
 800460c:	e088      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
 800460e:	2040      	movs	r0, #64	; 0x40
 8004610:	f7fb fda2 	bl	8000158 <CPU_SR_Save>
 8004614:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8004616:	4b46      	ldr	r3, [pc, #280]	; (8004730 <CPU_IntSrcPrioSet+0x270>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004622:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 800462e:	4a40      	ldr	r2, [pc, #256]	; (8004730 <CPU_IntSrcPrioSet+0x270>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f7fb fd9d 	bl	8000174 <CPU_SR_Restore>
             break;
 800463a:	e071      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 800463c:	2040      	movs	r0, #64	; 0x40
 800463e:	f7fb fd8b 	bl	8000158 <CPU_SR_Save>
 8004642:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8004644:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <CPU_IntSrcPrioSet+0x270>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004650:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 800465c:	4a34      	ldr	r2, [pc, #208]	; (8004730 <CPU_IntSrcPrioSet+0x270>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7fb fd86 	bl	8000174 <CPU_SR_Restore>
             break;
 8004668:	e05a      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
             pos_max = CPU_INT_SRC_POS_MAX;
 800466a:	4b32      	ldr	r3, [pc, #200]	; (8004734 <CPU_IntSrcPrioSet+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	3301      	adds	r3, #1
 8004674:	b29b      	uxth	r3, r3
 8004676:	015b      	lsls	r3, r3, #5
 8004678:	b29b      	uxth	r3, r3
 800467a:	3310      	adds	r3, #16
 800467c:	817b      	strh	r3, [r7, #10]
             if (pos < pos_max) {                               /* See Note #3.                                         */
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	b29b      	uxth	r3, r3
 8004682:	897a      	ldrh	r2, [r7, #10]
 8004684:	429a      	cmp	r2, r3
 8004686:	d94a      	bls.n	800471e <CPU_IntSrcPrioSet+0x25e>

                 if (type == CPU_INT_NKA) {                     /* Check if NKA priority goes beyond KA boundary        */
 8004688:	797b      	ldrb	r3, [r7, #5]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <CPU_IntSrcPrioSet+0x1da>
                     if (prio >= CPU_CFG_KA_IPL_BOUNDARY) {     /* Priority must be < CPU_CFG_KA_IPL_BOUNDARY           */
 800468e:	79bb      	ldrb	r3, [r7, #6]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d907      	bls.n	80046a4 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8004694:	f000 f850 	bl	8004738 <CPU_SW_Exception>
 8004698:	e004      	b.n	80046a4 <CPU_IntSrcPrioSet+0x1e4>
                     }

                 } else {                                       /* Check if KA priority is less than KA boundary        */
                     if (prio < CPU_CFG_KA_IPL_BOUNDARY) {      /* Priority must be >= CPU_CFG_KA_IPL_BOUNDARY          */
 800469a:	79bb      	ldrb	r3, [r7, #6]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d801      	bhi.n	80046a4 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 80046a0:	f000 f84a 	bl	8004738 <CPU_SW_Exception>
                     }
                 }

                 group                    = (pos - 16) / 4;
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	3b10      	subs	r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da00      	bge.n	80046ae <CPU_IntSrcPrioSet+0x1ee>
 80046ac:	3303      	adds	r3, #3
 80046ae:	109b      	asrs	r3, r3, #2
 80046b0:	727b      	strb	r3, [r7, #9]
                 nbr                      = (pos - 16) % 4;
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	3b10      	subs	r3, #16
 80046b6:	425a      	negs	r2, r3
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	f002 0203 	and.w	r2, r2, #3
 80046c0:	bf58      	it	pl
 80046c2:	4253      	negpl	r3, r2
 80046c4:	723b      	strb	r3, [r7, #8]

                 CPU_CRITICAL_ENTER();
 80046c6:	2040      	movs	r0, #64	; 0x40
 80046c8:	f7fb fd46 	bl	8000158 <CPU_SR_Save>
 80046cc:	6178      	str	r0, [r7, #20]
                 temp                     = CPU_REG_NVIC_IPR(group);
 80046ce:	7a7b      	ldrb	r3, [r7, #9]
 80046d0:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 80046d4:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~((CPU_INT32U)DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
 80046de:	7a3b      	ldrb	r3, [r7, #8]
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	22ff      	movs	r2, #255	; 0xff
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
                 temp                    |=  ((CPU_INT32U)prio_offset    << (nbr * DEF_OCTET_NBR_BITS));
 80046f0:	7a3b      	ldrb	r3, [r7, #8]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_IPR(group)  = temp;               /* Set interrupt priority.                              */
 8004700:	7a7b      	ldrb	r3, [r7, #9]
 8004702:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8004706:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6013      	str	r3, [r2, #0]
                 CPU_CRITICAL_EXIT();
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7fb fd2e 	bl	8000174 <CPU_SR_Restore>
             }
             break;
 8004718:	e001      	b.n	800471e <CPU_IntSrcPrioSet+0x25e>
             break;
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <CPU_IntSrcPrioSet+0x260>
             break;
 800471e:	bf00      	nop
    }
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed18 	.word	0xe000ed18
 800472c:	e000ed1c 	.word	0xe000ed1c
 8004730:	e000ed20 	.word	0xe000ed20
 8004734:	e000e004 	.word	0xe000e004

08004738 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
    for (;;) {
 800473c:	e7fe      	b.n	800473c <CPU_SW_Exception+0x4>
	...

08004740 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8004746:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <OSDebugInit+0xf4>)
 8004748:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <OSDebugInit+0xf8>)
 800474c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <OSDebugInit+0xfc>)
 8004750:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8004752:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <OSDebugInit+0x100>)
 8004754:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <OSDebugInit+0x104>)
 8004758:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <OSDebugInit+0x108>)
 800475c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <OSDebugInit+0x10c>)
 8004760:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8004762:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <OSDebugInit+0x110>)
 8004764:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8004766:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <OSDebugInit+0x114>)
 8004768:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 800476a:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <OSDebugInit+0x118>)
 800476c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 800476e:	4b3b      	ldr	r3, [pc, #236]	; (800485c <OSDebugInit+0x11c>)
 8004770:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <OSDebugInit+0x120>)
 8004774:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <OSDebugInit+0x124>)
 8004778:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 800477a:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <OSDebugInit+0x128>)
 800477c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <OSDebugInit+0x12c>)
 8004780:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <OSDebugInit+0x130>)
 8004784:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <OSDebugInit+0x134>)
 8004788:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <OSDebugInit+0x138>)
 800478c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <OSDebugInit+0x13c>)
 8004790:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8004792:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <OSDebugInit+0x140>)
 8004794:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <OSDebugInit+0x144>)
 8004798:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 800479a:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <OSDebugInit+0x148>)
 800479c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 800479e:	4b3b      	ldr	r3, [pc, #236]	; (800488c <OSDebugInit+0x14c>)
 80047a0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 80047a2:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <OSDebugInit+0x150>)
 80047a4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <OSDebugInit+0x154>)
 80047a8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <OSDebugInit+0x158>)
 80047ac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 80047ae:	4b3b      	ldr	r3, [pc, #236]	; (800489c <OSDebugInit+0x15c>)
 80047b0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 80047b2:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <OSDebugInit+0x160>)
 80047b4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <OSDebugInit+0x164>)
 80047b8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <OSDebugInit+0x168>)
 80047bc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <OSDebugInit+0x16c>)
 80047c0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <OSDebugInit+0x170>)
 80047c4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 80047c6:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <OSDebugInit+0x174>)
 80047c8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <OSDebugInit+0x178>)
 80047cc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 80047ce:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <OSDebugInit+0x17c>)
 80047d0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <OSDebugInit+0x180>)
 80047d4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <OSDebugInit+0x184>)
 80047d8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 80047da:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <OSDebugInit+0x188>)
 80047dc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 80047de:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <OSDebugInit+0x18c>)
 80047e0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <OSDebugInit+0x190>)
 80047e4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <OSDebugInit+0x194>)
 80047e8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <OSDebugInit+0x198>)
 80047ec:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <OSDebugInit+0x19c>)
 80047f0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 80047f2:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <OSDebugInit+0x1a0>)
 80047f4:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 80047f6:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <OSDebugInit+0x1a4>)
 80047f8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 80047fa:	4b3b      	ldr	r3, [pc, #236]	; (80048e8 <OSDebugInit+0x1a8>)
 80047fc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 80047fe:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <OSDebugInit+0x1ac>)
 8004800:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <OSDebugInit+0x1b0>)
 8004804:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8004806:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <OSDebugInit+0x1b4>)
 8004808:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 800480a:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <OSDebugInit+0x1b8>)
 800480c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <OSDebugInit+0x1bc>)
 8004810:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <OSDebugInit+0x1c0>)
 8004814:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8004816:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <OSDebugInit+0x1c4>)
 8004818:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <OSDebugInit+0x1c8>)
 800481c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 800481e:	4b3b      	ldr	r3, [pc, #236]	; (800490c <OSDebugInit+0x1cc>)
 8004820:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8004822:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <OSDebugInit+0x1d0>)
 8004824:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8004826:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <OSDebugInit+0x1d4>)
 8004828:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	08009a98 	.word	0x08009a98
 8004838:	08009a9c 	.word	0x08009a9c
 800483c:	08009aa2 	.word	0x08009aa2
 8004840:	08009aa4 	.word	0x08009aa4
 8004844:	08009aa0 	.word	0x08009aa0
 8004848:	08009aa6 	.word	0x08009aa6
 800484c:	08009aa8 	.word	0x08009aa8
 8004850:	08009aaa 	.word	0x08009aaa
 8004854:	08009aac 	.word	0x08009aac
 8004858:	08009aae 	.word	0x08009aae
 800485c:	08009ab0 	.word	0x08009ab0
 8004860:	08009ab2 	.word	0x08009ab2
 8004864:	08009ab4 	.word	0x08009ab4
 8004868:	08009ab6 	.word	0x08009ab6
 800486c:	08009ab8 	.word	0x08009ab8
 8004870:	08009aba 	.word	0x08009aba
 8004874:	08009abc 	.word	0x08009abc
 8004878:	08009abe 	.word	0x08009abe
 800487c:	08009ac0 	.word	0x08009ac0
 8004880:	08009ac2 	.word	0x08009ac2
 8004884:	08009ac4 	.word	0x08009ac4
 8004888:	08009ac6 	.word	0x08009ac6
 800488c:	08009ac8 	.word	0x08009ac8
 8004890:	08009aca 	.word	0x08009aca
 8004894:	08009acc 	.word	0x08009acc
 8004898:	08009ace 	.word	0x08009ace
 800489c:	08009ad0 	.word	0x08009ad0
 80048a0:	08009ad2 	.word	0x08009ad2
 80048a4:	08009ad4 	.word	0x08009ad4
 80048a8:	08009ad6 	.word	0x08009ad6
 80048ac:	08009ad8 	.word	0x08009ad8
 80048b0:	08009ada 	.word	0x08009ada
 80048b4:	08009adc 	.word	0x08009adc
 80048b8:	08009ade 	.word	0x08009ade
 80048bc:	08009ae0 	.word	0x08009ae0
 80048c0:	08009ae2 	.word	0x08009ae2
 80048c4:	08009ae4 	.word	0x08009ae4
 80048c8:	08009ae6 	.word	0x08009ae6
 80048cc:	08009ae8 	.word	0x08009ae8
 80048d0:	08009aea 	.word	0x08009aea
 80048d4:	08009aec 	.word	0x08009aec
 80048d8:	08009aee 	.word	0x08009aee
 80048dc:	08009af0 	.word	0x08009af0
 80048e0:	08009af2 	.word	0x08009af2
 80048e4:	20001534 	.word	0x20001534
 80048e8:	20001498 	.word	0x20001498
 80048ec:	08009af6 	.word	0x08009af6
 80048f0:	08009af8 	.word	0x08009af8
 80048f4:	08009afa 	.word	0x08009afa
 80048f8:	08009afc 	.word	0x08009afc
 80048fc:	08009afe 	.word	0x08009afe
 8004900:	08009b00 	.word	0x08009b00
 8004904:	08009b02 	.word	0x08009b02
 8004908:	08009b04 	.word	0x08009b04
 800490c:	08009b06 	.word	0x08009b06
 8004910:	08009af4 	.word	0x08009af4
 8004914:	08009b08 	.word	0x08009b08

08004918 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <OSInitHookBegin+0x54>)
 8004920:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8004922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004926:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 8004928:	e007      	b.n	800493a <OSInitHookBegin+0x22>
        size--;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3b01      	subs	r3, #1
 800492e:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	1d1a      	adds	r2, r3, #4
 8004934:	603a      	str	r2, [r7, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f4      	bne.n	800492a <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <OSInitHookBegin+0x58>)
 8004942:	4a0c      	ldr	r2, [pc, #48]	; (8004974 <OSInitHookBegin+0x5c>)
 8004944:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <OSInitHookBegin+0x58>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 0307 	bic.w	r3, r3, #7
 800494e:	461a      	mov	r2, r3
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <OSInitHookBegin+0x58>)
 8004952:	601a      	str	r2, [r3, #0]
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <OSInitHookBegin+0x60>)
 8004956:	2200      	movs	r2, #0
 8004958:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <OSInitHookBegin+0x64>)
 800495c:	2240      	movs	r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20001094 	.word	0x20001094
 8004970:	2000108c 	.word	0x2000108c
 8004974:	20001494 	.word	0x20001494
 8004978:	2000100c 	.word	0x2000100c
 800497c:	20001090 	.word	0x20001090

08004980 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0

}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 f8bf 	bl	8006b18 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f002 f8bd 	bl	8006b2a <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 80049bc:	f002 f8be 	bl	8006b3c <App_TaskIdleHook>
#endif
}
 80049c0:	bf00      	nop
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f002 f8c1 	bl	8006b54 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 80049de:	f002 f8b3 	bl	8006b48 <App_TaskStatHook>
#endif
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3b04      	subs	r3, #4
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a10:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	4a34      	ldr	r2, [pc, #208]	; (8004af8 <OSTaskStkInit+0x110>)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3b04      	subs	r3, #4
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8004a36:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8004a44:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3b04      	subs	r3, #4
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8004a52:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3b04      	subs	r3, #4
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004a60:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	3b04      	subs	r3, #4
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3b04      	subs	r3, #4
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f06f 0202 	mvn.w	r2, #2
 8004a7a:	601a      	str	r2, [r3, #0]
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8004a88:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004a96:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3b04      	subs	r3, #4
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8004aa4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	3b04      	subs	r3, #4
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8004ab2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3b04      	subs	r3, #4
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8004ac0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8004ace:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3b04      	subs	r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8004adc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8004aea:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
#endif

    return (p_stk);
 8004aec:	697b      	ldr	r3, [r7, #20]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	0800645d 	.word	0x0800645d

08004afc <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8004b00:	f002 f831 	bl	8006b66 <App_TaskSwHook>
    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
#endif
}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f002 f82e 	bl	8006b72 <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 8004b24:	f002 f82e 	bl	8006b84 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <OSTimeTickHook+0x2c>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <OSTimeTickHook+0x2c>)
 8004b32:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <OSTimeTickHook+0x2c>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	2b63      	cmp	r3, #99	; 0x63
 8004b3a:	d904      	bls.n	8004b46 <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <OSTimeTickHook+0x2c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 8004b42:	f001 fe07 	bl	8006754 <OSTmrSignal>
    }
#endif
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000100c 	.word	0x2000100c

08004b50 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 8004b56:	2040      	movs	r0, #64	; 0x40
 8004b58:	f7fb fb24 	bl	80001a4 <OS_CPU_SR_Save>
 8004b5c:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8004b5e:	f000 f8a7 	bl	8004cb0 <OSIntEnter>
    OS_EXIT_CRITICAL();
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fb fb2c 	bl	80001c0 <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8004b68:	f000 f9c4 	bl	8004ef4 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8004b6c:	f000 f8b8 	bl	8004ce0 <OSIntExit>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <OS_CPU_SysTickInitFreq+0x24>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f807 	bl	8004ba0 <OS_CPU_SysTickInit>
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	10624dd3 	.word	0x10624dd3

08004ba0 <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 8004bac:	4a11      	ldr	r2, [pc, #68]	; (8004bf4 <OS_CPU_SysTickInit+0x54>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <OS_CPU_SysTickInit+0x58>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bc0:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 8004bcc:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <OS_CPU_SysTickInit+0x58>)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <OS_CPU_SysTickInit+0x5c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <OS_CPU_SysTickInit+0x5c>)
 8004bd8:	f043 0305 	orr.w	r3, r3, #5
 8004bdc:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <OS_CPU_SysTickInit+0x5c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a06      	ldr	r2, [pc, #24]	; (8004bfc <OS_CPU_SysTickInit+0x5c>)
 8004be4:	f043 0302 	orr.w	r3, r3, #2
 8004be8:	6013      	str	r3, [r2, #0]
}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	e000e014 	.word	0xe000e014
 8004bf8:	e000ed20 	.word	0xe000ed20
 8004bfc:	e000e010 	.word	0xe000e010

08004c00 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	701a      	strb	r2, [r3, #0]
        return;
 8004c1c:	e025      	b.n	8004c6a <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	220c      	movs	r2, #12
 8004c28:	701a      	strb	r2, [r3, #0]
        return;
 8004c2a:	e01e      	b.n	8004c6a <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <OSEventNameSet+0x70>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2212      	movs	r2, #18
 8004c38:	701a      	strb	r2, [r3, #0]
        return;
 8004c3a:	e016      	b.n	8004c6a <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d903      	bls.n	8004c4e <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
             return;
 8004c4c:	e00d      	b.n	8004c6a <OSEventNameSet+0x6a>
             break;
 8004c4e:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 8004c50:	2040      	movs	r0, #64	; 0x40
 8004c52:	f7fb faa7 	bl	80001a4 <OS_CPU_SR_Save>
 8004c56:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8004c5e:	6978      	ldr	r0, [r7, #20]
 8004c60:	f7fb faae 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
}
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20001cc8 	.word	0x20001cc8

08004c74 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8004c78:	f7ff fe4e 	bl	8004918 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8004c7c:	f000 fb84 	bl	8005388 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8004c80:	f000 fbc0 	bl	8005404 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8004c84:	f000 fc3a 	bl	80054fc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8004c88:	f000 fb34 	bl	80052f4 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8004c8c:	f000 feba 	bl	8005a04 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8004c90:	f000 ff28 	bl	8005ae4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8004c94:	f000 ff66 	bl	8005b64 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8004c98:	f000 fbe4 	bl	8005464 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8004c9c:	f000 fc08 	bl	80054b0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8004ca0:	f001 fd6a 	bl	8006778 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8004ca4:	f7ff fe6c 	bl	8004980 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8004ca8:	f7ff fd4a 	bl	8004740 <OSDebugInit>
#endif
}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <OSIntEnter+0x28>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d109      	bne.n	8004cd0 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8004cbc:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <OSIntEnter+0x2c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2bff      	cmp	r3, #255	; 0xff
 8004cc2:	d005      	beq.n	8004cd0 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <OSIntEnter+0x2c>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <OSIntEnter+0x2c>)
 8004cce:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	200014d9 	.word	0x200014d9
 8004cdc:	20001cc8 	.word	0x20001cc8

08004ce0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8004cea:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <OSIntExit+0x84>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d134      	bne.n	8004d5c <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8004cf2:	2040      	movs	r0, #64	; 0x40
 8004cf4:	f7fb fa56 	bl	80001a4 <OS_CPU_SR_Save>
 8004cf8:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <OSIntExit+0x88>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <OSIntExit+0x2e>
            OSIntNesting--;
 8004d02:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <OSIntExit+0x88>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <OSIntExit+0x88>)
 8004d0c:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <OSIntExit+0x88>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11f      	bne.n	8004d56 <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <OSIntExit+0x8c>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11b      	bne.n	8004d56 <OSIntExit+0x76>
                OS_SchedNew();
 8004d1e:	f000 fc95 	bl	800564c <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <OSIntExit+0x90>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <OSIntExit+0x94>)
 8004d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <OSIntExit+0x98>)
 8004d30:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <OSIntExit+0x90>)
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <OSIntExit+0x9c>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d00b      	beq.n	8004d56 <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <OSIntExit+0x98>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d44:	3201      	adds	r2, #1
 8004d46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <OSIntExit+0xa0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <OSIntExit+0xa0>)
 8004d50:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8004d52:	f7fb fa7e 	bl	8000252 <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fb fa32 	bl	80001c0 <OS_CPU_SR_Restore>
    }
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200014d9 	.word	0x200014d9
 8004d68:	20001cc8 	.word	0x20001cc8
 8004d6c:	200014d0 	.word	0x200014d0
 8004d70:	200014e2 	.word	0x200014e2
 8004d74:	20002764 	.word	0x20002764
 8004d78:	20001ab0 	.word	0x20001ab0
 8004d7c:	200017b4 	.word	0x200017b4
 8004d80:	20001a38 	.word	0x20001a38

08004d84 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <OSSchedLock+0x44>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d114      	bne.n	8004dc0 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 8004d96:	2040      	movs	r0, #64	; 0x40
 8004d98:	f7fb fa04 	bl	80001a4 <OS_CPU_SR_Save>
 8004d9c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <OSSchedLock+0x48>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <OSSchedLock+0x4c>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2bff      	cmp	r3, #255	; 0xff
 8004dac:	d005      	beq.n	8004dba <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <OSSchedLock+0x4c>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <OSSchedLock+0x4c>)
 8004db8:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fb fa00 	bl	80001c0 <OS_CPU_SR_Restore>
    }
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200014d9 	.word	0x200014d9
 8004dcc:	20001cc8 	.word	0x20001cc8
 8004dd0:	200014d0 	.word	0x200014d0

08004dd4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <OSSchedUnlock+0x68>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d126      	bne.n	8004e34 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 8004de6:	2040      	movs	r0, #64	; 0x40
 8004de8:	f7fb f9dc 	bl	80001a4 <OS_CPU_SR_Save>
 8004dec:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8004dee:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <OSSchedUnlock+0x6c>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d11b      	bne.n	8004e2e <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <OSSchedUnlock+0x70>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d013      	beq.n	8004e26 <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <OSSchedUnlock+0x70>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <OSSchedUnlock+0x70>)
 8004e08:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <OSSchedUnlock+0x70>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fb f9d4 	bl	80001c0 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8004e18:	f000 fbd6 	bl	80055c8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8004e1c:	e00a      	b.n	8004e34 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fb f9ce 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8004e24:	e006      	b.n	8004e34 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fb f9ca 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8004e2c:	e002      	b.n	8004e34 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fb f9c6 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	200014d9 	.word	0x200014d9
 8004e40:	20001cc8 	.word	0x20001cc8
 8004e44:	200014d0 	.word	0x200014d0

08004e48 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <OSStart+0x38>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d113      	bne.n	8004e7c <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8004e54:	f000 fbfa 	bl	800564c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <OSStart+0x3c>)
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <OSStart+0x40>)
 8004e5e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <OSStart+0x3c>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <OSStart+0x44>)
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <OSStart+0x48>)
 8004e6e:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <OSStart+0x48>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <OSStart+0x4c>)
 8004e76:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8004e78:	f7fb f9ab 	bl	80001d2 <OSStartHighRdy>
    }
}
 8004e7c:	bf00      	nop
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200014d9 	.word	0x200014d9
 8004e84:	200014e2 	.word	0x200014e2
 8004e88:	200017b4 	.word	0x200017b4
 8004e8c:	20002764 	.word	0x20002764
 8004e90:	20001ab0 	.word	0x20001ab0
 8004e94:	20001ccc 	.word	0x20001ccc

08004e98 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8004ea2:	2002      	movs	r0, #2
 8004ea4:	f001 fb0a 	bl	80064bc <OSTimeDly>
    OS_ENTER_CRITICAL();
 8004ea8:	2040      	movs	r0, #64	; 0x40
 8004eaa:	f7fb f97b 	bl	80001a4 <OS_CPU_SR_Save>
 8004eae:	6078      	str	r0, [r7, #4]
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <OSStatInit+0x50>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fb f982 	bl	80001c0 <OS_CPU_SR_Restore>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 8004ebc:	2064      	movs	r0, #100	; 0x64
 8004ebe:	f001 fafd 	bl	80064bc <OSTimeDly>
    OS_ENTER_CRITICAL();
 8004ec2:	2040      	movs	r0, #64	; 0x40
 8004ec4:	f7fb f96e 	bl	80001a4 <OS_CPU_SR_Save>
 8004ec8:	6078      	str	r0, [r7, #4]
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <OSStatInit+0x50>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a07      	ldr	r2, [pc, #28]	; (8004eec <OSStatInit+0x54>)
 8004ed0:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <OSStatInit+0x58>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fb f971 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200014dc 	.word	0x200014dc
 8004eec:	20001a40 	.word	0x20001a40
 8004ef0:	20002760 	.word	0x20002760

08004ef4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8004efe:	f7ff fe0f 	bl	8004b20 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8004f02:	2040      	movs	r0, #64	; 0x40
 8004f04:	f7fb f94e 	bl	80001a4 <OS_CPU_SR_Save>
 8004f08:	6078      	str	r0, [r7, #4]
    OSTime++;
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <OSTimeTick+0x12c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4a43      	ldr	r2, [pc, #268]	; (8005020 <OSTimeTick+0x12c>)
 8004f12:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fb f953 	bl	80001c0 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8004f1a:	4b42      	ldr	r3, [pc, #264]	; (8005024 <OSTimeTick+0x130>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d17a      	bne.n	8005018 <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8004f22:	4b41      	ldr	r3, [pc, #260]	; (8005028 <OSTimeTick+0x134>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d00c      	beq.n	8004f44 <OSTimeTick+0x50>
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	dc10      	bgt.n	8004f50 <OSTimeTick+0x5c>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <OSTimeTick+0x44>
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d003      	beq.n	8004f3e <OSTimeTick+0x4a>
 8004f36:	e00b      	b.n	8004f50 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	72fb      	strb	r3, [r7, #11]
                 break;
 8004f3c:	e00e      	b.n	8004f5c <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8004f3e:	2300      	movs	r3, #0
 8004f40:	72fb      	strb	r3, [r7, #11]
                 break;
 8004f42:	e00b      	b.n	8004f5c <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8004f44:	2301      	movs	r3, #1
 8004f46:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8004f48:	4b37      	ldr	r3, [pc, #220]	; (8005028 <OSTimeTick+0x134>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
                 break;
 8004f4e:	e005      	b.n	8004f5c <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8004f54:	4b34      	ldr	r3, [pc, #208]	; (8005028 <OSTimeTick+0x134>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
                 break;
 8004f5a:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8004f5c:	7afb      	ldrb	r3, [r7, #11]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d059      	beq.n	8005016 <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8004f62:	4b32      	ldr	r3, [pc, #200]	; (800502c <OSTimeTick+0x138>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8004f68:	e04f      	b.n	800500a <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 8004f6a:	2040      	movs	r0, #64	; 0x40
 8004f6c:	f7fb f91a 	bl	80001a4 <OS_CPU_SR_Save>
 8004f70:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d041      	beq.n	8004ffe <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	1e5a      	subs	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d138      	bne.n	8004ffe <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f92:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fa0:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004fb4:	e003      	b.n	8004fbe <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d118      	bne.n	8004ffe <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8004fd2:	4b17      	ldr	r3, [pc, #92]	; (8005030 <OSTimeTick+0x13c>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <OSTimeTick+0x13c>)
 8004fdc:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <OSTimeTick+0x140>)
 8004fe8:	5c9a      	ldrb	r2, [r3, r2]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ff0:	68f9      	ldr	r1, [r7, #12]
 8004ff2:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <OSTimeTick+0x140>)
 8004ffc:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fb f8db 	bl	80001c0 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005010:	2b3f      	cmp	r3, #63	; 0x3f
 8005012:	d1aa      	bne.n	8004f6a <OSTimeTick+0x76>
 8005014:	e000      	b.n	8005018 <OSTimeTick+0x124>
            return;
 8005016:	bf00      	nop
        }
    }
}
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20001cd4 	.word	0x20001cd4
 8005024:	200014d9 	.word	0x200014d9
 8005028:	20001834 	.word	0x20001834
 800502c:	200017b8 	.word	0x200017b8
 8005030:	20001ab8 	.word	0x20001ab8
 8005034:	20001abc 	.word	0x20001abc

08005038 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	460b      	mov	r3, r1
 8005054:	71fb      	strb	r3, [r7, #7]
 8005056:	4613      	mov	r3, r2
 8005058:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	7a9b      	ldrb	r3, [r3, #10]
 800505e:	461a      	mov	r2, r3
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <OS_EventTaskRdy+0xd4>)
 8005062:	5c9b      	ldrb	r3, [r3, r2]
 8005064:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	7adb      	ldrb	r3, [r3, #11]
 800506e:	461a      	mov	r2, r3
 8005070:	4b29      	ldr	r3, [pc, #164]	; (8005118 <OS_EventTaskRdy+0xd4>)
 8005072:	5c9b      	ldrb	r3, [r3, r2]
 8005074:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	7dbb      	ldrb	r3, [r7, #22]
 800507e:	4413      	add	r3, r2
 8005080:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8005082:	7d7b      	ldrb	r3, [r7, #21]
 8005084:	4a25      	ldr	r2, [pc, #148]	; (800511c <OS_EventTaskRdy+0xd8>)
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	4013      	ands	r3, r2
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	79ba      	ldrb	r2, [r7, #6]
 80050b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d113      	bne.n	80050ec <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <OS_EventTaskRdy+0xdc>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <OS_EventTaskRdy+0xdc>)
 80050d4:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	4a12      	ldr	r2, [pc, #72]	; (8005124 <OS_EventTaskRdy+0xe0>)
 80050da:	5cd1      	ldrb	r1, [r2, r3]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	b2d1      	uxtb	r1, r2
 80050e8:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <OS_EventTaskRdy+0xe0>)
 80050ea:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	6938      	ldr	r0, [r7, #16]
 80050f0:	f000 f870 	bl	80051d4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	4619      	mov	r1, r3
 8005102:	6938      	ldr	r0, [r7, #16]
 8005104:	f000 f898 	bl	8005238 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 800510e:	7d7b      	ldrb	r3, [r7, #21]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08009b0c 	.word	0x08009b0c
 800511c:	20002764 	.word	0x20002764
 8005120:	20001ab8 	.word	0x20001ab8
 8005124:	20001abc 	.word	0x20001abc

08005128 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <OS_EventTaskWait+0xa0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8005138:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <OS_EventTaskWait+0xa0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	7ada      	ldrb	r2, [r3, #11]
 8005148:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <OS_EventTaskWait+0xa0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005150:	491d      	ldr	r1, [pc, #116]	; (80051c8 <OS_EventTaskWait+0xa0>)
 8005152:	6809      	ldr	r1, [r1, #0]
 8005154:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8005158:	4313      	orrs	r3, r2
 800515a:	b2da      	uxtb	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	440b      	add	r3, r1
 8005160:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7a9a      	ldrb	r2, [r3, #10]
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <OS_EventTaskWait+0xa0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800516e:	4313      	orrs	r3, r2
 8005170:	b2da      	uxtb	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <OS_EventTaskWait+0xa0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800517e:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	4a12      	ldr	r2, [pc, #72]	; (80051cc <OS_EventTaskWait+0xa4>)
 8005184:	5cd1      	ldrb	r1, [r2, r3]
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <OS_EventTaskWait+0xa0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800518e:	43db      	mvns	r3, r3
 8005190:	b2da      	uxtb	r2, r3
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	400a      	ands	r2, r1
 8005196:	b2d1      	uxtb	r1, r2
 8005198:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <OS_EventTaskWait+0xa4>)
 800519a:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	4a0b      	ldr	r2, [pc, #44]	; (80051cc <OS_EventTaskWait+0xa4>)
 80051a0:	5cd3      	ldrb	r3, [r2, r3]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <OS_EventTaskWait+0xa0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051ae:	43db      	mvns	r3, r3
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <OS_EventTaskWait+0xa8>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	4013      	ands	r3, r2
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <OS_EventTaskWait+0xa8>)
 80051bc:	701a      	strb	r2, [r3, #0]
    }
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	20001ccc 	.word	0x20001ccc
 80051cc:	20001abc 	.word	0x20001abc
 80051d0:	20001ab8 	.word	0x20001ab8

080051d4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051e4:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	4413      	add	r3, r2
 80051ec:	7ad9      	ldrb	r1, [r3, #11]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051f4:	43db      	mvns	r3, r3
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	400a      	ands	r2, r1
 80051fc:	b2d1      	uxtb	r1, r2
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	4413      	add	r3, r2
 8005202:	460a      	mov	r2, r1
 8005204:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	4413      	add	r3, r2
 800520c:	7adb      	ldrb	r3, [r3, #11]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	7a9a      	ldrb	r2, [r3, #10]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800521c:	43db      	mvns	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4013      	ands	r3, r2
 8005222:	b2da      	uxtb	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005248:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005250:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005258:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8005264:	e022      	b.n	80052ac <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	7ad9      	ldrb	r1, [r3, #11]
 800526e:	7b7b      	ldrb	r3, [r7, #13]
 8005270:	43db      	mvns	r3, r3
 8005272:	b2da      	uxtb	r2, r3
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	400a      	ands	r2, r1
 8005278:	b2d1      	uxtb	r1, r2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	460a      	mov	r2, r1
 8005280:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	7adb      	ldrb	r3, [r3, #11]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d108      	bne.n	80052a0 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	7a9a      	ldrb	r2, [r3, #10]
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	43db      	mvns	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	4013      	ands	r3, r2
 800529a:	b2da      	uxtb	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3304      	adds	r3, #4
 80052a4:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1d9      	bne.n	8005266 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	e007      	b.n	80052e2 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	4413      	add	r3, r2
 80052d8:	2200      	movs	r2, #0
 80052da:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	3301      	adds	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b07      	cmp	r3, #7
 80052e6:	d9f4      	bls.n	80052d2 <OS_EventWaitListInit+0x14>
    }
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 80052fa:	21f0      	movs	r1, #240	; 0xf0
 80052fc:	481f      	ldr	r0, [pc, #124]	; (800537c <OS_InitEventList+0x88>)
 80052fe:	f000 f94b 	bl	8005598 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8005302:	2300      	movs	r3, #0
 8005304:	81fb      	strh	r3, [r7, #14]
 8005306:	e01e      	b.n	8005346 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	3301      	adds	r3, #1
 800530c:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800530e:	89fa      	ldrh	r2, [r7, #14]
 8005310:	4613      	mov	r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <OS_InitEventList+0x88>)
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	4613      	mov	r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4413      	add	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <OS_InitEventList+0x88>)
 800532a:	4413      	add	r3, r2
 800532c:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4a10      	ldr	r2, [pc, #64]	; (8005380 <OS_InitEventList+0x8c>)
 800533e:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	3301      	adds	r3, #1
 8005344:	81fb      	strh	r3, [r7, #14]
 8005346:	89fb      	ldrh	r3, [r7, #14]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d9dd      	bls.n	8005308 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 800534c:	89fa      	ldrh	r2, [r7, #14]
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <OS_InitEventList+0x88>)
 8005358:	4413      	add	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <OS_InitEventList+0x8c>)
 800536c:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <OS_InitEventList+0x90>)
 8005370:	4a02      	ldr	r2, [pc, #8]	; (800537c <OS_InitEventList+0x88>)
 8005372:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20001edc 	.word	0x20001edc
 8005380:	08009a18 	.word	0x08009a18
 8005384:	20001cc4 	.word	0x20001cc4

08005388 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <OS_InitMisc+0x50>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <OS_InitMisc+0x54>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <OS_InitMisc+0x58>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <OS_InitMisc+0x5c>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <OS_InitMisc+0x60>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <OS_InitMisc+0x64>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <OS_InitMisc+0x68>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 80053b6:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <OS_InitMisc+0x6c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <OS_InitMisc+0x70>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <OS_InitMisc+0x74>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <OS_InitMisc+0x78>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
#endif
}
 80053ce:	bf00      	nop
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20001cd4 	.word	0x20001cd4
 80053dc:	20001cc8 	.word	0x20001cc8
 80053e0:	200014d0 	.word	0x200014d0
 80053e4:	20001a49 	.word	0x20001a49
 80053e8:	200014d9 	.word	0x200014d9
 80053ec:	20001a38 	.word	0x20001a38
 80053f0:	200014dc 	.word	0x200014dc
 80053f4:	20002864 	.word	0x20002864
 80053f8:	20001a40 	.word	0x20001a40
 80053fc:	20002760 	.word	0x20002760
 8005400:	200014d8 	.word	0x200014d8

08005404 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <OS_InitRdyList+0x48>)
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8005410:	2300      	movs	r3, #0
 8005412:	71fb      	strb	r3, [r7, #7]
 8005414:	e006      	b.n	8005424 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <OS_InitRdyList+0x4c>)
 800541a:	2100      	movs	r1, #0
 800541c:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	3301      	adds	r3, #1
 8005422:	71fb      	strb	r3, [r7, #7]
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b07      	cmp	r3, #7
 8005428:	d9f5      	bls.n	8005416 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <OS_InitRdyList+0x50>)
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <OS_InitRdyList+0x54>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <OS_InitRdyList+0x58>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 800543c:	4b08      	ldr	r3, [pc, #32]	; (8005460 <OS_InitRdyList+0x5c>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	20001ab8 	.word	0x20001ab8
 8005450:	20001abc 	.word	0x20001abc
 8005454:	200017b4 	.word	0x200017b4
 8005458:	200014e2 	.word	0x200014e2
 800545c:	20001ab0 	.word	0x20001ab0
 8005460:	20001ccc 	.word	0x20001ccc

08005464 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800546a:	2303      	movs	r3, #3
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	2300      	movs	r3, #0
 8005470:	9303      	str	r3, [sp, #12]
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <OS_InitTaskIdle+0x3c>)
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	233f      	movs	r3, #63	; 0x3f
 8005482:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <OS_InitTaskIdle+0x40>)
 8005484:	2100      	movs	r1, #0
 8005486:	4808      	ldr	r0, [pc, #32]	; (80054a8 <OS_InitTaskIdle+0x44>)
 8005488:	f000 fcbc 	bl	8005e04 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	461a      	mov	r2, r3
 8005490:	4906      	ldr	r1, [pc, #24]	; (80054ac <OS_InitTaskIdle+0x48>)
 8005492:	203f      	movs	r0, #63	; 0x3f
 8005494:	f000 fe1a 	bl	80060cc <OSTaskNameSet>
#endif
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20001cdc 	.word	0x20001cdc
 80054a4:	20001ed8 	.word	0x20001ed8
 80054a8:	08005695 	.word	0x08005695
 80054ac:	08009a1c 	.word	0x08009a1c

080054b0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 80054b6:	2303      	movs	r3, #3
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <OS_InitTaskStat+0x3c>)
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	233e      	movs	r3, #62	; 0x3e
 80054ce:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <OS_InitTaskStat+0x40>)
 80054d0:	2100      	movs	r1, #0
 80054d2:	4808      	ldr	r0, [pc, #32]	; (80054f4 <OS_InitTaskStat+0x44>)
 80054d4:	f000 fc96 	bl	8005e04 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 80054d8:	1dfb      	adds	r3, r7, #7
 80054da:	461a      	mov	r2, r3
 80054dc:	4906      	ldr	r1, [pc, #24]	; (80054f8 <OS_InitTaskStat+0x48>)
 80054de:	203e      	movs	r0, #62	; 0x3e
 80054e0:	f000 fdf4 	bl	80060cc <OSTaskNameSet>
#endif
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20001838 	.word	0x20001838
 80054f0:	20001a34 	.word	0x20001a34
 80054f4:	080056c5 	.word	0x080056c5
 80054f8:	08009a2c 	.word	0x08009a2c

080054fc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8005502:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8005506:	481f      	ldr	r0, [pc, #124]	; (8005584 <OS_InitTCBList+0x88>)
 8005508:	f000 f846 	bl	8005598 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800550c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005510:	481d      	ldr	r0, [pc, #116]	; (8005588 <OS_InitTCBList+0x8c>)
 8005512:	f000 f841 	bl	8005598 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e019      	b.n	8005550 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	3301      	adds	r3, #1
 8005520:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	2258      	movs	r2, #88	; 0x58
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <OS_InitTCBList+0x88>)
 800552c:	4413      	add	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2258      	movs	r2, #88	; 0x58
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	4a12      	ldr	r2, [pc, #72]	; (8005584 <OS_InitTCBList+0x88>)
 800553a:	4413      	add	r3, r2
 800553c:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a11      	ldr	r2, [pc, #68]	; (800558c <OS_InitTCBList+0x90>)
 8005548:	651a      	str	r2, [r3, #80]	; 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	3301      	adds	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b14      	cmp	r3, #20
 8005554:	d9e2      	bls.n	800551c <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2258      	movs	r2, #88	; 0x58
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <OS_InitTCBList+0x88>)
 8005560:	4413      	add	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4a07      	ldr	r2, [pc, #28]	; (800558c <OS_InitTCBList+0x90>)
 800556e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <OS_InitTCBList+0x94>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <OS_InitTCBList+0x98>)
 8005578:	4a02      	ldr	r2, [pc, #8]	; (8005584 <OS_InitTCBList+0x88>)
 800557a:	601a      	str	r2, [r3, #0]
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20001fcc 	.word	0x20001fcc
 8005588:	20002764 	.word	0x20002764
 800558c:	08009a18 	.word	0x08009a18
 8005590:	200017b8 	.word	0x200017b8
 8005594:	20001a44 	.word	0x20001a44

08005598 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80055a4:	e007      	b.n	80055b6 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
        size--;
 80055b0:	887b      	ldrh	r3, [r7, #2]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f4      	bne.n	80055a6 <OS_MemClr+0xe>
    }
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80055d2:	2040      	movs	r0, #64	; 0x40
 80055d4:	f7fa fde6 	bl	80001a4 <OS_CPU_SR_Save>
 80055d8:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <OS_Sched+0x68>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d11f      	bne.n	8005622 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 80055e2:	4b14      	ldr	r3, [pc, #80]	; (8005634 <OS_Sched+0x6c>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11b      	bne.n	8005622 <OS_Sched+0x5a>
            OS_SchedNew();
 80055ea:	f000 f82f 	bl	800564c <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <OS_Sched+0x70>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <OS_Sched+0x74>)
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	4a11      	ldr	r2, [pc, #68]	; (8005640 <OS_Sched+0x78>)
 80055fc:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80055fe:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <OS_Sched+0x70>)
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <OS_Sched+0x7c>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d00b      	beq.n	8005622 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <OS_Sched+0x78>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005610:	3201      	adds	r2, #1
 8005612:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <OS_Sched+0x80>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <OS_Sched+0x80>)
 800561c:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 800561e:	f7fa fe18 	bl	8000252 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fa fdcc 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20001cc8 	.word	0x20001cc8
 8005634:	200014d0 	.word	0x200014d0
 8005638:	200014e2 	.word	0x200014e2
 800563c:	20002764 	.word	0x20002764
 8005640:	20001ab0 	.word	0x20001ab0
 8005644:	200017b4 	.word	0x200017b4
 8005648:	20001a38 	.word	0x20001a38

0800564c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <OS_SchedNew+0x38>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <OS_SchedNew+0x3c>)
 800565a:	5c9b      	ldrb	r3, [r3, r2]
 800565c:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	b2da      	uxtb	r2, r3
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	4909      	ldr	r1, [pc, #36]	; (800568c <OS_SchedNew+0x40>)
 8005668:	5ccb      	ldrb	r3, [r1, r3]
 800566a:	4619      	mov	r1, r3
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <OS_SchedNew+0x3c>)
 800566e:	5c5b      	ldrb	r3, [r3, r1]
 8005670:	4413      	add	r3, r2
 8005672:	b2da      	uxtb	r2, r3
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <OS_SchedNew+0x44>)
 8005676:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20001ab8 	.word	0x20001ab8
 8005688:	08009b0c 	.word	0x08009b0c
 800568c:	20001abc 	.word	0x20001abc
 8005690:	200014e2 	.word	0x200014e2

08005694 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80056a0:	2040      	movs	r0, #64	; 0x40
 80056a2:	f7fa fd7f 	bl	80001a4 <OS_CPU_SR_Save>
 80056a6:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <OS_TaskIdle+0x2c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <OS_TaskIdle+0x2c>)
 80056b0:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7fa fd84 	bl	80001c0 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 80056b8:	f7ff f97e 	bl	80049b8 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 80056bc:	e7f0      	b.n	80056a0 <OS_TaskIdle+0xc>
 80056be:	bf00      	nop
 80056c0:	200014dc 	.word	0x200014dc

080056c4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80056d0:	e002      	b.n	80056d8 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80056d2:	20c8      	movs	r0, #200	; 0xc8
 80056d4:	f000 fef2 	bl	80064bc <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 80056d8:	4b30      	ldr	r3, [pc, #192]	; (800579c <OS_TaskStat+0xd8>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f8      	beq.n	80056d2 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 80056e0:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <OS_TaskStat+0xdc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <OS_TaskStat+0xe0>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <OS_TaskStat+0xdc>)
 80056ee:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80056f0:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <OS_TaskStat+0xdc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 80056f8:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <OS_TaskStat+0xe4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 80056fe:	20ff      	movs	r0, #255	; 0xff
 8005700:	f000 fe28 	bl	8006354 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8005704:	2040      	movs	r0, #64	; 0x40
 8005706:	f7fa fd4d 	bl	80001a4 <OS_CPU_SR_Save>
 800570a:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <OS_TaskStat+0xdc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2264      	movs	r2, #100	; 0x64
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	4a25      	ldr	r2, [pc, #148]	; (80057ac <OS_TaskStat+0xe8>)
 8005718:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7fa fd50 	bl	80001c0 <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8005720:	2001      	movs	r0, #1
 8005722:	f000 fecb 	bl	80064bc <OSTimeDly>

        OS_ENTER_CRITICAL();
 8005726:	2040      	movs	r0, #64	; 0x40
 8005728:	f7fa fd3c 	bl	80001a4 <OS_CPU_SR_Save>
 800572c:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 800572e:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <OS_TaskStat+0xe8>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7fa fd43 	bl	80001c0 <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 800573a:	2064      	movs	r0, #100	; 0x64
 800573c:	f000 febe 	bl	80064bc <OSTimeDly>

        OS_ENTER_CRITICAL();
 8005740:	2040      	movs	r0, #64	; 0x40
 8005742:	f7fa fd2f 	bl	80001a4 <OS_CPU_SR_Save>
 8005746:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 8005748:	4b18      	ldr	r3, [pc, #96]	; (80057ac <OS_TaskStat+0xe8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <OS_TaskStat+0xec>)
 800574e:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7fa fd35 	bl	80001c0 <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 8005756:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <OS_TaskStat+0xec>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <OS_TaskStat+0xdc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005768:	b2db      	uxtb	r3, r3
 800576a:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 800576c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005770:	2b00      	cmp	r3, #0
 8005772:	db03      	blt.n	800577c <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 8005774:	7afa      	ldrb	r2, [r7, #11]
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <OS_TaskStat+0xe4>)
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e00a      	b.n	8005792 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <OS_TaskStat+0xe4>)
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <OS_TaskStat+0xec>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <OS_TaskStat+0xe0>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <OS_TaskStat+0xdc>)
 8005790:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8005792:	f7ff f922 	bl	80049da <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8005796:	f000 f80d 	bl	80057b4 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 800579a:	e7c1      	b.n	8005720 <OS_TaskStat+0x5c>
 800579c:	20002760 	.word	0x20002760
 80057a0:	20001a40 	.word	0x20001a40
 80057a4:	51eb851f 	.word	0x51eb851f
 80057a8:	20001a48 	.word	0x20001a48
 80057ac:	200014dc 	.word	0x200014dc
 80057b0:	20002864 	.word	0x20002864

080057b4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
 80057be:	e023      	b.n	8005808 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 80057c0:	463a      	mov	r2, r7
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fd56 	bl	8006278 <OSTaskStkChk>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 80057d0:	7bbb      	ldrb	r3, [r7, #14]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d115      	bne.n	8005802 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <OS_TaskStatStkChk+0x64>)
 80057da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057de:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d00a      	beq.n	8005802 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	64da      	str	r2, [r3, #76]	; 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3301      	adds	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b3f      	cmp	r3, #63	; 0x3f
 800580c:	d9d8      	bls.n	80057c0 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20002764 	.word	0x20002764

0800581c <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	461a      	mov	r2, r3
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
 800582c:	4613      	mov	r3, r2
 800582e:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8005830:	2300      	movs	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8005834:	2040      	movs	r0, #64	; 0x40
 8005836:	f7fa fcb5 	bl	80001a4 <OS_CPU_SR_Save>
 800583a:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 800583c:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <OS_TCBInit+0x1cc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80c7 	beq.w	80059d8 <OS_TCBInit+0x1bc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4a66      	ldr	r2, [pc, #408]	; (80059e8 <OS_TCBInit+0x1cc>)
 8005850:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8005852:	69b8      	ldr	r0, [r7, #24]
 8005854:	f7fa fcb4 	bl	80001c0 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	7bfa      	ldrb	r2, [r7, #15]
 8005862:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005880:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005886:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005892:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	89ba      	ldrh	r2, [r7, #12]
 8005898:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	08db      	lsrs	r3, r3, #3
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c2:	461a      	mov	r2, r3
 80058c4:	2301      	movs	r3, #1
 80058c6:	4093      	lsls	r3, r2
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80058d6:	461a      	mov	r2, r3
 80058d8:	2301      	movs	r3, #1
 80058da:	4093      	lsls	r3, r2
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2200      	movs	r2, #0
 8005900:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	649a      	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4a33      	ldr	r2, [pc, #204]	; (80059ec <OS_TCBInit+0x1d0>)
 800591e:	651a      	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e009      	b.n	800593a <OS_TCBInit+0x11e>
            ptcb->OSTCBRegTbl[i] = 0u;
 8005926:	7ffb      	ldrb	r3, [r7, #31]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	3314      	adds	r3, #20
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	2200      	movs	r2, #0
 8005932:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8005934:	7ffb      	ldrb	r3, [r7, #31]
 8005936:	3301      	adds	r3, #1
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f2      	beq.n	8005926 <OS_TCBInit+0x10a>
        }
#endif

        OSTCBInitHook(ptcb);
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	f7ff f8e1 	bl	8004b08 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8005946:	2040      	movs	r0, #64	; 0x40
 8005948:	f7fa fc2c 	bl	80001a4 <OS_CPU_SR_Save>
 800594c:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	4927      	ldr	r1, [pc, #156]	; (80059f0 <OS_TCBInit+0x1d4>)
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7fa fc31 	bl	80001c0 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f7ff f814 	bl	800498c <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 8005964:	2040      	movs	r0, #64	; 0x40
 8005966:	f7fa fc1d 	bl	80001a4 <OS_CPU_SR_Save>
 800596a:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <OS_TCBInit+0x1d8>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2200      	movs	r2, #0
 8005978:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 800597a:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <OS_TCBInit+0x1d8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <OS_TCBInit+0x16e>
            OSTCBList->OSTCBPrev = ptcb;
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <OS_TCBInit+0x1d8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <OS_TCBInit+0x1d8>)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8005996:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <OS_TCBInit+0x1dc>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	b2da      	uxtb	r2, r3
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <OS_TCBInit+0x1dc>)
 80059a0:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059a8:	461a      	mov	r2, r3
 80059aa:	4b14      	ldr	r3, [pc, #80]	; (80059fc <OS_TCBInit+0x1e0>)
 80059ac:	5c9a      	ldrb	r2, [r3, r2]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <OS_TCBInit+0x1e0>)
 80059c0:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 80059c2:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <OS_TCBInit+0x1e4>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <OS_TCBInit+0x1e4>)
 80059cc:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 80059ce:	69b8      	ldr	r0, [r7, #24]
 80059d0:	f7fa fbf6 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 80059d4:	2300      	movs	r3, #0
 80059d6:	e003      	b.n	80059e0 <OS_TCBInit+0x1c4>
    }
    OS_EXIT_CRITICAL();
 80059d8:	69b8      	ldr	r0, [r7, #24]
 80059da:	f7fa fbf1 	bl	80001c0 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 80059de:	2342      	movs	r3, #66	; 0x42
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20001a44 	.word	0x20001a44
 80059ec:	08009a18 	.word	0x08009a18
 80059f0:	20002764 	.word	0x20002764
 80059f4:	200017b8 	.word	0x200017b8
 80059f8:	20001ab8 	.word	0x20001ab8
 80059fc:	20001abc 	.word	0x20001abc
 8005a00:	20001a49 	.word	0x20001a49

08005a04 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8005a0a:	2150      	movs	r1, #80	; 0x50
 8005a0c:	481b      	ldr	r0, [pc, #108]	; (8005a7c <OS_FlagInit+0x78>)
 8005a0e:	f7ff fdc3 	bl	8005598 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8005a12:	2300      	movs	r3, #0
 8005a14:	81fb      	strh	r3, [r7, #14]
 8005a16:	e018      	b.n	8005a4a <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8005a18:	89fb      	ldrh	r3, [r7, #14]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8005a1e:	89fb      	ldrh	r3, [r7, #14]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <OS_FlagInit+0x78>)
 8005a24:	4413      	add	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <OS_FlagInit+0x78>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <OS_FlagInit+0x7c>)
 8005a42:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	3301      	adds	r3, #1
 8005a48:	81fb      	strh	r3, [r7, #14]
 8005a4a:	89fb      	ldrh	r3, [r7, #14]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d9e3      	bls.n	8005a18 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8005a50:	89fb      	ldrh	r3, [r7, #14]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <OS_FlagInit+0x78>)
 8005a56:	4413      	add	r3, r2
 8005a58:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <OS_FlagInit+0x7c>)
 8005a6a:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <OS_FlagInit+0x80>)
 8005a6e:	4a03      	ldr	r2, [pc, #12]	; (8005a7c <OS_FlagInit+0x78>)
 8005a70:	601a      	str	r2, [r3, #0]
#endif
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200014e4 	.word	0x200014e4
 8005a80:	08009a3c 	.word	0x08009a3c
 8005a84:	2000275c 	.word	0x2000275c

08005a88 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00c      	beq.n	8005ace <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	e008      	b.n	8005ace <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8005aea:	2178      	movs	r1, #120	; 0x78
 8005aec:	481a      	ldr	r0, [pc, #104]	; (8005b58 <OS_MemInit+0x74>)
 8005aee:	f7ff fd53 	bl	8005598 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8005af2:	2300      	movs	r3, #0
 8005af4:	80fb      	strh	r3, [r7, #6]
 8005af6:	e017      	b.n	8005b28 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <OS_MemInit+0x74>)
 8005b04:	4413      	add	r3, r2
 8005b06:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4a10      	ldr	r2, [pc, #64]	; (8005b58 <OS_MemInit+0x74>)
 8005b16:	441a      	add	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4a0f      	ldr	r2, [pc, #60]	; (8005b5c <OS_MemInit+0x78>)
 8005b20:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	3301      	adds	r3, #1
 8005b26:	80fb      	strh	r3, [r7, #6]
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d9e4      	bls.n	8005af8 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	4613      	mov	r3, r2
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4413      	add	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4a07      	ldr	r2, [pc, #28]	; (8005b58 <OS_MemInit+0x74>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	4a05      	ldr	r2, [pc, #20]	; (8005b5c <OS_MemInit+0x78>)
 8005b48:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <OS_MemInit+0x7c>)
 8005b4c:	4a02      	ldr	r2, [pc, #8]	; (8005b58 <OS_MemInit+0x74>)
 8005b4e:	601a      	str	r2, [r3, #0]
#endif
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	200017bc 	.word	0x200017bc
 8005b5c:	08009a40 	.word	0x08009a40
 8005b60:	20001a4c 	.word	0x20001a4c

08005b64 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8005b6a:	2160      	movs	r1, #96	; 0x60
 8005b6c:	4819      	ldr	r0, [pc, #100]	; (8005bd4 <OS_QInit+0x70>)
 8005b6e:	f7ff fd13 	bl	8005598 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8005b72:	2300      	movs	r3, #0
 8005b74:	81fb      	strh	r3, [r7, #14]
 8005b76:	e018      	b.n	8005baa <OS_QInit+0x46>
        ix_next = ix + 1u;
 8005b78:	89fb      	ldrh	r3, [r7, #14]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 8005b7e:	89fa      	ldrh	r2, [r7, #14]
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <OS_QInit+0x70>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	4613      	mov	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	4413      	add	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <OS_QInit+0x70>)
 8005b9a:	4413      	add	r3, r2
 8005b9c:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8005ba4:	89fb      	ldrh	r3, [r7, #14]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	81fb      	strh	r3, [r7, #14]
 8005baa:	89fb      	ldrh	r3, [r7, #14]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d9e3      	bls.n	8005b78 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 8005bb0:	89fa      	ldrh	r2, [r7, #14]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4a06      	ldr	r2, [pc, #24]	; (8005bd4 <OS_QInit+0x70>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8005bc6:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <OS_QInit+0x74>)
 8005bc8:	4a02      	ldr	r2, [pc, #8]	; (8005bd4 <OS_QInit+0x70>)
 8005bca:	601a      	str	r2, [r3, #0]
#endif
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20001a50 	.word	0x20001a50
 8005bd8:	20001ab4 	.word	0x20001ab4

08005bdc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <OSSemCreate+0x70>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e025      	b.n	8005c42 <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 8005bf6:	2040      	movs	r0, #64	; 0x40
 8005bf8:	f7fa fad4 	bl	80001a4 <OS_CPU_SR_Save>
 8005bfc:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8005bfe:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <OSSemCreate+0x74>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <OSSemCreate+0x74>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <OSSemCreate+0x74>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <OSSemCreate+0x74>)
 8005c14:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7fa fad2 	bl	80001c0 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2203      	movs	r2, #3
 8005c26:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <OSSemCreate+0x78>)
 8005c38:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8005c3a:	68b8      	ldr	r0, [r7, #8]
 8005c3c:	f7ff fb3f 	bl	80052be <OS_EventWaitListInit>
        
        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8005c40:	68bb      	ldr	r3, [r7, #8]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20001cc8 	.word	0x20001cc8
 8005c50:	20001cc4 	.word	0x20001cc4
 8005c54:	08009a44 	.word	0x08009a44

08005c58 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d103      	bne.n	8005c76 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	701a      	strb	r2, [r3, #0]
        return;
 8005c74:	e07c      	b.n	8005d70 <OSSemPend+0x118>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d003      	beq.n	8005c86 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005c84:	e074      	b.n	8005d70 <OSSemPend+0x118>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8005c86:	4b3c      	ldr	r3, [pc, #240]	; (8005d78 <OSSemPend+0x120>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005c94:	e06c      	b.n	8005d70 <OSSemPend+0x118>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8005c96:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <OSSemPend+0x124>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	220d      	movs	r2, #13
 8005ca2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005ca4:	e064      	b.n	8005d70 <OSSemPend+0x118>
    }
    OS_ENTER_CRITICAL();
 8005ca6:	2040      	movs	r0, #64	; 0x40
 8005ca8:	f7fa fa7c 	bl	80001a4 <OS_CPU_SR_Save>
 8005cac:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	891b      	ldrh	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00c      	beq.n	8005cd0 <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	891b      	ldrh	r3, [r3, #8]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8005cc2:	6978      	ldr	r0, [r7, #20]
 8005cc4:	f7fa fa7c 	bl	80001c0 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005cce:	e04f      	b.n	8005d70 <OSSemPend+0x118>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <OSSemPend+0x128>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005cd8:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <OSSemPend+0x128>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8005ce6:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <OSSemPend+0x128>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8005cf0:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <OSSemPend+0x128>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fa15 	bl	8005128 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8005cfe:	6978      	ldr	r0, [r7, #20]
 8005d00:	f7fa fa5e 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8005d04:	f7ff fc60 	bl	80055c8 <OS_Sched>
    OS_ENTER_CRITICAL();
 8005d08:	2040      	movs	r0, #64	; 0x40
 8005d0a:	f7fa fa4b 	bl	80001a4 <OS_CPU_SR_Save>
 8005d0e:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <OSSemPend+0x128>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <OSSemPend+0xca>
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d004      	beq.n	8005d2a <OSSemPend+0xd2>
 8005d20:	e007      	b.n	8005d32 <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
             break;
 8005d28:	e00d      	b.n	8005d46 <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	220e      	movs	r2, #14
 8005d2e:	701a      	strb	r2, [r3, #0]
             break;
 8005d30:	e009      	b.n	8005d46 <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <OSSemPend+0x128>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fa4b 	bl	80051d4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	220a      	movs	r2, #10
 8005d42:	701a      	strb	r2, [r3, #0]
             break;
 8005d44:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <OSSemPend+0x128>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <OSSemPend+0x128>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8005d5a:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <OSSemPend+0x128>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <OSSemPend+0x128>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f7fa fa28 	bl	80001c0 <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20001cc8 	.word	0x20001cc8
 8005d7c:	200014d0 	.word	0x200014d0
 8005d80:	20001ccc 	.word	0x20001ccc

08005d84 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8005d96:	2304      	movs	r3, #4
 8005d98:	e02f      	b.n	8005dfa <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d001      	beq.n	8005da6 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8005da2:	2301      	movs	r3, #1
 8005da4:	e029      	b.n	8005dfa <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 8005da6:	2040      	movs	r0, #64	; 0x40
 8005da8:	f7fa f9fc 	bl	80001a4 <OS_CPU_SR_Save>
 8005dac:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7a9b      	ldrb	r3, [r3, #10]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8005db6:	2300      	movs	r3, #0
 8005db8:	2201      	movs	r2, #1
 8005dba:	2100      	movs	r1, #0
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff f941 	bl	8005044 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7fa f9fc 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8005dc8:	f7ff fbfe 	bl	80055c8 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e014      	b.n	8005dfa <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	891b      	ldrh	r3, [r3, #8]
 8005dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00a      	beq.n	8005df2 <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	891b      	ldrh	r3, [r3, #8]
 8005de0:	3301      	adds	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7fa f9e9 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8005dee:	2300      	movs	r3, #0
 8005df0:	e003      	b.n	8005dfa <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7fa f9e4 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8005df8:	2333      	movs	r3, #51	; 0x33
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08c      	sub	sp, #48	; 0x30
 8005e08:	af04      	add	r7, sp, #16
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	2b3f      	cmp	r3, #63	; 0x3f
 8005e1a:	d901      	bls.n	8005e20 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8005e1c:	232a      	movs	r3, #42	; 0x2a
 8005e1e:	e052      	b.n	8005ec6 <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 8005e20:	2040      	movs	r0, #64	; 0x40
 8005e22:	f7fa f9bf 	bl	80001a4 <OS_CPU_SR_Save>
 8005e26:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8005e28:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <OSTaskCreateExt+0xcc>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 8005e30:	69f8      	ldr	r0, [r7, #28]
 8005e32:	f7fa f9c5 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8005e36:	233c      	movs	r3, #60	; 0x3c
 8005e38:	e045      	b.n	8005ec6 <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	4a25      	ldr	r2, [pc, #148]	; (8005ed4 <OSTaskCreateExt+0xd0>)
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d13b      	bne.n	8005ebe <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <OSTaskCreateExt+0xd0>)
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8005e50:	69f8      	ldr	r0, [r7, #28]
 8005e52:	f7fa f9b5 	bl	80001c0 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8005e56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e5e:	f000 fb0b 	bl	8006478 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8005e62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7fe fdbd 	bl	80049e8 <OSTaskStkInit>
 8005e6e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8005e70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e72:	78f8      	ldrb	r0, [r7, #3]
 8005e74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e76:	9302      	str	r3, [sp, #8]
 8005e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	f7ff fcc9 	bl	800581c <OS_TCBInit>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <OSTaskCreateExt+0xd4>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d10e      	bne.n	8005eba <OSTaskCreateExt+0xb6>
                OS_Sched();
 8005e9c:	f7ff fb94 	bl	80055c8 <OS_Sched>
 8005ea0:	e00b      	b.n	8005eba <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 8005ea2:	2040      	movs	r0, #64	; 0x40
 8005ea4:	f7fa f97e 	bl	80001a4 <OS_CPU_SR_Save>
 8005ea8:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <OSTaskCreateExt+0xd0>)
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8005eb4:	69f8      	ldr	r0, [r7, #28]
 8005eb6:	f7fa f983 	bl	80001c0 <OS_CPU_SR_Restore>
        }
        return (err);
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	e003      	b.n	8005ec6 <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 8005ebe:	69f8      	ldr	r0, [r7, #28]
 8005ec0:	f7fa f97e 	bl	80001c0 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8005ec4:	2328      	movs	r3, #40	; 0x28
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20001cc8 	.word	0x20001cc8
 8005ed4:	20002764 	.word	0x20002764
 8005ed8:	200014d9 	.word	0x200014d9

08005edc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8005eea:	4b6d      	ldr	r3, [pc, #436]	; (80060a0 <OSTaskDel+0x1c4>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8005ef2:	2340      	movs	r3, #64	; 0x40
 8005ef4:	e0d0      	b.n	8006098 <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8005efa:	d101      	bne.n	8005f00 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8005efc:	233e      	movs	r3, #62	; 0x3e
 8005efe:	e0cb      	b.n	8006098 <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	2b3e      	cmp	r3, #62	; 0x3e
 8005f04:	d904      	bls.n	8005f10 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	2bff      	cmp	r3, #255	; 0xff
 8005f0a:	d001      	beq.n	8005f10 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8005f0c:	232a      	movs	r3, #42	; 0x2a
 8005f0e:	e0c3      	b.n	8006098 <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8005f10:	2040      	movs	r0, #64	; 0x40
 8005f12:	f7fa f947 	bl	80001a4 <OS_CPU_SR_Save>
 8005f16:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	2bff      	cmp	r3, #255	; 0xff
 8005f1c:	d104      	bne.n	8005f28 <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8005f1e:	4b61      	ldr	r3, [pc, #388]	; (80060a4 <OSTaskDel+0x1c8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005f26:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	4a5f      	ldr	r2, [pc, #380]	; (80060a8 <OSTaskDel+0x1cc>)
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 8005f38:	6978      	ldr	r0, [r7, #20]
 8005f3a:	f7fa f941 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005f3e:	2343      	movs	r3, #67	; 0x43
 8005f40:	e0aa      	b.n	8006098 <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d104      	bne.n	8005f52 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 8005f48:	6978      	ldr	r0, [r7, #20]
 8005f4a:	f7fa f939 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8005f4e:	233d      	movs	r3, #61	; 0x3d
 8005f50:	e0a2      	b.n	8006098 <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4b54      	ldr	r3, [pc, #336]	; (80060ac <OSTaskDel+0x1d0>)
 8005f5c:	5c9a      	ldrb	r2, [r3, r2]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f64:	43db      	mvns	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	6939      	ldr	r1, [r7, #16]
 8005f6a:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8005f6e:	4013      	ands	r3, r2
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <OSTaskDel+0x1d0>)
 8005f74:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4b4b      	ldr	r3, [pc, #300]	; (80060ac <OSTaskDel+0x1d0>)
 8005f80:	5c9b      	ldrb	r3, [r3, r2]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	4b47      	ldr	r3, [pc, #284]	; (80060b0 <OSTaskDel+0x1d4>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	4013      	ands	r3, r2
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	4b45      	ldr	r3, [pc, #276]	; (80060b0 <OSTaskDel+0x1d4>)
 8005f9a:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6938      	ldr	r0, [r7, #16]
 8005fac:	f7ff f912 	bl	80051d4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6938      	ldr	r0, [r7, #16]
 8005fc0:	f7ff f93a 	bl	8005238 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff fd59 	bl	8005a88 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8005fec:	4b31      	ldr	r3, [pc, #196]	; (80060b4 <OSTaskDel+0x1d8>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2bff      	cmp	r3, #255	; 0xff
 8005ff2:	d005      	beq.n	8006000 <OSTaskDel+0x124>
        OSLockNesting++;
 8005ff4:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <OSTaskDel+0x1d8>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	4b2d      	ldr	r3, [pc, #180]	; (80060b4 <OSTaskDel+0x1d8>)
 8005ffe:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8006000:	6978      	ldr	r0, [r7, #20]
 8006002:	f7fa f8dd 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8006006:	f7ff f817 	bl	8005038 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 800600a:	2040      	movs	r0, #64	; 0x40
 800600c:	f7fa f8ca 	bl	80001a4 <OS_CPU_SR_Save>
 8006010:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8006012:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <OSTaskDel+0x1d8>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <OSTaskDel+0x14a>
        OSLockNesting--;
 800601a:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <OSTaskDel+0x1d8>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	3b01      	subs	r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <OSTaskDel+0x1d8>)
 8006024:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8006026:	6938      	ldr	r0, [r7, #16]
 8006028:	f7fe fcbb 	bl	80049a2 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 800602c:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <OSTaskDel+0x1dc>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	3b01      	subs	r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <OSTaskDel+0x1dc>)
 8006036:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <OSTaskDel+0x1cc>)
 800603c:	2100      	movs	r1, #0
 800603e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d108      	bne.n	800605c <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4a19      	ldr	r2, [pc, #100]	; (80060bc <OSTaskDel+0x1e0>)
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e009      	b.n	8006070 <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	6952      	ldr	r2, [r2, #20]
 8006064:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	6992      	ldr	r2, [r2, #24]
 800606e:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8006070:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <OSTaskDel+0x1e4>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8006078:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <OSTaskDel+0x1e4>)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4a10      	ldr	r2, [pc, #64]	; (80060c4 <OSTaskDel+0x1e8>)
 8006082:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 8006084:	6978      	ldr	r0, [r7, #20]
 8006086:	f7fa f89b 	bl	80001c0 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <OSTaskDel+0x1ec>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8006092:	f7ff fa99 	bl	80055c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20001cc8 	.word	0x20001cc8
 80060a4:	20001ccc 	.word	0x20001ccc
 80060a8:	20002764 	.word	0x20002764
 80060ac:	20001abc 	.word	0x20001abc
 80060b0:	20001ab8 	.word	0x20001ab8
 80060b4:	200014d0 	.word	0x200014d0
 80060b8:	20001a49 	.word	0x20001a49
 80060bc:	200017b8 	.word	0x200017b8
 80060c0:	20001a44 	.word	0x20001a44
 80060c4:	08009a48 	.word	0x08009a48
 80060c8:	200014d9 	.word	0x200014d9

080060cc <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b3f      	cmp	r3, #63	; 0x3f
 80060e2:	d906      	bls.n	80060f2 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2bff      	cmp	r3, #255	; 0xff
 80060e8:	d003      	beq.n	80060f2 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	222a      	movs	r2, #42	; 0x2a
 80060ee:	701a      	strb	r2, [r3, #0]
            return;
 80060f0:	e03c      	b.n	800616c <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	220c      	movs	r2, #12
 80060fc:	701a      	strb	r2, [r3, #0]
        return;
 80060fe:	e035      	b.n	800616c <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8006100:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <OSTaskNameSet+0xa8>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2212      	movs	r2, #18
 800610c:	701a      	strb	r2, [r3, #0]
        return;
 800610e:	e02d      	b.n	800616c <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8006110:	2040      	movs	r0, #64	; 0x40
 8006112:	f7fa f847 	bl	80001a4 <OS_CPU_SR_Save>
 8006116:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2bff      	cmp	r3, #255	; 0xff
 800611c:	d104      	bne.n	8006128 <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 800611e:	4b16      	ldr	r3, [pc, #88]	; (8006178 <OSTaskNameSet+0xac>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006126:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	4a14      	ldr	r2, [pc, #80]	; (800617c <OSTaskNameSet+0xb0>)
 800612c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006130:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8006138:	6978      	ldr	r0, [r7, #20]
 800613a:	f7fa f841 	bl	80001c0 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2243      	movs	r2, #67	; 0x43
 8006142:	701a      	strb	r2, [r3, #0]
        return;
 8006144:	e012      	b.n	800616c <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d106      	bne.n	800615a <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 800614c:	6978      	ldr	r0, [r7, #20]
 800614e:	f7fa f837 	bl	80001c0 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2243      	movs	r2, #67	; 0x43
 8006156:	701a      	strb	r2, [r3, #0]
        return;
 8006158:	e008      	b.n	800616c <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	651a      	str	r2, [r3, #80]	; 0x50
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8006160:	6978      	ldr	r0, [r7, #20]
 8006162:	f7fa f82d 	bl	80001c0 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
}
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20001cc8 	.word	0x20001cc8
 8006178:	20001ccc 	.word	0x20001ccc
 800617c:	20002764 	.word	0x20002764

08006180 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	2b3e      	cmp	r3, #62	; 0x3e
 8006192:	d901      	bls.n	8006198 <OSTaskResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8006194:	232a      	movs	r3, #42	; 0x2a
 8006196:	e063      	b.n	8006260 <OSTaskResume+0xe0>
    }
#endif
    OS_ENTER_CRITICAL();
 8006198:	2040      	movs	r0, #64	; 0x40
 800619a:	f7fa f803 	bl	80001a4 <OS_CPU_SR_Save>
 800619e:	60f8      	str	r0, [r7, #12]
    ptcb = OSTCBPrioTbl[prio];
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	4a31      	ldr	r2, [pc, #196]	; (8006268 <OSTaskResume+0xe8>)
 80061a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a8:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <OSTaskResume+0x3a>
        OS_EXIT_CRITICAL();
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7fa f805 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
 80061b6:	2346      	movs	r3, #70	; 0x46
 80061b8:	e052      	b.n	8006260 <OSTaskResume+0xe0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d104      	bne.n	80061ca <OSTaskResume+0x4a>
        OS_EXIT_CRITICAL();
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7f9 fffd 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80061c6:	2343      	movs	r3, #67	; 0x43
 80061c8:	e04a      	b.n	8006260 <OSTaskResume+0xe0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d03f      	beq.n	8006258 <OSTaskResume+0xd8>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061de:	f023 0308 	bic.w	r3, r3, #8
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061f0:	f003 0337 	and.w	r3, r3, #55	; 0x37
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d12a      	bne.n	800624e <OSTaskResume+0xce>
            if (ptcb->OSTCBDly == 0u) {
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d122      	bne.n	8006246 <OSTaskResume+0xc6>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <OSTaskResume+0xec>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	4313      	orrs	r3, r2
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <OSTaskResume+0xec>)
 8006210:	701a      	strb	r2, [r3, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006218:	461a      	mov	r2, r3
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <OSTaskResume+0xf0>)
 800621c:	5c9a      	ldrb	r2, [r3, r2]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800622a:	4313      	orrs	r3, r2
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <OSTaskResume+0xf0>)
 8006230:	545a      	strb	r2, [r3, r1]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7f9 ffc4 	bl	80001c0 <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
 8006238:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <OSTaskResume+0xf4>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d109      	bne.n	8006254 <OSTaskResume+0xd4>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
 8006240:	f7ff f9c2 	bl	80055c8 <OS_Sched>
 8006244:	e006      	b.n	8006254 <OSTaskResume+0xd4>
                }
            } else {
                OS_EXIT_CRITICAL();
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7f9 ffba 	bl	80001c0 <OS_CPU_SR_Restore>
 800624c:	e002      	b.n	8006254 <OSTaskResume+0xd4>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7f9 ffb6 	bl	80001c0 <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
 8006254:	2300      	movs	r3, #0
 8006256:	e003      	b.n	8006260 <OSTaskResume+0xe0>
    }
    OS_EXIT_CRITICAL();
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7f9 ffb1 	bl	80001c0 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 800625e:	2344      	movs	r3, #68	; 0x44
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20002764 	.word	0x20002764
 800626c:	20001ab8 	.word	0x20001ab8
 8006270:	20001abc 	.word	0x20001abc
 8006274:	200014d9 	.word	0x200014d9

08006278 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	6039      	str	r1, [r7, #0]
 8006282:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b3f      	cmp	r3, #63	; 0x3f
 800628c:	d904      	bls.n	8006298 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	2bff      	cmp	r3, #255	; 0xff
 8006292:	d001      	beq.n	8006298 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8006294:	232a      	movs	r3, #42	; 0x2a
 8006296:	e054      	b.n	8006342 <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 800629e:	2309      	movs	r3, #9
 80062a0:	e04f      	b.n	8006342 <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 80062ae:	2040      	movs	r0, #64	; 0x40
 80062b0:	f7f9 ff78 	bl	80001a4 <OS_CPU_SR_Save>
 80062b4:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	2bff      	cmp	r3, #255	; 0xff
 80062ba:	d104      	bne.n	80062c6 <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 80062bc:	4b23      	ldr	r3, [pc, #140]	; (800634c <OSTaskStkChk+0xd4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80062c4:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	4a21      	ldr	r2, [pc, #132]	; (8006350 <OSTaskStkChk+0xd8>)
 80062ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ce:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 80062d6:	6978      	ldr	r0, [r7, #20]
 80062d8:	f7f9 ff72 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80062dc:	2343      	movs	r3, #67	; 0x43
 80062de:	e030      	b.n	8006342 <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d104      	bne.n	80062f0 <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 80062e6:	6978      	ldr	r0, [r7, #20]
 80062e8:	f7f9 ff6a 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80062ec:	2343      	movs	r3, #67	; 0x43
 80062ee:	e028      	b.n	8006342 <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	8a1b      	ldrh	r3, [r3, #16]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 80062fc:	6978      	ldr	r0, [r7, #20]
 80062fe:	f7f9 ff5f 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8006302:	2345      	movs	r3, #69	; 0x45
 8006304:	e01d      	b.n	8006342 <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7f9 ff52 	bl	80001c0 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 800631c:	e002      	b.n	8006324 <OSTaskStkChk+0xac>
        nfree++;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	3301      	adds	r3, #1
 8006322:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	1d1a      	adds	r2, r3, #4
 8006328:	61fa      	str	r2, [r7, #28]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f6      	beq.n	800631e <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20001ccc 	.word	0x20001ccc
 8006350:	20002764 	.word	0x20002764

08006354 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	2b3f      	cmp	r3, #63	; 0x3f
 8006366:	d101      	bne.n	800636c <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8006368:	2347      	movs	r3, #71	; 0x47
 800636a:	e06a      	b.n	8006442 <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b3e      	cmp	r3, #62	; 0x3e
 8006370:	d904      	bls.n	800637c <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2bff      	cmp	r3, #255	; 0xff
 8006376:	d001      	beq.n	800637c <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8006378:	232a      	movs	r3, #42	; 0x2a
 800637a:	e062      	b.n	8006442 <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 800637c:	2040      	movs	r0, #64	; 0x40
 800637e:	f7f9 ff11 	bl	80001a4 <OS_CPU_SR_Save>
 8006382:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	2bff      	cmp	r3, #255	; 0xff
 8006388:	d107      	bne.n	800639a <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 800638a:	4b30      	ldr	r3, [pc, #192]	; (800644c <OSTaskSuspend+0xf8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006392:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
 8006398:	e00b      	b.n	80063b2 <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800639a:	4b2c      	ldr	r3, [pc, #176]	; (800644c <OSTaskSuspend+0xf8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80063a2:	79fa      	ldrb	r2, [r7, #7]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d102      	bne.n	80063ae <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	75fb      	strb	r3, [r7, #23]
 80063ac:	e001      	b.n	80063b2 <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <OSTaskSuspend+0xfc>)
 80063b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ba:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 80063c2:	6938      	ldr	r0, [r7, #16]
 80063c4:	f7f9 fefc 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 80063c8:	2348      	movs	r3, #72	; 0x48
 80063ca:	e03a      	b.n	8006442 <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d104      	bne.n	80063dc <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 80063d2:	6938      	ldr	r0, [r7, #16]
 80063d4:	f7f9 fef4 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80063d8:	2343      	movs	r3, #67	; 0x43
 80063da:	e032      	b.n	8006442 <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063e2:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <OSTaskSuspend+0x100>)
 80063e8:	5cd1      	ldrb	r1, [r2, r3]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063f0:	43db      	mvns	r3, r3
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	400a      	ands	r2, r1
 80063f8:	b2d1      	uxtb	r1, r2
 80063fa:	4a16      	ldr	r2, [pc, #88]	; (8006454 <OSTaskSuspend+0x100>)
 80063fc:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	4a14      	ldr	r2, [pc, #80]	; (8006454 <OSTaskSuspend+0x100>)
 8006402:	5cd3      	ldrb	r3, [r2, r3]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800640e:	43db      	mvns	r3, r3
 8006410:	b2da      	uxtb	r2, r3
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <OSTaskSuspend+0x104>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	4013      	ands	r3, r2
 8006418:	b2da      	uxtb	r2, r3
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <OSTaskSuspend+0x104>)
 800641c:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006424:	f043 0308 	orr.w	r3, r3, #8
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 8006430:	6938      	ldr	r0, [r7, #16]
 8006432:	f7f9 fec5 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 800643c:	f7ff f8c4 	bl	80055c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20001ccc 	.word	0x20001ccc
 8006450:	20002764 	.word	0x20002764
 8006454:	20001abc 	.word	0x20001abc
 8006458:	20001ab8 	.word	0x20001ab8

0800645c <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <OS_TaskReturn+0x18>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe faad 	bl	80049c4 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 800646a:	20ff      	movs	r0, #255	; 0xff
 800646c:	f7ff fd36 	bl	8005edc <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20001ccc 	.word	0x20001ccc

08006478 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800649a:	e007      	b.n	80064ac <OS_TaskStkClr+0x34>
                size--;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	3b01      	subs	r3, #1
 80064a0:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1d1a      	adds	r2, r3, #4
 80064a6:	60fa      	str	r2, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f4      	bne.n	800649c <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80064c8:	4b21      	ldr	r3, [pc, #132]	; (8006550 <OSTimeDly+0x94>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d138      	bne.n	8006542 <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <OSTimeDly+0x98>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d136      	bne.n	8006546 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d034      	beq.n	8006548 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 80064de:	2040      	movs	r0, #64	; 0x40
 80064e0:	f7f9 fe60 	bl	80001a4 <OS_CPU_SR_Save>
 80064e4:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 80064e6:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <OSTimeDly+0x9c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064ee:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	4a1a      	ldr	r2, [pc, #104]	; (800655c <OSTimeDly+0xa0>)
 80064f4:	5cd1      	ldrb	r1, [r2, r3]
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <OSTimeDly+0x9c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064fe:	43db      	mvns	r3, r3
 8006500:	b2da      	uxtb	r2, r3
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	400a      	ands	r2, r1
 8006506:	b2d1      	uxtb	r1, r2
 8006508:	4a14      	ldr	r2, [pc, #80]	; (800655c <OSTimeDly+0xa0>)
 800650a:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <OSTimeDly+0xa0>)
 8006510:	5cd3      	ldrb	r3, [r2, r3]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <OSTimeDly+0x9c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800651e:	43db      	mvns	r3, r3
 8006520:	b2da      	uxtb	r2, r3
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <OSTimeDly+0xa4>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4013      	ands	r3, r2
 8006528:	b2da      	uxtb	r2, r3
 800652a:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <OSTimeDly+0xa4>)
 800652c:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <OSTimeDly+0x9c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7f9 fe42 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 800653c:	f7ff f844 	bl	80055c8 <OS_Sched>
 8006540:	e002      	b.n	8006548 <OSTimeDly+0x8c>
        return;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <OSTimeDly+0x8c>
        return;
 8006546:	bf00      	nop
    }
}
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20001cc8 	.word	0x20001cc8
 8006554:	200014d0 	.word	0x200014d0
 8006558:	20001ccc 	.word	0x20001ccc
 800655c:	20001abc 	.word	0x20001abc
 8006560:	20001ab8 	.word	0x20001ab8

08006564 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4623      	mov	r3, r4
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	4603      	mov	r3, r0
 8006578:	71bb      	strb	r3, [r7, #6]
 800657a:	460b      	mov	r3, r1
 800657c:	717b      	strb	r3, [r7, #5]
 800657e:	4613      	mov	r3, r2
 8006580:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <OSTimeDlyHMSM+0xbc>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 800658a:	2355      	movs	r3, #85	; 0x55
 800658c:	e043      	b.n	8006616 <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800658e:	4b25      	ldr	r3, [pc, #148]	; (8006624 <OSTimeDlyHMSM+0xc0>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8006596:	2332      	movs	r3, #50	; 0x32
 8006598:	e03d      	b.n	8006616 <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 80065a0:	79bb      	ldrb	r3, [r7, #6]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 80065a6:	797b      	ldrb	r3, [r7, #5]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 80065ac:	887b      	ldrh	r3, [r7, #2]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 80065b2:	2354      	movs	r3, #84	; 0x54
 80065b4:	e02f      	b.n	8006616 <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 80065b6:	79bb      	ldrb	r3, [r7, #6]
 80065b8:	2b3b      	cmp	r3, #59	; 0x3b
 80065ba:	d901      	bls.n	80065c0 <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 80065bc:	2351      	movs	r3, #81	; 0x51
 80065be:	e02a      	b.n	8006616 <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 80065c0:	797b      	ldrb	r3, [r7, #5]
 80065c2:	2b3b      	cmp	r3, #59	; 0x3b
 80065c4:	d901      	bls.n	80065ca <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 80065c6:	2352      	movs	r3, #82	; 0x52
 80065c8:	e025      	b.n	8006616 <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d0:	d301      	bcc.n	80065d6 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 80065d2:	2353      	movs	r3, #83	; 0x53
 80065d4:	e01f      	b.n	8006616 <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80065dc:	fb02 f103 	mul.w	r1, r2, r3
 80065e0:	79ba      	ldrb	r2, [r7, #6]
 80065e2:	4613      	mov	r3, r2
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	18ca      	adds	r2, r1, r3
 80065ec:	797b      	ldrb	r3, [r7, #5]
 80065ee:	4413      	add	r3, r2
 80065f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065f4:	fb02 f203 	mul.w	r2, r2, r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 80065f8:	887b      	ldrh	r3, [r7, #2]
 80065fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4909      	ldr	r1, [pc, #36]	; (8006628 <OSTimeDlyHMSM+0xc4>)
 8006604:	fba1 1303 	umull	r1, r3, r1, r3
 8006608:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 800660a:	4413      	add	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff ff54 	bl	80064bc <OSTimeDly>
    return (OS_ERR_NONE);
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	bd90      	pop	{r4, r7, pc}
 800661e:	bf00      	nop
 8006620:	20001cc8 	.word	0x20001cc8
 8006624:	200014d0 	.word	0x200014d0
 8006628:	10624dd3 	.word	0x10624dd3

0800662c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0u
INT8U  OSTimeDlyResume (INT8U prio)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
#endif



    if (prio >= OS_LOWEST_PRIO) {
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	2b3e      	cmp	r3, #62	; 0x3e
 800663e:	d901      	bls.n	8006644 <OSTimeDlyResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8006640:	232a      	movs	r3, #42	; 0x2a
 8006642:	e067      	b.n	8006714 <OSTimeDlyResume+0xe8>
    }
    OS_ENTER_CRITICAL();
 8006644:	2040      	movs	r0, #64	; 0x40
 8006646:	f7f9 fdad 	bl	80001a4 <OS_CPU_SR_Save>
 800664a:	60f8      	str	r0, [r7, #12]
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	4a33      	ldr	r2, [pc, #204]	; (800671c <OSTimeDlyResume+0xf0>)
 8006650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006654:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <OSTimeDlyResume+0x3a>
        OS_EXIT_CRITICAL();
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7f9 fdaf 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8006662:	2343      	movs	r3, #67	; 0x43
 8006664:	e056      	b.n	8006714 <OSTimeDlyResume+0xe8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d104      	bne.n	8006676 <OSTimeDlyResume+0x4a>
        OS_EXIT_CRITICAL();
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7f9 fda7 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8006672:	2343      	movs	r3, #67	; 0x43
 8006674:	e04e      	b.n	8006714 <OSTimeDlyResume+0xe8>
    }
    if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <OSTimeDlyResume+0x5c>
        OS_EXIT_CRITICAL();
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7f9 fd9e 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 8006684:	2350      	movs	r3, #80	; 0x50
 8006686:	e045      	b.n	8006714 <OSTimeDlyResume+0xe8>
    }

    ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006694:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <OSTimeDlyResume+0x8c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066a2:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066b6:	e003      	b.n	80066c0 <OSTimeDlyResume+0x94>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d11e      	bne.n	800670c <OSTimeDlyResume+0xe0>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <OSTimeDlyResume+0xf4>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	4313      	orrs	r3, r2
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	4b10      	ldr	r3, [pc, #64]	; (8006720 <OSTimeDlyResume+0xf4>)
 80066de:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066e6:	461a      	mov	r2, r3
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <OSTimeDlyResume+0xf8>)
 80066ea:	5c9a      	ldrb	r2, [r3, r2]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 80066f8:	4313      	orrs	r3, r2
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <OSTimeDlyResume+0xf8>)
 80066fe:	545a      	strb	r2, [r3, r1]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7f9 fd5d 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
 8006706:	f7fe ff5f 	bl	80055c8 <OS_Sched>
 800670a:	e002      	b.n	8006712 <OSTimeDlyResume+0xe6>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7f9 fd57 	bl	80001c0 <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20002764 	.word	0x20002764
 8006720:	20001ab8 	.word	0x20001ab8
 8006724:	20001abc 	.word	0x20001abc

08006728 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8006732:	2040      	movs	r0, #64	; 0x40
 8006734:	f7f9 fd36 	bl	80001a4 <OS_CPU_SR_Save>
 8006738:	6078      	str	r0, [r7, #4]
    ticks = OSTime;
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <OSTimeGet+0x28>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7f9 fd3d 	bl	80001c0 <OS_CPU_SR_Restore>
    return (ticks);
 8006746:	683b      	ldr	r3, [r7, #0]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20001cd4 	.word	0x20001cd4

08006754 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <OSTmrSignal+0x20>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fb10 	bl	8005d84 <OSSemPost>
 8006764:	4603      	mov	r3, r0
 8006766:	71fb      	strb	r3, [r7, #7]
    return (err);
 8006768:	79fb      	ldrb	r3, [r7, #7]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200014d4 	.word	0x200014d4

08006778 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 800677e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006782:	4838      	ldr	r0, [pc, #224]	; (8006864 <OSTmr_Init+0xec>)
 8006784:	f7fe ff08 	bl	8005598 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8006788:	2138      	movs	r1, #56	; 0x38
 800678a:	4837      	ldr	r0, [pc, #220]	; (8006868 <OSTmr_Init+0xf0>)
 800678c:	f7fe ff04 	bl	8005598 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8006790:	2300      	movs	r3, #0
 8006792:	82fb      	strh	r3, [r7, #22]
 8006794:	e022      	b.n	80067dc <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8006796:	8afb      	ldrh	r3, [r7, #22]
 8006798:	3301      	adds	r3, #1
 800679a:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 800679c:	8afa      	ldrh	r2, [r7, #22]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <OSTmr_Init+0xec>)
 80067a8:	4413      	add	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 80067ac:	89fa      	ldrh	r2, [r7, #14]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <OSTmr_Init+0xec>)
 80067b8:	4413      	add	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2264      	movs	r2, #100	; 0x64
 80067c0:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4a26      	ldr	r2, [pc, #152]	; (800686c <OSTmr_Init+0xf4>)
 80067d4:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 80067d6:	8afb      	ldrh	r3, [r7, #22]
 80067d8:	3301      	adds	r3, #1
 80067da:	82fb      	strh	r3, [r7, #22]
 80067dc:	8afb      	ldrh	r3, [r7, #22]
 80067de:	2b0e      	cmp	r3, #14
 80067e0:	d9d9      	bls.n	8006796 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 80067e2:	8afa      	ldrh	r2, [r7, #22]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <OSTmr_Init+0xec>)
 80067ee:	4413      	add	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2264      	movs	r2, #100	; 0x64
 80067f6:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2200      	movs	r2, #0
 8006804:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4a18      	ldr	r2, [pc, #96]	; (800686c <OSTmr_Init+0xf4>)
 800680a:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 800680c:	4b18      	ldr	r3, [pc, #96]	; (8006870 <OSTmr_Init+0xf8>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 8006812:	4b18      	ldr	r3, [pc, #96]	; (8006874 <OSTmr_Init+0xfc>)
 8006814:	2200      	movs	r2, #0
 8006816:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8006818:	4b17      	ldr	r3, [pc, #92]	; (8006878 <OSTmr_Init+0x100>)
 800681a:	2210      	movs	r2, #16
 800681c:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800681e:	4b17      	ldr	r3, [pc, #92]	; (800687c <OSTmr_Init+0x104>)
 8006820:	4a10      	ldr	r2, [pc, #64]	; (8006864 <OSTmr_Init+0xec>)
 8006822:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 8006824:	2001      	movs	r0, #1
 8006826:	f7ff f9d9 	bl	8005bdc <OSSemCreate>
 800682a:	4603      	mov	r3, r0
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <OSTmr_Init+0x108>)
 800682e:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8006830:	2000      	movs	r0, #0
 8006832:	f7ff f9d3 	bl	8005bdc <OSSemCreate>
 8006836:	4603      	mov	r3, r0
 8006838:	4a12      	ldr	r2, [pc, #72]	; (8006884 <OSTmr_Init+0x10c>)
 800683a:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 800683c:	4b10      	ldr	r3, [pc, #64]	; (8006880 <OSTmr_Init+0x108>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	1dfa      	adds	r2, r7, #7
 8006842:	4911      	ldr	r1, [pc, #68]	; (8006888 <OSTmr_Init+0x110>)
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe f9db 	bl	8004c00 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 800684a:	4b0e      	ldr	r3, [pc, #56]	; (8006884 <OSTmr_Init+0x10c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	1dfa      	adds	r2, r7, #7
 8006850:	490e      	ldr	r1, [pc, #56]	; (800688c <OSTmr_Init+0x114>)
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe f9d4 	bl	8004c00 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8006858:	f000 f81a 	bl	8006890 <OSTmr_InitTask>
}
 800685c:	bf00      	nop
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20001534 	.word	0x20001534
 8006868:	20001498 	.word	0x20001498
 800686c:	08009a4c 	.word	0x08009a4c
 8006870:	20001cd0 	.word	0x20001cd0
 8006874:	200014e0 	.word	0x200014e0
 8006878:	20001a3c 	.word	0x20001a3c
 800687c:	20001494 	.word	0x20001494
 8006880:	20001cd8 	.word	0x20001cd8
 8006884:	200014d4 	.word	0x200014d4
 8006888:	08009a50 	.word	0x08009a50
 800688c:	08009a64 	.word	0x08009a64

08006890 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8006896:	2303      	movs	r3, #3
 8006898:	9304      	str	r3, [sp, #16]
 800689a:	2300      	movs	r3, #0
 800689c:	9303      	str	r3, [sp, #12]
 800689e:	2380      	movs	r3, #128	; 0x80
 80068a0:	9302      	str	r3, [sp, #8]
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <OSTmr_InitTask+0x3c>)
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	233d      	movs	r3, #61	; 0x3d
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <OSTmr_InitTask+0x40>)
 80068b0:	2100      	movs	r1, #0
 80068b2:	4808      	ldr	r0, [pc, #32]	; (80068d4 <OSTmr_InitTask+0x44>)
 80068b4:	f7ff faa6 	bl	8005e04 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 80068b8:	1dfb      	adds	r3, r7, #7
 80068ba:	461a      	mov	r2, r3
 80068bc:	4906      	ldr	r1, [pc, #24]	; (80068d8 <OSTmr_InitTask+0x48>)
 80068be:	203d      	movs	r0, #61	; 0x3d
 80068c0:	f7ff fc04 	bl	80060cc <OSTaskNameSet>
#endif
}
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20001ac4 	.word	0x20001ac4
 80068d0:	20001cc0 	.word	0x20001cc0
 80068d4:	08006a55 	.word	0x08006a55
 80068d8:	08009a78 	.word	0x08009a78

080068dc <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2203      	movs	r2, #3
 80068ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d107      	bne.n	8006906 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	4b2a      	ldr	r3, [pc, #168]	; (80069a4 <OSTmr_Link+0xc8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	441a      	add	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	615a      	str	r2, [r3, #20]
 8006904:	e012      	b.n	800692c <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d107      	bne.n	800691e <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <OSTmr_Link+0xc8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	441a      	add	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	615a      	str	r2, [r3, #20]
 800691c:	e006      	b.n	800692c <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <OSTmr_Link+0xc8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <OSTmr_Link+0xcc>)
 8006932:	fba3 1302 	umull	r1, r3, r3, r2
 8006936:	1ad1      	subs	r1, r2, r3
 8006938:	0849      	lsrs	r1, r1, #1
 800693a:	440b      	add	r3, r1
 800693c:	0899      	lsrs	r1, r3, #2
 800693e:	460b      	mov	r3, r1
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	1a5b      	subs	r3, r3, r1
 8006944:	1ad1      	subs	r1, r2, r3
 8006946:	460b      	mov	r3, r1
 8006948:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800694a:	8afb      	ldrh	r3, [r7, #22]
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4a17      	ldr	r2, [pc, #92]	; (80069ac <OSTmr_Link+0xd0>)
 8006950:	4413      	add	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2201      	movs	r2, #1
 800696c:	809a      	strh	r2, [r3, #4]
 800696e:	e011      	b.n	8006994 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	889b      	ldrh	r3, [r3, #4]
 800698c:	3301      	adds	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	611a      	str	r2, [r3, #16]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	20001cd0 	.word	0x20001cd0
 80069a8:	24924925 	.word	0x24924925
 80069ac:	20001498 	.word	0x20001498

080069b0 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <OSTmr_Unlink+0x9c>)
 80069be:	fba3 1302 	umull	r1, r3, r3, r2
 80069c2:	1ad1      	subs	r1, r2, r3
 80069c4:	0849      	lsrs	r1, r1, #1
 80069c6:	440b      	add	r3, r1
 80069c8:	0899      	lsrs	r1, r3, #2
 80069ca:	460b      	mov	r3, r1
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	1ad1      	subs	r1, r2, r3
 80069d2:	460b      	mov	r3, r1
 80069d4:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80069d6:	8afb      	ldrh	r3, [r7, #22]
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <OSTmr_Unlink+0xa0>)
 80069dc:	4413      	add	r3, r2
 80069de:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d10c      	bne.n	8006a04 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d012      	beq.n	8006a22 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	611a      	str	r2, [r3, #16]
 8006a02:	e00e      	b.n	8006a22 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	889b      	ldrh	r3, [r3, #4]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	809a      	strh	r2, [r3, #4]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	24924925 	.word	0x24924925
 8006a50:	20001498 	.word	0x20001498

08006a54 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8006a5c:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <OSTmr_Task+0xb4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f107 020b 	add.w	r2, r7, #11
 8006a64:	2100      	movs	r1, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff f8f6 	bl	8005c58 <OSSemPend>
        OSSchedLock();
 8006a6c:	f7fe f98a 	bl	8004d84 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8006a70:	4b26      	ldr	r3, [pc, #152]	; (8006b0c <OSTmr_Task+0xb8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <OSTmr_Task+0xb8>)
 8006a78:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <OSTmr_Task+0xb8>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <OSTmr_Task+0xbc>)
 8006a80:	fba3 1302 	umull	r1, r3, r3, r2
 8006a84:	1ad1      	subs	r1, r2, r3
 8006a86:	0849      	lsrs	r1, r1, #1
 8006a88:	440b      	add	r3, r1
 8006a8a:	0899      	lsrs	r1, r3, #2
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	1a5b      	subs	r3, r3, r1
 8006a92:	1ad1      	subs	r1, r2, r3
 8006a94:	460b      	mov	r3, r1
 8006a96:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8006a98:	8b7b      	ldrh	r3, [r7, #26]
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <OSTmr_Task+0xc0>)
 8006a9e:	4413      	add	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8006aa8:	e027      	b.n	8006afa <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	695a      	ldr	r2, [r3, #20]
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <OSTmr_Task+0xb8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d11c      	bne.n	8006af6 <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8006abc:	69f8      	ldr	r0, [r7, #28]
 8006abe:	f7ff ff77 	bl	80069b0 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d104      	bne.n	8006ad6 <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8006acc:	2101      	movs	r1, #1
 8006ace:	69f8      	ldr	r0, [r7, #28]
 8006ad0:	f7ff ff04 	bl	80068dc <OSTmr_Link>
 8006ad4:	e003      	b.n	8006ade <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4611      	mov	r1, r2
 8006af2:	69f8      	ldr	r0, [r7, #28]
 8006af4:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1d4      	bne.n	8006aaa <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8006b00:	f7fe f968 	bl	8004dd4 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8006b04:	e7aa      	b.n	8006a5c <OSTmr_Task+0x8>
 8006b06:	bf00      	nop
 8006b08:	200014d4 	.word	0x200014d4
 8006b0c:	20001cd0 	.word	0x20001cd0
 8006b10:	24924925 	.word	0x24924925
 8006b14:	20001498 	.word	0x20001498

08006b18 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
}
 8006b40:	bf00      	nop
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr

08006b66 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 8006b66:	b480      	push	{r7}
 8006b68:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <__errno>:
 8006b90:	4b01      	ldr	r3, [pc, #4]	; (8006b98 <__errno+0x8>)
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20000014 	.word	0x20000014

08006b9c <__libc_init_array>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	4d0c      	ldr	r5, [pc, #48]	; (8006bd4 <__libc_init_array+0x38>)
 8006ba2:	4c0d      	ldr	r4, [pc, #52]	; (8006bd8 <__libc_init_array+0x3c>)
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	42a6      	cmp	r6, r4
 8006baa:	d109      	bne.n	8006bc0 <__libc_init_array+0x24>
 8006bac:	f002 feba 	bl	8009924 <_init>
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	4d0a      	ldr	r5, [pc, #40]	; (8006bdc <__libc_init_array+0x40>)
 8006bb4:	4c0a      	ldr	r4, [pc, #40]	; (8006be0 <__libc_init_array+0x44>)
 8006bb6:	1b64      	subs	r4, r4, r5
 8006bb8:	10a4      	asrs	r4, r4, #2
 8006bba:	42a6      	cmp	r6, r4
 8006bbc:	d105      	bne.n	8006bca <__libc_init_array+0x2e>
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc4:	4798      	blx	r3
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	e7ee      	b.n	8006ba8 <__libc_init_array+0xc>
 8006bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bce:	4798      	blx	r3
 8006bd0:	3601      	adds	r6, #1
 8006bd2:	e7f2      	b.n	8006bba <__libc_init_array+0x1e>
 8006bd4:	08009fec 	.word	0x08009fec
 8006bd8:	08009fec 	.word	0x08009fec
 8006bdc:	08009fec 	.word	0x08009fec
 8006be0:	08009ff0 	.word	0x08009ff0

08006be4 <memset>:
 8006be4:	4603      	mov	r3, r0
 8006be6:	4402      	add	r2, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <__cvt>:
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	bfbb      	ittet	lt
 8006bfe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006c02:	461f      	movlt	r7, r3
 8006c04:	2300      	movge	r3, #0
 8006c06:	232d      	movlt	r3, #45	; 0x2d
 8006c08:	b088      	sub	sp, #32
 8006c0a:	4614      	mov	r4, r2
 8006c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c10:	7013      	strb	r3, [r2, #0]
 8006c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c14:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c18:	f023 0820 	bic.w	r8, r3, #32
 8006c1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c20:	d005      	beq.n	8006c2e <__cvt+0x3a>
 8006c22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c26:	d100      	bne.n	8006c2a <__cvt+0x36>
 8006c28:	3501      	adds	r5, #1
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e000      	b.n	8006c30 <__cvt+0x3c>
 8006c2e:	2303      	movs	r3, #3
 8006c30:	aa07      	add	r2, sp, #28
 8006c32:	9204      	str	r2, [sp, #16]
 8006c34:	aa06      	add	r2, sp, #24
 8006c36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c3a:	e9cd 3500 	strd	r3, r5, [sp]
 8006c3e:	4622      	mov	r2, r4
 8006c40:	463b      	mov	r3, r7
 8006c42:	f000 fce5 	bl	8007610 <_dtoa_r>
 8006c46:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	d102      	bne.n	8006c54 <__cvt+0x60>
 8006c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c50:	07db      	lsls	r3, r3, #31
 8006c52:	d522      	bpl.n	8006c9a <__cvt+0xa6>
 8006c54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c58:	eb06 0905 	add.w	r9, r6, r5
 8006c5c:	d110      	bne.n	8006c80 <__cvt+0x8c>
 8006c5e:	7833      	ldrb	r3, [r6, #0]
 8006c60:	2b30      	cmp	r3, #48	; 0x30
 8006c62:	d10a      	bne.n	8006c7a <__cvt+0x86>
 8006c64:	2200      	movs	r2, #0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 ff5c 	bl	8000b28 <__aeabi_dcmpeq>
 8006c70:	b918      	cbnz	r0, 8006c7a <__cvt+0x86>
 8006c72:	f1c5 0501 	rsb	r5, r5, #1
 8006c76:	f8ca 5000 	str.w	r5, [sl]
 8006c7a:	f8da 3000 	ldr.w	r3, [sl]
 8006c7e:	4499      	add	r9, r3
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4620      	mov	r0, r4
 8006c86:	4639      	mov	r1, r7
 8006c88:	f7f9 ff4e 	bl	8000b28 <__aeabi_dcmpeq>
 8006c8c:	b108      	cbz	r0, 8006c92 <__cvt+0x9e>
 8006c8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c92:	2230      	movs	r2, #48	; 0x30
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	454b      	cmp	r3, r9
 8006c98:	d307      	bcc.n	8006caa <__cvt+0xb6>
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	9b07      	ldr	r3, [sp, #28]
 8006c9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ca0:	1b9b      	subs	r3, r3, r6
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	b008      	add	sp, #32
 8006ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	9107      	str	r1, [sp, #28]
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	e7f0      	b.n	8006c94 <__cvt+0xa0>

08006cb2 <__exponent>:
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	f803 2b02 	strb.w	r2, [r3], #2
 8006cbc:	bfb6      	itet	lt
 8006cbe:	222d      	movlt	r2, #45	; 0x2d
 8006cc0:	222b      	movge	r2, #43	; 0x2b
 8006cc2:	4249      	neglt	r1, r1
 8006cc4:	2909      	cmp	r1, #9
 8006cc6:	7042      	strb	r2, [r0, #1]
 8006cc8:	dd2b      	ble.n	8006d22 <__exponent+0x70>
 8006cca:	f10d 0407 	add.w	r4, sp, #7
 8006cce:	46a4      	mov	ip, r4
 8006cd0:	270a      	movs	r7, #10
 8006cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	46a6      	mov	lr, r4
 8006cda:	fb07 1516 	mls	r5, r7, r6, r1
 8006cde:	2a63      	cmp	r2, #99	; 0x63
 8006ce0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cee:	dcf0      	bgt.n	8006cd2 <__exponent+0x20>
 8006cf0:	3130      	adds	r1, #48	; 0x30
 8006cf2:	f1ae 0502 	sub.w	r5, lr, #2
 8006cf6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	1c44      	adds	r4, r0, #1
 8006cfe:	4561      	cmp	r1, ip
 8006d00:	d30a      	bcc.n	8006d18 <__exponent+0x66>
 8006d02:	f10d 0209 	add.w	r2, sp, #9
 8006d06:	eba2 020e 	sub.w	r2, r2, lr
 8006d0a:	4565      	cmp	r5, ip
 8006d0c:	bf88      	it	hi
 8006d0e:	2200      	movhi	r2, #0
 8006d10:	4413      	add	r3, r2
 8006d12:	1a18      	subs	r0, r3, r0
 8006d14:	b003      	add	sp, #12
 8006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d1c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d20:	e7ed      	b.n	8006cfe <__exponent+0x4c>
 8006d22:	2330      	movs	r3, #48	; 0x30
 8006d24:	3130      	adds	r1, #48	; 0x30
 8006d26:	7083      	strb	r3, [r0, #2]
 8006d28:	70c1      	strb	r1, [r0, #3]
 8006d2a:	1d03      	adds	r3, r0, #4
 8006d2c:	e7f1      	b.n	8006d12 <__exponent+0x60>
	...

08006d30 <_printf_float>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	b091      	sub	sp, #68	; 0x44
 8006d36:	460c      	mov	r4, r1
 8006d38:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	461f      	mov	r7, r3
 8006d40:	4605      	mov	r5, r0
 8006d42:	f001 fa53 	bl	80081ec <_localeconv_r>
 8006d46:	6803      	ldr	r3, [r0, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4c:	f7f9 fac0 	bl	80002d0 <strlen>
 8006d50:	2300      	movs	r3, #0
 8006d52:	930e      	str	r3, [sp, #56]	; 0x38
 8006d54:	f8d8 3000 	ldr.w	r3, [r8]
 8006d58:	900a      	str	r0, [sp, #40]	; 0x28
 8006d5a:	3307      	adds	r3, #7
 8006d5c:	f023 0307 	bic.w	r3, r3, #7
 8006d60:	f103 0208 	add.w	r2, r3, #8
 8006d64:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006d68:	f8d4 b000 	ldr.w	fp, [r4]
 8006d6c:	f8c8 2000 	str.w	r2, [r8]
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d78:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006d7c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	4640      	mov	r0, r8
 8006d88:	4b9c      	ldr	r3, [pc, #624]	; (8006ffc <_printf_float+0x2cc>)
 8006d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d8c:	f7f9 fefe 	bl	8000b8c <__aeabi_dcmpun>
 8006d90:	bb70      	cbnz	r0, 8006df0 <_printf_float+0xc0>
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	4640      	mov	r0, r8
 8006d98:	4b98      	ldr	r3, [pc, #608]	; (8006ffc <_printf_float+0x2cc>)
 8006d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d9c:	f7f9 fed8 	bl	8000b50 <__aeabi_dcmple>
 8006da0:	bb30      	cbnz	r0, 8006df0 <_printf_float+0xc0>
 8006da2:	2200      	movs	r2, #0
 8006da4:	2300      	movs	r3, #0
 8006da6:	4640      	mov	r0, r8
 8006da8:	4651      	mov	r1, sl
 8006daa:	f7f9 fec7 	bl	8000b3c <__aeabi_dcmplt>
 8006dae:	b110      	cbz	r0, 8006db6 <_printf_float+0x86>
 8006db0:	232d      	movs	r3, #45	; 0x2d
 8006db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db6:	4b92      	ldr	r3, [pc, #584]	; (8007000 <_printf_float+0x2d0>)
 8006db8:	4892      	ldr	r0, [pc, #584]	; (8007004 <_printf_float+0x2d4>)
 8006dba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006dbe:	bf94      	ite	ls
 8006dc0:	4698      	movls	r8, r3
 8006dc2:	4680      	movhi	r8, r0
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	f04f 0a00 	mov.w	sl, #0
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	f02b 0304 	bic.w	r3, fp, #4
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	4633      	mov	r3, r6
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	9700      	str	r7, [sp, #0]
 8006dda:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ddc:	f000 f9d4 	bl	8007188 <_printf_common>
 8006de0:	3001      	adds	r0, #1
 8006de2:	f040 8090 	bne.w	8006f06 <_printf_float+0x1d6>
 8006de6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dea:	b011      	add	sp, #68	; 0x44
 8006dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df0:	4642      	mov	r2, r8
 8006df2:	4653      	mov	r3, sl
 8006df4:	4640      	mov	r0, r8
 8006df6:	4651      	mov	r1, sl
 8006df8:	f7f9 fec8 	bl	8000b8c <__aeabi_dcmpun>
 8006dfc:	b148      	cbz	r0, 8006e12 <_printf_float+0xe2>
 8006dfe:	f1ba 0f00 	cmp.w	sl, #0
 8006e02:	bfb8      	it	lt
 8006e04:	232d      	movlt	r3, #45	; 0x2d
 8006e06:	4880      	ldr	r0, [pc, #512]	; (8007008 <_printf_float+0x2d8>)
 8006e08:	bfb8      	it	lt
 8006e0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e0e:	4b7f      	ldr	r3, [pc, #508]	; (800700c <_printf_float+0x2dc>)
 8006e10:	e7d3      	b.n	8006dba <_printf_float+0x8a>
 8006e12:	6863      	ldr	r3, [r4, #4]
 8006e14:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	d142      	bne.n	8006ea2 <_printf_float+0x172>
 8006e1c:	2306      	movs	r3, #6
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	9206      	str	r2, [sp, #24]
 8006e24:	aa0e      	add	r2, sp, #56	; 0x38
 8006e26:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006e2a:	aa0d      	add	r2, sp, #52	; 0x34
 8006e2c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006e30:	9203      	str	r2, [sp, #12]
 8006e32:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006e36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	6863      	ldr	r3, [r4, #4]
 8006e3e:	4642      	mov	r2, r8
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4628      	mov	r0, r5
 8006e44:	4653      	mov	r3, sl
 8006e46:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e48:	f7ff fed4 	bl	8006bf4 <__cvt>
 8006e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e4e:	4680      	mov	r8, r0
 8006e50:	2947      	cmp	r1, #71	; 0x47
 8006e52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e54:	d108      	bne.n	8006e68 <_printf_float+0x138>
 8006e56:	1cc8      	adds	r0, r1, #3
 8006e58:	db02      	blt.n	8006e60 <_printf_float+0x130>
 8006e5a:	6863      	ldr	r3, [r4, #4]
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	dd40      	ble.n	8006ee2 <_printf_float+0x1b2>
 8006e60:	f1a9 0902 	sub.w	r9, r9, #2
 8006e64:	fa5f f989 	uxtb.w	r9, r9
 8006e68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e6c:	d81f      	bhi.n	8006eae <_printf_float+0x17e>
 8006e6e:	464a      	mov	r2, r9
 8006e70:	3901      	subs	r1, #1
 8006e72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e76:	910d      	str	r1, [sp, #52]	; 0x34
 8006e78:	f7ff ff1b 	bl	8006cb2 <__exponent>
 8006e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e7e:	4682      	mov	sl, r0
 8006e80:	1813      	adds	r3, r2, r0
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	dc02      	bgt.n	8006e8e <_printf_float+0x15e>
 8006e88:	6822      	ldr	r2, [r4, #0]
 8006e8a:	07d2      	lsls	r2, r2, #31
 8006e8c:	d501      	bpl.n	8006e92 <_printf_float+0x162>
 8006e8e:	3301      	adds	r3, #1
 8006e90:	6123      	str	r3, [r4, #16]
 8006e92:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d09b      	beq.n	8006dd2 <_printf_float+0xa2>
 8006e9a:	232d      	movs	r3, #45	; 0x2d
 8006e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea0:	e797      	b.n	8006dd2 <_printf_float+0xa2>
 8006ea2:	2947      	cmp	r1, #71	; 0x47
 8006ea4:	d1bc      	bne.n	8006e20 <_printf_float+0xf0>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ba      	bne.n	8006e20 <_printf_float+0xf0>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e7b7      	b.n	8006e1e <_printf_float+0xee>
 8006eae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006eb2:	d118      	bne.n	8006ee6 <_printf_float+0x1b6>
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	dd0b      	ble.n	8006ed2 <_printf_float+0x1a2>
 8006eba:	6121      	str	r1, [r4, #16]
 8006ebc:	b913      	cbnz	r3, 8006ec4 <_printf_float+0x194>
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	07d0      	lsls	r0, r2, #31
 8006ec2:	d502      	bpl.n	8006eca <_printf_float+0x19a>
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	440b      	add	r3, r1
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	f04f 0a00 	mov.w	sl, #0
 8006ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ed0:	e7df      	b.n	8006e92 <_printf_float+0x162>
 8006ed2:	b913      	cbnz	r3, 8006eda <_printf_float+0x1aa>
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	07d2      	lsls	r2, r2, #31
 8006ed8:	d501      	bpl.n	8006ede <_printf_float+0x1ae>
 8006eda:	3302      	adds	r3, #2
 8006edc:	e7f4      	b.n	8006ec8 <_printf_float+0x198>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e7f2      	b.n	8006ec8 <_printf_float+0x198>
 8006ee2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee8:	4299      	cmp	r1, r3
 8006eea:	db05      	blt.n	8006ef8 <_printf_float+0x1c8>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	6121      	str	r1, [r4, #16]
 8006ef0:	07d8      	lsls	r0, r3, #31
 8006ef2:	d5ea      	bpl.n	8006eca <_printf_float+0x19a>
 8006ef4:	1c4b      	adds	r3, r1, #1
 8006ef6:	e7e7      	b.n	8006ec8 <_printf_float+0x198>
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	bfcc      	ite	gt
 8006efc:	2201      	movgt	r2, #1
 8006efe:	f1c1 0202 	rsble	r2, r1, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	e7e0      	b.n	8006ec8 <_printf_float+0x198>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	055a      	lsls	r2, r3, #21
 8006f0a:	d407      	bmi.n	8006f1c <_printf_float+0x1ec>
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	4642      	mov	r2, r8
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	d12b      	bne.n	8006f72 <_printf_float+0x242>
 8006f1a:	e764      	b.n	8006de6 <_printf_float+0xb6>
 8006f1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f20:	f240 80dd 	bls.w	80070de <_printf_float+0x3ae>
 8006f24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f7f9 fdfc 	bl	8000b28 <__aeabi_dcmpeq>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d033      	beq.n	8006f9c <_printf_float+0x26c>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	4a35      	ldr	r2, [pc, #212]	; (8007010 <_printf_float+0x2e0>)
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f af51 	beq.w	8006de6 <_printf_float+0xb6>
 8006f44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	db02      	blt.n	8006f52 <_printf_float+0x222>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	07d8      	lsls	r0, r3, #31
 8006f50:	d50f      	bpl.n	8006f72 <_printf_float+0x242>
 8006f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f af42 	beq.w	8006de6 <_printf_float+0xb6>
 8006f62:	f04f 0800 	mov.w	r8, #0
 8006f66:	f104 091a 	add.w	r9, r4, #26
 8006f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	4543      	cmp	r3, r8
 8006f70:	dc09      	bgt.n	8006f86 <_printf_float+0x256>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	079b      	lsls	r3, r3, #30
 8006f76:	f100 8102 	bmi.w	800717e <_printf_float+0x44e>
 8006f7a:	68e0      	ldr	r0, [r4, #12]
 8006f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f7e:	4298      	cmp	r0, r3
 8006f80:	bfb8      	it	lt
 8006f82:	4618      	movlt	r0, r3
 8006f84:	e731      	b.n	8006dea <_printf_float+0xba>
 8006f86:	2301      	movs	r3, #1
 8006f88:	464a      	mov	r2, r9
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f af28 	beq.w	8006de6 <_printf_float+0xb6>
 8006f96:	f108 0801 	add.w	r8, r8, #1
 8006f9a:	e7e6      	b.n	8006f6a <_printf_float+0x23a>
 8006f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	dc38      	bgt.n	8007014 <_printf_float+0x2e4>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	4a19      	ldr	r2, [pc, #100]	; (8007010 <_printf_float+0x2e0>)
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	f43f af1a 	beq.w	8006de6 <_printf_float+0xb6>
 8006fb2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d102      	bne.n	8006fc0 <_printf_float+0x290>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	07d9      	lsls	r1, r3, #31
 8006fbe:	d5d8      	bpl.n	8006f72 <_printf_float+0x242>
 8006fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f af0b 	beq.w	8006de6 <_printf_float+0xb6>
 8006fd0:	f04f 0900 	mov.w	r9, #0
 8006fd4:	f104 0a1a 	add.w	sl, r4, #26
 8006fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fda:	425b      	negs	r3, r3
 8006fdc:	454b      	cmp	r3, r9
 8006fde:	dc01      	bgt.n	8006fe4 <_printf_float+0x2b4>
 8006fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fe2:	e794      	b.n	8006f0e <_printf_float+0x1de>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4652      	mov	r2, sl
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b8      	blx	r7
 8006fee:	3001      	adds	r0, #1
 8006ff0:	f43f aef9 	beq.w	8006de6 <_printf_float+0xb6>
 8006ff4:	f109 0901 	add.w	r9, r9, #1
 8006ff8:	e7ee      	b.n	8006fd8 <_printf_float+0x2a8>
 8006ffa:	bf00      	nop
 8006ffc:	7fefffff 	.word	0x7fefffff
 8007000:	08009c10 	.word	0x08009c10
 8007004:	08009c14 	.word	0x08009c14
 8007008:	08009c1c 	.word	0x08009c1c
 800700c:	08009c18 	.word	0x08009c18
 8007010:	08009c20 	.word	0x08009c20
 8007014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007018:	429a      	cmp	r2, r3
 800701a:	bfa8      	it	ge
 800701c:	461a      	movge	r2, r3
 800701e:	2a00      	cmp	r2, #0
 8007020:	4691      	mov	r9, r2
 8007022:	dc37      	bgt.n	8007094 <_printf_float+0x364>
 8007024:	f04f 0b00 	mov.w	fp, #0
 8007028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800702c:	f104 021a 	add.w	r2, r4, #26
 8007030:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007034:	ebaa 0309 	sub.w	r3, sl, r9
 8007038:	455b      	cmp	r3, fp
 800703a:	dc33      	bgt.n	80070a4 <_printf_float+0x374>
 800703c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007040:	429a      	cmp	r2, r3
 8007042:	db3b      	blt.n	80070bc <_printf_float+0x38c>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	07da      	lsls	r2, r3, #31
 8007048:	d438      	bmi.n	80070bc <_printf_float+0x38c>
 800704a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800704c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800704e:	eba2 030a 	sub.w	r3, r2, sl
 8007052:	eba2 0901 	sub.w	r9, r2, r1
 8007056:	4599      	cmp	r9, r3
 8007058:	bfa8      	it	ge
 800705a:	4699      	movge	r9, r3
 800705c:	f1b9 0f00 	cmp.w	r9, #0
 8007060:	dc34      	bgt.n	80070cc <_printf_float+0x39c>
 8007062:	f04f 0800 	mov.w	r8, #0
 8007066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800706a:	f104 0a1a 	add.w	sl, r4, #26
 800706e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	eba3 0309 	sub.w	r3, r3, r9
 8007078:	4543      	cmp	r3, r8
 800707a:	f77f af7a 	ble.w	8006f72 <_printf_float+0x242>
 800707e:	2301      	movs	r3, #1
 8007080:	4652      	mov	r2, sl
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	47b8      	blx	r7
 8007088:	3001      	adds	r0, #1
 800708a:	f43f aeac 	beq.w	8006de6 <_printf_float+0xb6>
 800708e:	f108 0801 	add.w	r8, r8, #1
 8007092:	e7ec      	b.n	800706e <_printf_float+0x33e>
 8007094:	4613      	mov	r3, r2
 8007096:	4631      	mov	r1, r6
 8007098:	4642      	mov	r2, r8
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	d1c0      	bne.n	8007024 <_printf_float+0x2f4>
 80070a2:	e6a0      	b.n	8006de6 <_printf_float+0xb6>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	f43f ae99 	beq.w	8006de6 <_printf_float+0xb6>
 80070b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070b6:	f10b 0b01 	add.w	fp, fp, #1
 80070ba:	e7b9      	b.n	8007030 <_printf_float+0x300>
 80070bc:	4631      	mov	r1, r6
 80070be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	d1bf      	bne.n	800704a <_printf_float+0x31a>
 80070ca:	e68c      	b.n	8006de6 <_printf_float+0xb6>
 80070cc:	464b      	mov	r3, r9
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	eb08 020a 	add.w	r2, r8, sl
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	d1c2      	bne.n	8007062 <_printf_float+0x332>
 80070dc:	e683      	b.n	8006de6 <_printf_float+0xb6>
 80070de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070e0:	2a01      	cmp	r2, #1
 80070e2:	dc01      	bgt.n	80070e8 <_printf_float+0x3b8>
 80070e4:	07db      	lsls	r3, r3, #31
 80070e6:	d537      	bpl.n	8007158 <_printf_float+0x428>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4642      	mov	r2, r8
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f ae77 	beq.w	8006de6 <_printf_float+0xb6>
 80070f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f ae6f 	beq.w	8006de6 <_printf_float+0xb6>
 8007108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800710c:	2200      	movs	r2, #0
 800710e:	2300      	movs	r3, #0
 8007110:	f7f9 fd0a 	bl	8000b28 <__aeabi_dcmpeq>
 8007114:	b9d8      	cbnz	r0, 800714e <_printf_float+0x41e>
 8007116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007118:	f108 0201 	add.w	r2, r8, #1
 800711c:	3b01      	subs	r3, #1
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	d10e      	bne.n	8007146 <_printf_float+0x416>
 8007128:	e65d      	b.n	8006de6 <_printf_float+0xb6>
 800712a:	2301      	movs	r3, #1
 800712c:	464a      	mov	r2, r9
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae56 	beq.w	8006de6 <_printf_float+0xb6>
 800713a:	f108 0801 	add.w	r8, r8, #1
 800713e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007140:	3b01      	subs	r3, #1
 8007142:	4543      	cmp	r3, r8
 8007144:	dcf1      	bgt.n	800712a <_printf_float+0x3fa>
 8007146:	4653      	mov	r3, sl
 8007148:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800714c:	e6e0      	b.n	8006f10 <_printf_float+0x1e0>
 800714e:	f04f 0800 	mov.w	r8, #0
 8007152:	f104 091a 	add.w	r9, r4, #26
 8007156:	e7f2      	b.n	800713e <_printf_float+0x40e>
 8007158:	2301      	movs	r3, #1
 800715a:	4642      	mov	r2, r8
 800715c:	e7df      	b.n	800711e <_printf_float+0x3ee>
 800715e:	2301      	movs	r3, #1
 8007160:	464a      	mov	r2, r9
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f ae3c 	beq.w	8006de6 <_printf_float+0xb6>
 800716e:	f108 0801 	add.w	r8, r8, #1
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007176:	1a5b      	subs	r3, r3, r1
 8007178:	4543      	cmp	r3, r8
 800717a:	dcf0      	bgt.n	800715e <_printf_float+0x42e>
 800717c:	e6fd      	b.n	8006f7a <_printf_float+0x24a>
 800717e:	f04f 0800 	mov.w	r8, #0
 8007182:	f104 0919 	add.w	r9, r4, #25
 8007186:	e7f4      	b.n	8007172 <_printf_float+0x442>

08007188 <_printf_common>:
 8007188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800718c:	4616      	mov	r6, r2
 800718e:	4699      	mov	r9, r3
 8007190:	688a      	ldr	r2, [r1, #8]
 8007192:	690b      	ldr	r3, [r1, #16]
 8007194:	4607      	mov	r7, r0
 8007196:	4293      	cmp	r3, r2
 8007198:	bfb8      	it	lt
 800719a:	4613      	movlt	r3, r2
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071a2:	460c      	mov	r4, r1
 80071a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a8:	b10a      	cbz	r2, 80071ae <_printf_common+0x26>
 80071aa:	3301      	adds	r3, #1
 80071ac:	6033      	str	r3, [r6, #0]
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	0699      	lsls	r1, r3, #26
 80071b2:	bf42      	ittt	mi
 80071b4:	6833      	ldrmi	r3, [r6, #0]
 80071b6:	3302      	addmi	r3, #2
 80071b8:	6033      	strmi	r3, [r6, #0]
 80071ba:	6825      	ldr	r5, [r4, #0]
 80071bc:	f015 0506 	ands.w	r5, r5, #6
 80071c0:	d106      	bne.n	80071d0 <_printf_common+0x48>
 80071c2:	f104 0a19 	add.w	sl, r4, #25
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	6832      	ldr	r2, [r6, #0]
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dc28      	bgt.n	8007222 <_printf_common+0x9a>
 80071d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071d4:	1e13      	subs	r3, r2, #0
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	bf18      	it	ne
 80071da:	2301      	movne	r3, #1
 80071dc:	0692      	lsls	r2, r2, #26
 80071de:	d42d      	bmi.n	800723c <_printf_common+0xb4>
 80071e0:	4649      	mov	r1, r9
 80071e2:	4638      	mov	r0, r7
 80071e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e8:	47c0      	blx	r8
 80071ea:	3001      	adds	r0, #1
 80071ec:	d020      	beq.n	8007230 <_printf_common+0xa8>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	68e5      	ldr	r5, [r4, #12]
 80071f2:	f003 0306 	and.w	r3, r3, #6
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	bf18      	it	ne
 80071fa:	2500      	movne	r5, #0
 80071fc:	6832      	ldr	r2, [r6, #0]
 80071fe:	f04f 0600 	mov.w	r6, #0
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	bf08      	it	eq
 8007206:	1aad      	subeq	r5, r5, r2
 8007208:	6922      	ldr	r2, [r4, #16]
 800720a:	bf08      	it	eq
 800720c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007210:	4293      	cmp	r3, r2
 8007212:	bfc4      	itt	gt
 8007214:	1a9b      	subgt	r3, r3, r2
 8007216:	18ed      	addgt	r5, r5, r3
 8007218:	341a      	adds	r4, #26
 800721a:	42b5      	cmp	r5, r6
 800721c:	d11a      	bne.n	8007254 <_printf_common+0xcc>
 800721e:	2000      	movs	r0, #0
 8007220:	e008      	b.n	8007234 <_printf_common+0xac>
 8007222:	2301      	movs	r3, #1
 8007224:	4652      	mov	r2, sl
 8007226:	4649      	mov	r1, r9
 8007228:	4638      	mov	r0, r7
 800722a:	47c0      	blx	r8
 800722c:	3001      	adds	r0, #1
 800722e:	d103      	bne.n	8007238 <_printf_common+0xb0>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	3501      	adds	r5, #1
 800723a:	e7c4      	b.n	80071c6 <_printf_common+0x3e>
 800723c:	2030      	movs	r0, #48	; 0x30
 800723e:	18e1      	adds	r1, r4, r3
 8007240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800724a:	4422      	add	r2, r4
 800724c:	3302      	adds	r3, #2
 800724e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007252:	e7c5      	b.n	80071e0 <_printf_common+0x58>
 8007254:	2301      	movs	r3, #1
 8007256:	4622      	mov	r2, r4
 8007258:	4649      	mov	r1, r9
 800725a:	4638      	mov	r0, r7
 800725c:	47c0      	blx	r8
 800725e:	3001      	adds	r0, #1
 8007260:	d0e6      	beq.n	8007230 <_printf_common+0xa8>
 8007262:	3601      	adds	r6, #1
 8007264:	e7d9      	b.n	800721a <_printf_common+0x92>
	...

08007268 <_printf_i>:
 8007268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	460c      	mov	r4, r1
 800726e:	7e27      	ldrb	r7, [r4, #24]
 8007270:	4691      	mov	r9, r2
 8007272:	2f78      	cmp	r7, #120	; 0x78
 8007274:	4680      	mov	r8, r0
 8007276:	469a      	mov	sl, r3
 8007278:	990c      	ldr	r1, [sp, #48]	; 0x30
 800727a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800727e:	d807      	bhi.n	8007290 <_printf_i+0x28>
 8007280:	2f62      	cmp	r7, #98	; 0x62
 8007282:	d80a      	bhi.n	800729a <_printf_i+0x32>
 8007284:	2f00      	cmp	r7, #0
 8007286:	f000 80d9 	beq.w	800743c <_printf_i+0x1d4>
 800728a:	2f58      	cmp	r7, #88	; 0x58
 800728c:	f000 80a4 	beq.w	80073d8 <_printf_i+0x170>
 8007290:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007298:	e03a      	b.n	8007310 <_printf_i+0xa8>
 800729a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800729e:	2b15      	cmp	r3, #21
 80072a0:	d8f6      	bhi.n	8007290 <_printf_i+0x28>
 80072a2:	a001      	add	r0, pc, #4	; (adr r0, 80072a8 <_printf_i+0x40>)
 80072a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072a8:	08007301 	.word	0x08007301
 80072ac:	08007315 	.word	0x08007315
 80072b0:	08007291 	.word	0x08007291
 80072b4:	08007291 	.word	0x08007291
 80072b8:	08007291 	.word	0x08007291
 80072bc:	08007291 	.word	0x08007291
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007291 	.word	0x08007291
 80072c8:	08007291 	.word	0x08007291
 80072cc:	08007291 	.word	0x08007291
 80072d0:	08007291 	.word	0x08007291
 80072d4:	08007423 	.word	0x08007423
 80072d8:	08007345 	.word	0x08007345
 80072dc:	08007405 	.word	0x08007405
 80072e0:	08007291 	.word	0x08007291
 80072e4:	08007291 	.word	0x08007291
 80072e8:	08007445 	.word	0x08007445
 80072ec:	08007291 	.word	0x08007291
 80072f0:	08007345 	.word	0x08007345
 80072f4:	08007291 	.word	0x08007291
 80072f8:	08007291 	.word	0x08007291
 80072fc:	0800740d 	.word	0x0800740d
 8007300:	680b      	ldr	r3, [r1, #0]
 8007302:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	600a      	str	r2, [r1, #0]
 800730c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007310:	2301      	movs	r3, #1
 8007312:	e0a4      	b.n	800745e <_printf_i+0x1f6>
 8007314:	6825      	ldr	r5, [r4, #0]
 8007316:	6808      	ldr	r0, [r1, #0]
 8007318:	062e      	lsls	r6, r5, #24
 800731a:	f100 0304 	add.w	r3, r0, #4
 800731e:	d50a      	bpl.n	8007336 <_printf_i+0xce>
 8007320:	6805      	ldr	r5, [r0, #0]
 8007322:	600b      	str	r3, [r1, #0]
 8007324:	2d00      	cmp	r5, #0
 8007326:	da03      	bge.n	8007330 <_printf_i+0xc8>
 8007328:	232d      	movs	r3, #45	; 0x2d
 800732a:	426d      	negs	r5, r5
 800732c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007330:	230a      	movs	r3, #10
 8007332:	485e      	ldr	r0, [pc, #376]	; (80074ac <_printf_i+0x244>)
 8007334:	e019      	b.n	800736a <_printf_i+0x102>
 8007336:	f015 0f40 	tst.w	r5, #64	; 0x40
 800733a:	6805      	ldr	r5, [r0, #0]
 800733c:	600b      	str	r3, [r1, #0]
 800733e:	bf18      	it	ne
 8007340:	b22d      	sxthne	r5, r5
 8007342:	e7ef      	b.n	8007324 <_printf_i+0xbc>
 8007344:	680b      	ldr	r3, [r1, #0]
 8007346:	6825      	ldr	r5, [r4, #0]
 8007348:	1d18      	adds	r0, r3, #4
 800734a:	6008      	str	r0, [r1, #0]
 800734c:	0628      	lsls	r0, r5, #24
 800734e:	d501      	bpl.n	8007354 <_printf_i+0xec>
 8007350:	681d      	ldr	r5, [r3, #0]
 8007352:	e002      	b.n	800735a <_printf_i+0xf2>
 8007354:	0669      	lsls	r1, r5, #25
 8007356:	d5fb      	bpl.n	8007350 <_printf_i+0xe8>
 8007358:	881d      	ldrh	r5, [r3, #0]
 800735a:	2f6f      	cmp	r7, #111	; 0x6f
 800735c:	bf0c      	ite	eq
 800735e:	2308      	moveq	r3, #8
 8007360:	230a      	movne	r3, #10
 8007362:	4852      	ldr	r0, [pc, #328]	; (80074ac <_printf_i+0x244>)
 8007364:	2100      	movs	r1, #0
 8007366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800736a:	6866      	ldr	r6, [r4, #4]
 800736c:	2e00      	cmp	r6, #0
 800736e:	bfa8      	it	ge
 8007370:	6821      	ldrge	r1, [r4, #0]
 8007372:	60a6      	str	r6, [r4, #8]
 8007374:	bfa4      	itt	ge
 8007376:	f021 0104 	bicge.w	r1, r1, #4
 800737a:	6021      	strge	r1, [r4, #0]
 800737c:	b90d      	cbnz	r5, 8007382 <_printf_i+0x11a>
 800737e:	2e00      	cmp	r6, #0
 8007380:	d04d      	beq.n	800741e <_printf_i+0x1b6>
 8007382:	4616      	mov	r6, r2
 8007384:	fbb5 f1f3 	udiv	r1, r5, r3
 8007388:	fb03 5711 	mls	r7, r3, r1, r5
 800738c:	5dc7      	ldrb	r7, [r0, r7]
 800738e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007392:	462f      	mov	r7, r5
 8007394:	42bb      	cmp	r3, r7
 8007396:	460d      	mov	r5, r1
 8007398:	d9f4      	bls.n	8007384 <_printf_i+0x11c>
 800739a:	2b08      	cmp	r3, #8
 800739c:	d10b      	bne.n	80073b6 <_printf_i+0x14e>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	07df      	lsls	r7, r3, #31
 80073a2:	d508      	bpl.n	80073b6 <_printf_i+0x14e>
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	6861      	ldr	r1, [r4, #4]
 80073a8:	4299      	cmp	r1, r3
 80073aa:	bfde      	ittt	le
 80073ac:	2330      	movle	r3, #48	; 0x30
 80073ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073b6:	1b92      	subs	r2, r2, r6
 80073b8:	6122      	str	r2, [r4, #16]
 80073ba:	464b      	mov	r3, r9
 80073bc:	4621      	mov	r1, r4
 80073be:	4640      	mov	r0, r8
 80073c0:	f8cd a000 	str.w	sl, [sp]
 80073c4:	aa03      	add	r2, sp, #12
 80073c6:	f7ff fedf 	bl	8007188 <_printf_common>
 80073ca:	3001      	adds	r0, #1
 80073cc:	d14c      	bne.n	8007468 <_printf_i+0x200>
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295
 80073d2:	b004      	add	sp, #16
 80073d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d8:	4834      	ldr	r0, [pc, #208]	; (80074ac <_printf_i+0x244>)
 80073da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073de:	680e      	ldr	r6, [r1, #0]
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80073e6:	061f      	lsls	r7, r3, #24
 80073e8:	600e      	str	r6, [r1, #0]
 80073ea:	d514      	bpl.n	8007416 <_printf_i+0x1ae>
 80073ec:	07d9      	lsls	r1, r3, #31
 80073ee:	bf44      	itt	mi
 80073f0:	f043 0320 	orrmi.w	r3, r3, #32
 80073f4:	6023      	strmi	r3, [r4, #0]
 80073f6:	b91d      	cbnz	r5, 8007400 <_printf_i+0x198>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	f023 0320 	bic.w	r3, r3, #32
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	2310      	movs	r3, #16
 8007402:	e7af      	b.n	8007364 <_printf_i+0xfc>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	f043 0320 	orr.w	r3, r3, #32
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	2378      	movs	r3, #120	; 0x78
 800740e:	4828      	ldr	r0, [pc, #160]	; (80074b0 <_printf_i+0x248>)
 8007410:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007414:	e7e3      	b.n	80073de <_printf_i+0x176>
 8007416:	065e      	lsls	r6, r3, #25
 8007418:	bf48      	it	mi
 800741a:	b2ad      	uxthmi	r5, r5
 800741c:	e7e6      	b.n	80073ec <_printf_i+0x184>
 800741e:	4616      	mov	r6, r2
 8007420:	e7bb      	b.n	800739a <_printf_i+0x132>
 8007422:	680b      	ldr	r3, [r1, #0]
 8007424:	6826      	ldr	r6, [r4, #0]
 8007426:	1d1d      	adds	r5, r3, #4
 8007428:	6960      	ldr	r0, [r4, #20]
 800742a:	600d      	str	r5, [r1, #0]
 800742c:	0635      	lsls	r5, r6, #24
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	d501      	bpl.n	8007436 <_printf_i+0x1ce>
 8007432:	6018      	str	r0, [r3, #0]
 8007434:	e002      	b.n	800743c <_printf_i+0x1d4>
 8007436:	0671      	lsls	r1, r6, #25
 8007438:	d5fb      	bpl.n	8007432 <_printf_i+0x1ca>
 800743a:	8018      	strh	r0, [r3, #0]
 800743c:	2300      	movs	r3, #0
 800743e:	4616      	mov	r6, r2
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	e7ba      	b.n	80073ba <_printf_i+0x152>
 8007444:	680b      	ldr	r3, [r1, #0]
 8007446:	1d1a      	adds	r2, r3, #4
 8007448:	600a      	str	r2, [r1, #0]
 800744a:	681e      	ldr	r6, [r3, #0]
 800744c:	2100      	movs	r1, #0
 800744e:	4630      	mov	r0, r6
 8007450:	6862      	ldr	r2, [r4, #4]
 8007452:	f000 fed7 	bl	8008204 <memchr>
 8007456:	b108      	cbz	r0, 800745c <_printf_i+0x1f4>
 8007458:	1b80      	subs	r0, r0, r6
 800745a:	6060      	str	r0, [r4, #4]
 800745c:	6863      	ldr	r3, [r4, #4]
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	2300      	movs	r3, #0
 8007462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007466:	e7a8      	b.n	80073ba <_printf_i+0x152>
 8007468:	4632      	mov	r2, r6
 800746a:	4649      	mov	r1, r9
 800746c:	4640      	mov	r0, r8
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	47d0      	blx	sl
 8007472:	3001      	adds	r0, #1
 8007474:	d0ab      	beq.n	80073ce <_printf_i+0x166>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	079b      	lsls	r3, r3, #30
 800747a:	d413      	bmi.n	80074a4 <_printf_i+0x23c>
 800747c:	68e0      	ldr	r0, [r4, #12]
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	4298      	cmp	r0, r3
 8007482:	bfb8      	it	lt
 8007484:	4618      	movlt	r0, r3
 8007486:	e7a4      	b.n	80073d2 <_printf_i+0x16a>
 8007488:	2301      	movs	r3, #1
 800748a:	4632      	mov	r2, r6
 800748c:	4649      	mov	r1, r9
 800748e:	4640      	mov	r0, r8
 8007490:	47d0      	blx	sl
 8007492:	3001      	adds	r0, #1
 8007494:	d09b      	beq.n	80073ce <_printf_i+0x166>
 8007496:	3501      	adds	r5, #1
 8007498:	68e3      	ldr	r3, [r4, #12]
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	1a5b      	subs	r3, r3, r1
 800749e:	42ab      	cmp	r3, r5
 80074a0:	dcf2      	bgt.n	8007488 <_printf_i+0x220>
 80074a2:	e7eb      	b.n	800747c <_printf_i+0x214>
 80074a4:	2500      	movs	r5, #0
 80074a6:	f104 0619 	add.w	r6, r4, #25
 80074aa:	e7f5      	b.n	8007498 <_printf_i+0x230>
 80074ac:	08009c22 	.word	0x08009c22
 80074b0:	08009c33 	.word	0x08009c33

080074b4 <siprintf>:
 80074b4:	b40e      	push	{r1, r2, r3}
 80074b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074ba:	b500      	push	{lr}
 80074bc:	b09c      	sub	sp, #112	; 0x70
 80074be:	ab1d      	add	r3, sp, #116	; 0x74
 80074c0:	9002      	str	r0, [sp, #8]
 80074c2:	9006      	str	r0, [sp, #24]
 80074c4:	9107      	str	r1, [sp, #28]
 80074c6:	9104      	str	r1, [sp, #16]
 80074c8:	4808      	ldr	r0, [pc, #32]	; (80074ec <siprintf+0x38>)
 80074ca:	4909      	ldr	r1, [pc, #36]	; (80074f0 <siprintf+0x3c>)
 80074cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d0:	9105      	str	r1, [sp, #20]
 80074d2:	6800      	ldr	r0, [r0, #0]
 80074d4:	a902      	add	r1, sp, #8
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	f001 fb42 	bl	8008b60 <_svfiprintf_r>
 80074dc:	2200      	movs	r2, #0
 80074de:	9b02      	ldr	r3, [sp, #8]
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	b01c      	add	sp, #112	; 0x70
 80074e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e8:	b003      	add	sp, #12
 80074ea:	4770      	bx	lr
 80074ec:	20000014 	.word	0x20000014
 80074f0:	ffff0208 	.word	0xffff0208

080074f4 <quorem>:
 80074f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	6903      	ldr	r3, [r0, #16]
 80074fa:	690c      	ldr	r4, [r1, #16]
 80074fc:	4607      	mov	r7, r0
 80074fe:	42a3      	cmp	r3, r4
 8007500:	f2c0 8083 	blt.w	800760a <quorem+0x116>
 8007504:	3c01      	subs	r4, #1
 8007506:	f100 0514 	add.w	r5, r0, #20
 800750a:	f101 0814 	add.w	r8, r1, #20
 800750e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800751c:	3301      	adds	r3, #1
 800751e:	429a      	cmp	r2, r3
 8007520:	fbb2 f6f3 	udiv	r6, r2, r3
 8007524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800752c:	d332      	bcc.n	8007594 <quorem+0xa0>
 800752e:	f04f 0e00 	mov.w	lr, #0
 8007532:	4640      	mov	r0, r8
 8007534:	46ac      	mov	ip, r5
 8007536:	46f2      	mov	sl, lr
 8007538:	f850 2b04 	ldr.w	r2, [r0], #4
 800753c:	b293      	uxth	r3, r2
 800753e:	fb06 e303 	mla	r3, r6, r3, lr
 8007542:	0c12      	lsrs	r2, r2, #16
 8007544:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007548:	fb06 e202 	mla	r2, r6, r2, lr
 800754c:	b29b      	uxth	r3, r3
 800754e:	ebaa 0303 	sub.w	r3, sl, r3
 8007552:	f8dc a000 	ldr.w	sl, [ip]
 8007556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800755a:	fa1f fa8a 	uxth.w	sl, sl
 800755e:	4453      	add	r3, sl
 8007560:	fa1f fa82 	uxth.w	sl, r2
 8007564:	f8dc 2000 	ldr.w	r2, [ip]
 8007568:	4581      	cmp	r9, r0
 800756a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800756e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007578:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800757c:	f84c 3b04 	str.w	r3, [ip], #4
 8007580:	d2da      	bcs.n	8007538 <quorem+0x44>
 8007582:	f855 300b 	ldr.w	r3, [r5, fp]
 8007586:	b92b      	cbnz	r3, 8007594 <quorem+0xa0>
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	3b04      	subs	r3, #4
 800758c:	429d      	cmp	r5, r3
 800758e:	461a      	mov	r2, r3
 8007590:	d32f      	bcc.n	80075f2 <quorem+0xfe>
 8007592:	613c      	str	r4, [r7, #16]
 8007594:	4638      	mov	r0, r7
 8007596:	f001 f8cb 	bl	8008730 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	db25      	blt.n	80075ea <quorem+0xf6>
 800759e:	4628      	mov	r0, r5
 80075a0:	f04f 0c00 	mov.w	ip, #0
 80075a4:	3601      	adds	r6, #1
 80075a6:	f858 1b04 	ldr.w	r1, [r8], #4
 80075aa:	f8d0 e000 	ldr.w	lr, [r0]
 80075ae:	b28b      	uxth	r3, r1
 80075b0:	ebac 0303 	sub.w	r3, ip, r3
 80075b4:	fa1f f28e 	uxth.w	r2, lr
 80075b8:	4413      	add	r3, r2
 80075ba:	0c0a      	lsrs	r2, r1, #16
 80075bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ca:	45c1      	cmp	r9, r8
 80075cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075d0:	f840 3b04 	str.w	r3, [r0], #4
 80075d4:	d2e7      	bcs.n	80075a6 <quorem+0xb2>
 80075d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075de:	b922      	cbnz	r2, 80075ea <quorem+0xf6>
 80075e0:	3b04      	subs	r3, #4
 80075e2:	429d      	cmp	r5, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	d30a      	bcc.n	80075fe <quorem+0x10a>
 80075e8:	613c      	str	r4, [r7, #16]
 80075ea:	4630      	mov	r0, r6
 80075ec:	b003      	add	sp, #12
 80075ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	3b04      	subs	r3, #4
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	d1cb      	bne.n	8007592 <quorem+0x9e>
 80075fa:	3c01      	subs	r4, #1
 80075fc:	e7c6      	b.n	800758c <quorem+0x98>
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	3b04      	subs	r3, #4
 8007602:	2a00      	cmp	r2, #0
 8007604:	d1f0      	bne.n	80075e8 <quorem+0xf4>
 8007606:	3c01      	subs	r4, #1
 8007608:	e7eb      	b.n	80075e2 <quorem+0xee>
 800760a:	2000      	movs	r0, #0
 800760c:	e7ee      	b.n	80075ec <quorem+0xf8>
	...

08007610 <_dtoa_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	4616      	mov	r6, r2
 8007616:	461f      	mov	r7, r3
 8007618:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800761a:	b099      	sub	sp, #100	; 0x64
 800761c:	4605      	mov	r5, r0
 800761e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007622:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007626:	b974      	cbnz	r4, 8007646 <_dtoa_r+0x36>
 8007628:	2010      	movs	r0, #16
 800762a:	f000 fde3 	bl	80081f4 <malloc>
 800762e:	4602      	mov	r2, r0
 8007630:	6268      	str	r0, [r5, #36]	; 0x24
 8007632:	b920      	cbnz	r0, 800763e <_dtoa_r+0x2e>
 8007634:	21ea      	movs	r1, #234	; 0xea
 8007636:	4bae      	ldr	r3, [pc, #696]	; (80078f0 <_dtoa_r+0x2e0>)
 8007638:	48ae      	ldr	r0, [pc, #696]	; (80078f4 <_dtoa_r+0x2e4>)
 800763a:	f001 fba1 	bl	8008d80 <__assert_func>
 800763e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007642:	6004      	str	r4, [r0, #0]
 8007644:	60c4      	str	r4, [r0, #12]
 8007646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	b151      	cbz	r1, 8007662 <_dtoa_r+0x52>
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	2301      	movs	r3, #1
 8007650:	4093      	lsls	r3, r2
 8007652:	604a      	str	r2, [r1, #4]
 8007654:	608b      	str	r3, [r1, #8]
 8007656:	4628      	mov	r0, r5
 8007658:	f000 fe30 	bl	80082bc <_Bfree>
 800765c:	2200      	movs	r2, #0
 800765e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	1e3b      	subs	r3, r7, #0
 8007664:	bfaf      	iteee	ge
 8007666:	2300      	movge	r3, #0
 8007668:	2201      	movlt	r2, #1
 800766a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800766e:	9305      	strlt	r3, [sp, #20]
 8007670:	bfa8      	it	ge
 8007672:	f8c8 3000 	strge.w	r3, [r8]
 8007676:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800767a:	4b9f      	ldr	r3, [pc, #636]	; (80078f8 <_dtoa_r+0x2e8>)
 800767c:	bfb8      	it	lt
 800767e:	f8c8 2000 	strlt.w	r2, [r8]
 8007682:	ea33 0309 	bics.w	r3, r3, r9
 8007686:	d119      	bne.n	80076bc <_dtoa_r+0xac>
 8007688:	f242 730f 	movw	r3, #9999	; 0x270f
 800768c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007694:	4333      	orrs	r3, r6
 8007696:	f000 8580 	beq.w	800819a <_dtoa_r+0xb8a>
 800769a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800769c:	b953      	cbnz	r3, 80076b4 <_dtoa_r+0xa4>
 800769e:	4b97      	ldr	r3, [pc, #604]	; (80078fc <_dtoa_r+0x2ec>)
 80076a0:	e022      	b.n	80076e8 <_dtoa_r+0xd8>
 80076a2:	4b97      	ldr	r3, [pc, #604]	; (8007900 <_dtoa_r+0x2f0>)
 80076a4:	9308      	str	r3, [sp, #32]
 80076a6:	3308      	adds	r3, #8
 80076a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	9808      	ldr	r0, [sp, #32]
 80076ae:	b019      	add	sp, #100	; 0x64
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	4b91      	ldr	r3, [pc, #580]	; (80078fc <_dtoa_r+0x2ec>)
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	3303      	adds	r3, #3
 80076ba:	e7f5      	b.n	80076a8 <_dtoa_r+0x98>
 80076bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80076c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 fa2c 	bl	8000b28 <__aeabi_dcmpeq>
 80076d0:	4680      	mov	r8, r0
 80076d2:	b158      	cbz	r0, 80076ec <_dtoa_r+0xdc>
 80076d4:	2301      	movs	r3, #1
 80076d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8559 	beq.w	8008194 <_dtoa_r+0xb84>
 80076e2:	4888      	ldr	r0, [pc, #544]	; (8007904 <_dtoa_r+0x2f4>)
 80076e4:	6018      	str	r0, [r3, #0]
 80076e6:	1e43      	subs	r3, r0, #1
 80076e8:	9308      	str	r3, [sp, #32]
 80076ea:	e7df      	b.n	80076ac <_dtoa_r+0x9c>
 80076ec:	ab16      	add	r3, sp, #88	; 0x58
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	ab17      	add	r3, sp, #92	; 0x5c
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4628      	mov	r0, r5
 80076f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80076fa:	f001 f8c5 	bl	8008888 <__d2b>
 80076fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007702:	4682      	mov	sl, r0
 8007704:	2c00      	cmp	r4, #0
 8007706:	d07e      	beq.n	8007806 <_dtoa_r+0x1f6>
 8007708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007716:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800771a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800771e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007722:	2200      	movs	r2, #0
 8007724:	4b78      	ldr	r3, [pc, #480]	; (8007908 <_dtoa_r+0x2f8>)
 8007726:	f7f8 fddf 	bl	80002e8 <__aeabi_dsub>
 800772a:	a36b      	add	r3, pc, #428	; (adr r3, 80078d8 <_dtoa_r+0x2c8>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 ff92 	bl	8000658 <__aeabi_dmul>
 8007734:	a36a      	add	r3, pc, #424	; (adr r3, 80078e0 <_dtoa_r+0x2d0>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f8 fdd7 	bl	80002ec <__adddf3>
 800773e:	4606      	mov	r6, r0
 8007740:	4620      	mov	r0, r4
 8007742:	460f      	mov	r7, r1
 8007744:	f7f8 ff1e 	bl	8000584 <__aeabi_i2d>
 8007748:	a367      	add	r3, pc, #412	; (adr r3, 80078e8 <_dtoa_r+0x2d8>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f8 ff83 	bl	8000658 <__aeabi_dmul>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f8 fdc7 	bl	80002ec <__adddf3>
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	f7f9 fa29 	bl	8000bb8 <__aeabi_d2iz>
 8007766:	2200      	movs	r2, #0
 8007768:	4681      	mov	r9, r0
 800776a:	2300      	movs	r3, #0
 800776c:	4630      	mov	r0, r6
 800776e:	4639      	mov	r1, r7
 8007770:	f7f9 f9e4 	bl	8000b3c <__aeabi_dcmplt>
 8007774:	b148      	cbz	r0, 800778a <_dtoa_r+0x17a>
 8007776:	4648      	mov	r0, r9
 8007778:	f7f8 ff04 	bl	8000584 <__aeabi_i2d>
 800777c:	4632      	mov	r2, r6
 800777e:	463b      	mov	r3, r7
 8007780:	f7f9 f9d2 	bl	8000b28 <__aeabi_dcmpeq>
 8007784:	b908      	cbnz	r0, 800778a <_dtoa_r+0x17a>
 8007786:	f109 39ff 	add.w	r9, r9, #4294967295
 800778a:	f1b9 0f16 	cmp.w	r9, #22
 800778e:	d857      	bhi.n	8007840 <_dtoa_r+0x230>
 8007790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007794:	4b5d      	ldr	r3, [pc, #372]	; (800790c <_dtoa_r+0x2fc>)
 8007796:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f9 f9cd 	bl	8000b3c <__aeabi_dcmplt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d04e      	beq.n	8007844 <_dtoa_r+0x234>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80077ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077b0:	1b1c      	subs	r4, r3, r4
 80077b2:	1e63      	subs	r3, r4, #1
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	bf49      	itett	mi
 80077b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80077bc:	2300      	movpl	r3, #0
 80077be:	9306      	strmi	r3, [sp, #24]
 80077c0:	2300      	movmi	r3, #0
 80077c2:	bf54      	ite	pl
 80077c4:	9306      	strpl	r3, [sp, #24]
 80077c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	db3c      	blt.n	8007848 <_dtoa_r+0x238>
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80077d4:	444b      	add	r3, r9
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	2300      	movs	r3, #0
 80077da:	930a      	str	r3, [sp, #40]	; 0x28
 80077dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077de:	2b09      	cmp	r3, #9
 80077e0:	d86c      	bhi.n	80078bc <_dtoa_r+0x2ac>
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	bfc4      	itt	gt
 80077e6:	3b04      	subgt	r3, #4
 80077e8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80077ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077ec:	bfc8      	it	gt
 80077ee:	2400      	movgt	r4, #0
 80077f0:	f1a3 0302 	sub.w	r3, r3, #2
 80077f4:	bfd8      	it	le
 80077f6:	2401      	movle	r4, #1
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	f200 808b 	bhi.w	8007914 <_dtoa_r+0x304>
 80077fe:	e8df f003 	tbb	[pc, r3]
 8007802:	4f2d      	.short	0x4f2d
 8007804:	5b4d      	.short	0x5b4d
 8007806:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800780a:	441c      	add	r4, r3
 800780c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007810:	2b20      	cmp	r3, #32
 8007812:	bfc3      	ittte	gt
 8007814:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007818:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800781c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007820:	f1c3 0320 	rsble	r3, r3, #32
 8007824:	bfc6      	itte	gt
 8007826:	fa26 f000 	lsrgt.w	r0, r6, r0
 800782a:	4318      	orrgt	r0, r3
 800782c:	fa06 f003 	lslle.w	r0, r6, r3
 8007830:	f7f8 fe98 	bl	8000564 <__aeabi_ui2d>
 8007834:	2301      	movs	r3, #1
 8007836:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800783a:	3c01      	subs	r4, #1
 800783c:	9313      	str	r3, [sp, #76]	; 0x4c
 800783e:	e770      	b.n	8007722 <_dtoa_r+0x112>
 8007840:	2301      	movs	r3, #1
 8007842:	e7b3      	b.n	80077ac <_dtoa_r+0x19c>
 8007844:	900f      	str	r0, [sp, #60]	; 0x3c
 8007846:	e7b2      	b.n	80077ae <_dtoa_r+0x19e>
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	eba3 0309 	sub.w	r3, r3, r9
 800784e:	9306      	str	r3, [sp, #24]
 8007850:	f1c9 0300 	rsb	r3, r9, #0
 8007854:	930a      	str	r3, [sp, #40]	; 0x28
 8007856:	2300      	movs	r3, #0
 8007858:	930e      	str	r3, [sp, #56]	; 0x38
 800785a:	e7bf      	b.n	80077dc <_dtoa_r+0x1cc>
 800785c:	2300      	movs	r3, #0
 800785e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007860:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007862:	2b00      	cmp	r3, #0
 8007864:	dc59      	bgt.n	800791a <_dtoa_r+0x30a>
 8007866:	f04f 0b01 	mov.w	fp, #1
 800786a:	465b      	mov	r3, fp
 800786c:	f8cd b008 	str.w	fp, [sp, #8]
 8007870:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007874:	2200      	movs	r2, #0
 8007876:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007878:	6042      	str	r2, [r0, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	f102 0614 	add.w	r6, r2, #20
 8007880:	429e      	cmp	r6, r3
 8007882:	6841      	ldr	r1, [r0, #4]
 8007884:	d94f      	bls.n	8007926 <_dtoa_r+0x316>
 8007886:	4628      	mov	r0, r5
 8007888:	f000 fcd8 	bl	800823c <_Balloc>
 800788c:	9008      	str	r0, [sp, #32]
 800788e:	2800      	cmp	r0, #0
 8007890:	d14d      	bne.n	800792e <_dtoa_r+0x31e>
 8007892:	4602      	mov	r2, r0
 8007894:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <_dtoa_r+0x300>)
 800789a:	e6cd      	b.n	8007638 <_dtoa_r+0x28>
 800789c:	2301      	movs	r3, #1
 800789e:	e7de      	b.n	800785e <_dtoa_r+0x24e>
 80078a0:	2300      	movs	r3, #0
 80078a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078a6:	eb09 0b03 	add.w	fp, r9, r3
 80078aa:	f10b 0301 	add.w	r3, fp, #1
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	9302      	str	r3, [sp, #8]
 80078b2:	bfb8      	it	lt
 80078b4:	2301      	movlt	r3, #1
 80078b6:	e7dd      	b.n	8007874 <_dtoa_r+0x264>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7f2      	b.n	80078a2 <_dtoa_r+0x292>
 80078bc:	2401      	movs	r4, #1
 80078be:	2300      	movs	r3, #0
 80078c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80078c2:	9322      	str	r3, [sp, #136]	; 0x88
 80078c4:	f04f 3bff 	mov.w	fp, #4294967295
 80078c8:	2200      	movs	r2, #0
 80078ca:	2312      	movs	r3, #18
 80078cc:	f8cd b008 	str.w	fp, [sp, #8]
 80078d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80078d2:	e7cf      	b.n	8007874 <_dtoa_r+0x264>
 80078d4:	f3af 8000 	nop.w
 80078d8:	636f4361 	.word	0x636f4361
 80078dc:	3fd287a7 	.word	0x3fd287a7
 80078e0:	8b60c8b3 	.word	0x8b60c8b3
 80078e4:	3fc68a28 	.word	0x3fc68a28
 80078e8:	509f79fb 	.word	0x509f79fb
 80078ec:	3fd34413 	.word	0x3fd34413
 80078f0:	08009c51 	.word	0x08009c51
 80078f4:	08009c68 	.word	0x08009c68
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	08009c4d 	.word	0x08009c4d
 8007900:	08009c44 	.word	0x08009c44
 8007904:	08009c21 	.word	0x08009c21
 8007908:	3ff80000 	.word	0x3ff80000
 800790c:	08009d60 	.word	0x08009d60
 8007910:	08009cc7 	.word	0x08009cc7
 8007914:	2301      	movs	r3, #1
 8007916:	930b      	str	r3, [sp, #44]	; 0x2c
 8007918:	e7d4      	b.n	80078c4 <_dtoa_r+0x2b4>
 800791a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800791e:	465b      	mov	r3, fp
 8007920:	f8cd b008 	str.w	fp, [sp, #8]
 8007924:	e7a6      	b.n	8007874 <_dtoa_r+0x264>
 8007926:	3101      	adds	r1, #1
 8007928:	6041      	str	r1, [r0, #4]
 800792a:	0052      	lsls	r2, r2, #1
 800792c:	e7a6      	b.n	800787c <_dtoa_r+0x26c>
 800792e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007930:	9a08      	ldr	r2, [sp, #32]
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	9b02      	ldr	r3, [sp, #8]
 8007936:	2b0e      	cmp	r3, #14
 8007938:	f200 80a8 	bhi.w	8007a8c <_dtoa_r+0x47c>
 800793c:	2c00      	cmp	r4, #0
 800793e:	f000 80a5 	beq.w	8007a8c <_dtoa_r+0x47c>
 8007942:	f1b9 0f00 	cmp.w	r9, #0
 8007946:	dd34      	ble.n	80079b2 <_dtoa_r+0x3a2>
 8007948:	4a9a      	ldr	r2, [pc, #616]	; (8007bb4 <_dtoa_r+0x5a4>)
 800794a:	f009 030f 	and.w	r3, r9, #15
 800794e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007952:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800795a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800795e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007962:	d016      	beq.n	8007992 <_dtoa_r+0x382>
 8007964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007968:	4b93      	ldr	r3, [pc, #588]	; (8007bb8 <_dtoa_r+0x5a8>)
 800796a:	2703      	movs	r7, #3
 800796c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007970:	f7f8 ff9c 	bl	80008ac <__aeabi_ddiv>
 8007974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007978:	f004 040f 	and.w	r4, r4, #15
 800797c:	4e8e      	ldr	r6, [pc, #568]	; (8007bb8 <_dtoa_r+0x5a8>)
 800797e:	b954      	cbnz	r4, 8007996 <_dtoa_r+0x386>
 8007980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007988:	f7f8 ff90 	bl	80008ac <__aeabi_ddiv>
 800798c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007990:	e029      	b.n	80079e6 <_dtoa_r+0x3d6>
 8007992:	2702      	movs	r7, #2
 8007994:	e7f2      	b.n	800797c <_dtoa_r+0x36c>
 8007996:	07e1      	lsls	r1, r4, #31
 8007998:	d508      	bpl.n	80079ac <_dtoa_r+0x39c>
 800799a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800799e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079a2:	f7f8 fe59 	bl	8000658 <__aeabi_dmul>
 80079a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079aa:	3701      	adds	r7, #1
 80079ac:	1064      	asrs	r4, r4, #1
 80079ae:	3608      	adds	r6, #8
 80079b0:	e7e5      	b.n	800797e <_dtoa_r+0x36e>
 80079b2:	f000 80a5 	beq.w	8007b00 <_dtoa_r+0x4f0>
 80079b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079ba:	f1c9 0400 	rsb	r4, r9, #0
 80079be:	4b7d      	ldr	r3, [pc, #500]	; (8007bb4 <_dtoa_r+0x5a4>)
 80079c0:	f004 020f 	and.w	r2, r4, #15
 80079c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	f7f8 fe44 	bl	8000658 <__aeabi_dmul>
 80079d0:	2702      	movs	r7, #2
 80079d2:	2300      	movs	r3, #0
 80079d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079d8:	4e77      	ldr	r6, [pc, #476]	; (8007bb8 <_dtoa_r+0x5a8>)
 80079da:	1124      	asrs	r4, r4, #4
 80079dc:	2c00      	cmp	r4, #0
 80079de:	f040 8084 	bne.w	8007aea <_dtoa_r+0x4da>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1d2      	bne.n	800798c <_dtoa_r+0x37c>
 80079e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 808b 	beq.w	8007b04 <_dtoa_r+0x4f4>
 80079ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80079f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079fa:	2200      	movs	r2, #0
 80079fc:	4b6f      	ldr	r3, [pc, #444]	; (8007bbc <_dtoa_r+0x5ac>)
 80079fe:	f7f9 f89d 	bl	8000b3c <__aeabi_dcmplt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d07e      	beq.n	8007b04 <_dtoa_r+0x4f4>
 8007a06:	9b02      	ldr	r3, [sp, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d07b      	beq.n	8007b04 <_dtoa_r+0x4f4>
 8007a0c:	f1bb 0f00 	cmp.w	fp, #0
 8007a10:	dd38      	ble.n	8007a84 <_dtoa_r+0x474>
 8007a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a16:	2200      	movs	r2, #0
 8007a18:	4b69      	ldr	r3, [pc, #420]	; (8007bc0 <_dtoa_r+0x5b0>)
 8007a1a:	f7f8 fe1d 	bl	8000658 <__aeabi_dmul>
 8007a1e:	465c      	mov	r4, fp
 8007a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a24:	f109 38ff 	add.w	r8, r9, #4294967295
 8007a28:	3701      	adds	r7, #1
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f7f8 fdaa 	bl	8000584 <__aeabi_i2d>
 8007a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a34:	f7f8 fe10 	bl	8000658 <__aeabi_dmul>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4b62      	ldr	r3, [pc, #392]	; (8007bc4 <_dtoa_r+0x5b4>)
 8007a3c:	f7f8 fc56 	bl	80002ec <__adddf3>
 8007a40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a48:	9611      	str	r6, [sp, #68]	; 0x44
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d15d      	bne.n	8007b0a <_dtoa_r+0x4fa>
 8007a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a52:	2200      	movs	r2, #0
 8007a54:	4b5c      	ldr	r3, [pc, #368]	; (8007bc8 <_dtoa_r+0x5b8>)
 8007a56:	f7f8 fc47 	bl	80002e8 <__aeabi_dsub>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a62:	4633      	mov	r3, r6
 8007a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a66:	f7f9 f887 	bl	8000b78 <__aeabi_dcmpgt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f040 829e 	bne.w	8007fac <_dtoa_r+0x99c>
 8007a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a7a:	f7f9 f85f 	bl	8000b3c <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f040 8292 	bne.w	8007fa8 <_dtoa_r+0x998>
 8007a84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007a88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f2c0 8153 	blt.w	8007d3a <_dtoa_r+0x72a>
 8007a94:	f1b9 0f0e 	cmp.w	r9, #14
 8007a98:	f300 814f 	bgt.w	8007d3a <_dtoa_r+0x72a>
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <_dtoa_r+0x5a4>)
 8007a9e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007aa6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f280 80db 	bge.w	8007c68 <_dtoa_r+0x658>
 8007ab2:	9b02      	ldr	r3, [sp, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f300 80d7 	bgt.w	8007c68 <_dtoa_r+0x658>
 8007aba:	f040 8274 	bne.w	8007fa6 <_dtoa_r+0x996>
 8007abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4b40      	ldr	r3, [pc, #256]	; (8007bc8 <_dtoa_r+0x5b8>)
 8007ac6:	f7f8 fdc7 	bl	8000658 <__aeabi_dmul>
 8007aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ace:	f7f9 f849 	bl	8000b64 <__aeabi_dcmpge>
 8007ad2:	9c02      	ldr	r4, [sp, #8]
 8007ad4:	4626      	mov	r6, r4
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f040 824a 	bne.w	8007f70 <_dtoa_r+0x960>
 8007adc:	2331      	movs	r3, #49	; 0x31
 8007ade:	9f08      	ldr	r7, [sp, #32]
 8007ae0:	f109 0901 	add.w	r9, r9, #1
 8007ae4:	f807 3b01 	strb.w	r3, [r7], #1
 8007ae8:	e246      	b.n	8007f78 <_dtoa_r+0x968>
 8007aea:	07e2      	lsls	r2, r4, #31
 8007aec:	d505      	bpl.n	8007afa <_dtoa_r+0x4ea>
 8007aee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007af2:	f7f8 fdb1 	bl	8000658 <__aeabi_dmul>
 8007af6:	2301      	movs	r3, #1
 8007af8:	3701      	adds	r7, #1
 8007afa:	1064      	asrs	r4, r4, #1
 8007afc:	3608      	adds	r6, #8
 8007afe:	e76d      	b.n	80079dc <_dtoa_r+0x3cc>
 8007b00:	2702      	movs	r7, #2
 8007b02:	e770      	b.n	80079e6 <_dtoa_r+0x3d6>
 8007b04:	46c8      	mov	r8, r9
 8007b06:	9c02      	ldr	r4, [sp, #8]
 8007b08:	e78f      	b.n	8007a2a <_dtoa_r+0x41a>
 8007b0a:	9908      	ldr	r1, [sp, #32]
 8007b0c:	4b29      	ldr	r3, [pc, #164]	; (8007bb4 <_dtoa_r+0x5a4>)
 8007b0e:	4421      	add	r1, r4
 8007b10:	9112      	str	r1, [sp, #72]	; 0x48
 8007b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d055      	beq.n	8007bd0 <_dtoa_r+0x5c0>
 8007b24:	2000      	movs	r0, #0
 8007b26:	4929      	ldr	r1, [pc, #164]	; (8007bcc <_dtoa_r+0x5bc>)
 8007b28:	f7f8 fec0 	bl	80008ac <__aeabi_ddiv>
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	4632      	mov	r2, r6
 8007b30:	f7f8 fbda 	bl	80002e8 <__aeabi_dsub>
 8007b34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b38:	9f08      	ldr	r7, [sp, #32]
 8007b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b3e:	f7f9 f83b 	bl	8000bb8 <__aeabi_d2iz>
 8007b42:	4604      	mov	r4, r0
 8007b44:	f7f8 fd1e 	bl	8000584 <__aeabi_i2d>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b50:	f7f8 fbca 	bl	80002e8 <__aeabi_dsub>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	3430      	adds	r4, #48	; 0x30
 8007b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b62:	f807 4b01 	strb.w	r4, [r7], #1
 8007b66:	f7f8 ffe9 	bl	8000b3c <__aeabi_dcmplt>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d174      	bne.n	8007c58 <_dtoa_r+0x648>
 8007b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b72:	2000      	movs	r0, #0
 8007b74:	4911      	ldr	r1, [pc, #68]	; (8007bbc <_dtoa_r+0x5ac>)
 8007b76:	f7f8 fbb7 	bl	80002e8 <__aeabi_dsub>
 8007b7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b7e:	f7f8 ffdd 	bl	8000b3c <__aeabi_dcmplt>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f040 80b6 	bne.w	8007cf4 <_dtoa_r+0x6e4>
 8007b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b8a:	429f      	cmp	r7, r3
 8007b8c:	f43f af7a 	beq.w	8007a84 <_dtoa_r+0x474>
 8007b90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b94:	2200      	movs	r2, #0
 8007b96:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <_dtoa_r+0x5b0>)
 8007b98:	f7f8 fd5e 	bl	8000658 <__aeabi_dmul>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <_dtoa_r+0x5b0>)
 8007ba8:	f7f8 fd56 	bl	8000658 <__aeabi_dmul>
 8007bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb0:	e7c3      	b.n	8007b3a <_dtoa_r+0x52a>
 8007bb2:	bf00      	nop
 8007bb4:	08009d60 	.word	0x08009d60
 8007bb8:	08009d38 	.word	0x08009d38
 8007bbc:	3ff00000 	.word	0x3ff00000
 8007bc0:	40240000 	.word	0x40240000
 8007bc4:	401c0000 	.word	0x401c0000
 8007bc8:	40140000 	.word	0x40140000
 8007bcc:	3fe00000 	.word	0x3fe00000
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 fd40 	bl	8000658 <__aeabi_dmul>
 8007bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bde:	9c08      	ldr	r4, [sp, #32]
 8007be0:	9314      	str	r3, [sp, #80]	; 0x50
 8007be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007be6:	f7f8 ffe7 	bl	8000bb8 <__aeabi_d2iz>
 8007bea:	9015      	str	r0, [sp, #84]	; 0x54
 8007bec:	f7f8 fcca 	bl	8000584 <__aeabi_i2d>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf8:	f7f8 fb76 	bl	80002e8 <__aeabi_dsub>
 8007bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bfe:	4606      	mov	r6, r0
 8007c00:	3330      	adds	r3, #48	; 0x30
 8007c02:	f804 3b01 	strb.w	r3, [r4], #1
 8007c06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c08:	460f      	mov	r7, r1
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	d124      	bne.n	8007c5c <_dtoa_r+0x64c>
 8007c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c16:	4bb3      	ldr	r3, [pc, #716]	; (8007ee4 <_dtoa_r+0x8d4>)
 8007c18:	f7f8 fb68 	bl	80002ec <__adddf3>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4630      	mov	r0, r6
 8007c22:	4639      	mov	r1, r7
 8007c24:	f7f8 ffa8 	bl	8000b78 <__aeabi_dcmpgt>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d162      	bne.n	8007cf2 <_dtoa_r+0x6e2>
 8007c2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c30:	2000      	movs	r0, #0
 8007c32:	49ac      	ldr	r1, [pc, #688]	; (8007ee4 <_dtoa_r+0x8d4>)
 8007c34:	f7f8 fb58 	bl	80002e8 <__aeabi_dsub>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 ff7c 	bl	8000b3c <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f43f af1d 	beq.w	8007a84 <_dtoa_r+0x474>
 8007c4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007c4c:	1e7b      	subs	r3, r7, #1
 8007c4e:	9314      	str	r3, [sp, #80]	; 0x50
 8007c50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007c54:	2b30      	cmp	r3, #48	; 0x30
 8007c56:	d0f8      	beq.n	8007c4a <_dtoa_r+0x63a>
 8007c58:	46c1      	mov	r9, r8
 8007c5a:	e03a      	b.n	8007cd2 <_dtoa_r+0x6c2>
 8007c5c:	4ba2      	ldr	r3, [pc, #648]	; (8007ee8 <_dtoa_r+0x8d8>)
 8007c5e:	f7f8 fcfb 	bl	8000658 <__aeabi_dmul>
 8007c62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c66:	e7bc      	b.n	8007be2 <_dtoa_r+0x5d2>
 8007c68:	9f08      	ldr	r7, [sp, #32]
 8007c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c72:	f7f8 fe1b 	bl	80008ac <__aeabi_ddiv>
 8007c76:	f7f8 ff9f 	bl	8000bb8 <__aeabi_d2iz>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f7f8 fc82 	bl	8000584 <__aeabi_i2d>
 8007c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c84:	f7f8 fce8 	bl	8000658 <__aeabi_dmul>
 8007c88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4602      	mov	r2, r0
 8007c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c94:	f7f8 fb28 	bl	80002e8 <__aeabi_dsub>
 8007c98:	f807 6b01 	strb.w	r6, [r7], #1
 8007c9c:	9e08      	ldr	r6, [sp, #32]
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	1bbe      	subs	r6, r7, r6
 8007ca2:	42b3      	cmp	r3, r6
 8007ca4:	d13a      	bne.n	8007d1c <_dtoa_r+0x70c>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	f7f8 fb1f 	bl	80002ec <__adddf3>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cba:	f7f8 ff5d 	bl	8000b78 <__aeabi_dcmpgt>
 8007cbe:	bb58      	cbnz	r0, 8007d18 <_dtoa_r+0x708>
 8007cc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc8:	f7f8 ff2e 	bl	8000b28 <__aeabi_dcmpeq>
 8007ccc:	b108      	cbz	r0, 8007cd2 <_dtoa_r+0x6c2>
 8007cce:	07e1      	lsls	r1, r4, #31
 8007cd0:	d422      	bmi.n	8007d18 <_dtoa_r+0x708>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	4651      	mov	r1, sl
 8007cd6:	f000 faf1 	bl	80082bc <_Bfree>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	703b      	strb	r3, [r7, #0]
 8007cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ce0:	f109 0001 	add.w	r0, r9, #1
 8007ce4:	6018      	str	r0, [r3, #0]
 8007ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f43f acdf 	beq.w	80076ac <_dtoa_r+0x9c>
 8007cee:	601f      	str	r7, [r3, #0]
 8007cf0:	e4dc      	b.n	80076ac <_dtoa_r+0x9c>
 8007cf2:	4627      	mov	r7, r4
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cfc:	2a39      	cmp	r2, #57	; 0x39
 8007cfe:	d107      	bne.n	8007d10 <_dtoa_r+0x700>
 8007d00:	9a08      	ldr	r2, [sp, #32]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d1f7      	bne.n	8007cf6 <_dtoa_r+0x6e6>
 8007d06:	2230      	movs	r2, #48	; 0x30
 8007d08:	9908      	ldr	r1, [sp, #32]
 8007d0a:	f108 0801 	add.w	r8, r8, #1
 8007d0e:	700a      	strb	r2, [r1, #0]
 8007d10:	781a      	ldrb	r2, [r3, #0]
 8007d12:	3201      	adds	r2, #1
 8007d14:	701a      	strb	r2, [r3, #0]
 8007d16:	e79f      	b.n	8007c58 <_dtoa_r+0x648>
 8007d18:	46c8      	mov	r8, r9
 8007d1a:	e7eb      	b.n	8007cf4 <_dtoa_r+0x6e4>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4b72      	ldr	r3, [pc, #456]	; (8007ee8 <_dtoa_r+0x8d8>)
 8007d20:	f7f8 fc9a 	bl	8000658 <__aeabi_dmul>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f7f8 fefa 	bl	8000b28 <__aeabi_dcmpeq>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d098      	beq.n	8007c6a <_dtoa_r+0x65a>
 8007d38:	e7cb      	b.n	8007cd2 <_dtoa_r+0x6c2>
 8007d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	f000 80cd 	beq.w	8007edc <_dtoa_r+0x8cc>
 8007d42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d44:	2a01      	cmp	r2, #1
 8007d46:	f300 80af 	bgt.w	8007ea8 <_dtoa_r+0x898>
 8007d4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	f000 80a7 	beq.w	8007ea0 <_dtoa_r+0x890>
 8007d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d58:	9f06      	ldr	r7, [sp, #24]
 8007d5a:	9a06      	ldr	r2, [sp, #24]
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	441a      	add	r2, r3
 8007d60:	9206      	str	r2, [sp, #24]
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	4628      	mov	r0, r5
 8007d66:	441a      	add	r2, r3
 8007d68:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6a:	f000 fb61 	bl	8008430 <__i2b>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	dd0c      	ble.n	8007d8e <_dtoa_r+0x77e>
 8007d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dd09      	ble.n	8007d8e <_dtoa_r+0x77e>
 8007d7a:	42bb      	cmp	r3, r7
 8007d7c:	bfa8      	it	ge
 8007d7e:	463b      	movge	r3, r7
 8007d80:	9a06      	ldr	r2, [sp, #24]
 8007d82:	1aff      	subs	r7, r7, r3
 8007d84:	1ad2      	subs	r2, r2, r3
 8007d86:	9206      	str	r2, [sp, #24]
 8007d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	b1f3      	cbz	r3, 8007dd0 <_dtoa_r+0x7c0>
 8007d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80a9 	beq.w	8007eec <_dtoa_r+0x8dc>
 8007d9a:	2c00      	cmp	r4, #0
 8007d9c:	dd10      	ble.n	8007dc0 <_dtoa_r+0x7b0>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4622      	mov	r2, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fbfe 	bl	80085a4 <__pow5mult>
 8007da8:	4652      	mov	r2, sl
 8007daa:	4601      	mov	r1, r0
 8007dac:	4606      	mov	r6, r0
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 fb54 	bl	800845c <__multiply>
 8007db4:	4680      	mov	r8, r0
 8007db6:	4651      	mov	r1, sl
 8007db8:	4628      	mov	r0, r5
 8007dba:	f000 fa7f 	bl	80082bc <_Bfree>
 8007dbe:	46c2      	mov	sl, r8
 8007dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc2:	1b1a      	subs	r2, r3, r4
 8007dc4:	d004      	beq.n	8007dd0 <_dtoa_r+0x7c0>
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 fbeb 	bl	80085a4 <__pow5mult>
 8007dce:	4682      	mov	sl, r0
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fb2c 	bl	8008430 <__i2b>
 8007dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dda:	4604      	mov	r4, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f340 8087 	ble.w	8007ef0 <_dtoa_r+0x8e0>
 8007de2:	461a      	mov	r2, r3
 8007de4:	4601      	mov	r1, r0
 8007de6:	4628      	mov	r0, r5
 8007de8:	f000 fbdc 	bl	80085a4 <__pow5mult>
 8007dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dee:	4604      	mov	r4, r0
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	f340 8080 	ble.w	8007ef6 <_dtoa_r+0x8e6>
 8007df6:	f04f 0800 	mov.w	r8, #0
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e00:	6918      	ldr	r0, [r3, #16]
 8007e02:	f000 fac7 	bl	8008394 <__hi0bits>
 8007e06:	f1c0 0020 	rsb	r0, r0, #32
 8007e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0c:	4418      	add	r0, r3
 8007e0e:	f010 001f 	ands.w	r0, r0, #31
 8007e12:	f000 8092 	beq.w	8007f3a <_dtoa_r+0x92a>
 8007e16:	f1c0 0320 	rsb	r3, r0, #32
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	f340 808a 	ble.w	8007f34 <_dtoa_r+0x924>
 8007e20:	f1c0 001c 	rsb	r0, r0, #28
 8007e24:	9b06      	ldr	r3, [sp, #24]
 8007e26:	4407      	add	r7, r0
 8007e28:	4403      	add	r3, r0
 8007e2a:	9306      	str	r3, [sp, #24]
 8007e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2e:	4403      	add	r3, r0
 8007e30:	9309      	str	r3, [sp, #36]	; 0x24
 8007e32:	9b06      	ldr	r3, [sp, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd05      	ble.n	8007e44 <_dtoa_r+0x834>
 8007e38:	4651      	mov	r1, sl
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 fc0b 	bl	8008658 <__lshift>
 8007e42:	4682      	mov	sl, r0
 8007e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd05      	ble.n	8007e56 <_dtoa_r+0x846>
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f000 fc02 	bl	8008658 <__lshift>
 8007e54:	4604      	mov	r4, r0
 8007e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d070      	beq.n	8007f3e <_dtoa_r+0x92e>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4650      	mov	r0, sl
 8007e60:	f000 fc66 	bl	8008730 <__mcmp>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	da6a      	bge.n	8007f3e <_dtoa_r+0x92e>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4651      	mov	r1, sl
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 fa46 	bl	8008300 <__multadd>
 8007e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e76:	4682      	mov	sl, r0
 8007e78:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8193 	beq.w	80081a8 <_dtoa_r+0xb98>
 8007e82:	4631      	mov	r1, r6
 8007e84:	2300      	movs	r3, #0
 8007e86:	220a      	movs	r2, #10
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 fa39 	bl	8008300 <__multadd>
 8007e8e:	f1bb 0f00 	cmp.w	fp, #0
 8007e92:	4606      	mov	r6, r0
 8007e94:	f300 8093 	bgt.w	8007fbe <_dtoa_r+0x9ae>
 8007e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	dc57      	bgt.n	8007f4e <_dtoa_r+0x93e>
 8007e9e:	e08e      	b.n	8007fbe <_dtoa_r+0x9ae>
 8007ea0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ea2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ea6:	e756      	b.n	8007d56 <_dtoa_r+0x746>
 8007ea8:	9b02      	ldr	r3, [sp, #8]
 8007eaa:	1e5c      	subs	r4, r3, #1
 8007eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	bfb7      	itett	lt
 8007eb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007eb4:	1b1c      	subge	r4, r3, r4
 8007eb6:	1ae2      	sublt	r2, r4, r3
 8007eb8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007eba:	bfbe      	ittt	lt
 8007ebc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007ebe:	189b      	addlt	r3, r3, r2
 8007ec0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	bfb8      	it	lt
 8007ec6:	2400      	movlt	r4, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bfbb      	ittet	lt
 8007ecc:	9b06      	ldrlt	r3, [sp, #24]
 8007ece:	9a02      	ldrlt	r2, [sp, #8]
 8007ed0:	9f06      	ldrge	r7, [sp, #24]
 8007ed2:	1a9f      	sublt	r7, r3, r2
 8007ed4:	bfac      	ite	ge
 8007ed6:	9b02      	ldrge	r3, [sp, #8]
 8007ed8:	2300      	movlt	r3, #0
 8007eda:	e73e      	b.n	8007d5a <_dtoa_r+0x74a>
 8007edc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ede:	9f06      	ldr	r7, [sp, #24]
 8007ee0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007ee2:	e745      	b.n	8007d70 <_dtoa_r+0x760>
 8007ee4:	3fe00000 	.word	0x3fe00000
 8007ee8:	40240000 	.word	0x40240000
 8007eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eee:	e76a      	b.n	8007dc6 <_dtoa_r+0x7b6>
 8007ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	dc19      	bgt.n	8007f2a <_dtoa_r+0x91a>
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	b9bb      	cbnz	r3, 8007f2a <_dtoa_r+0x91a>
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f00:	b99b      	cbnz	r3, 8007f2a <_dtoa_r+0x91a>
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f08:	0d1b      	lsrs	r3, r3, #20
 8007f0a:	051b      	lsls	r3, r3, #20
 8007f0c:	b183      	cbz	r3, 8007f30 <_dtoa_r+0x920>
 8007f0e:	f04f 0801 	mov.w	r8, #1
 8007f12:	9b06      	ldr	r3, [sp, #24]
 8007f14:	3301      	adds	r3, #1
 8007f16:	9306      	str	r3, [sp, #24]
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f af6a 	bne.w	8007dfa <_dtoa_r+0x7ea>
 8007f26:	2001      	movs	r0, #1
 8007f28:	e76f      	b.n	8007e0a <_dtoa_r+0x7fa>
 8007f2a:	f04f 0800 	mov.w	r8, #0
 8007f2e:	e7f6      	b.n	8007f1e <_dtoa_r+0x90e>
 8007f30:	4698      	mov	r8, r3
 8007f32:	e7f4      	b.n	8007f1e <_dtoa_r+0x90e>
 8007f34:	f43f af7d 	beq.w	8007e32 <_dtoa_r+0x822>
 8007f38:	4618      	mov	r0, r3
 8007f3a:	301c      	adds	r0, #28
 8007f3c:	e772      	b.n	8007e24 <_dtoa_r+0x814>
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dc36      	bgt.n	8007fb2 <_dtoa_r+0x9a2>
 8007f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	dd33      	ble.n	8007fb2 <_dtoa_r+0x9a2>
 8007f4a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007f4e:	f1bb 0f00 	cmp.w	fp, #0
 8007f52:	d10d      	bne.n	8007f70 <_dtoa_r+0x960>
 8007f54:	4621      	mov	r1, r4
 8007f56:	465b      	mov	r3, fp
 8007f58:	2205      	movs	r2, #5
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 f9d0 	bl	8008300 <__multadd>
 8007f60:	4601      	mov	r1, r0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4650      	mov	r0, sl
 8007f66:	f000 fbe3 	bl	8008730 <__mcmp>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f73f adb6 	bgt.w	8007adc <_dtoa_r+0x4cc>
 8007f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f72:	9f08      	ldr	r7, [sp, #32]
 8007f74:	ea6f 0903 	mvn.w	r9, r3
 8007f78:	f04f 0800 	mov.w	r8, #0
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f000 f99c 	bl	80082bc <_Bfree>
 8007f84:	2e00      	cmp	r6, #0
 8007f86:	f43f aea4 	beq.w	8007cd2 <_dtoa_r+0x6c2>
 8007f8a:	f1b8 0f00 	cmp.w	r8, #0
 8007f8e:	d005      	beq.n	8007f9c <_dtoa_r+0x98c>
 8007f90:	45b0      	cmp	r8, r6
 8007f92:	d003      	beq.n	8007f9c <_dtoa_r+0x98c>
 8007f94:	4641      	mov	r1, r8
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f990 	bl	80082bc <_Bfree>
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f98c 	bl	80082bc <_Bfree>
 8007fa4:	e695      	b.n	8007cd2 <_dtoa_r+0x6c2>
 8007fa6:	2400      	movs	r4, #0
 8007fa8:	4626      	mov	r6, r4
 8007faa:	e7e1      	b.n	8007f70 <_dtoa_r+0x960>
 8007fac:	46c1      	mov	r9, r8
 8007fae:	4626      	mov	r6, r4
 8007fb0:	e594      	b.n	8007adc <_dtoa_r+0x4cc>
 8007fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80fc 	beq.w	80081b6 <_dtoa_r+0xba6>
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	dd05      	ble.n	8007fce <_dtoa_r+0x9be>
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 fb46 	bl	8008658 <__lshift>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	f1b8 0f00 	cmp.w	r8, #0
 8007fd2:	d05c      	beq.n	800808e <_dtoa_r+0xa7e>
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	6871      	ldr	r1, [r6, #4]
 8007fd8:	f000 f930 	bl	800823c <_Balloc>
 8007fdc:	4607      	mov	r7, r0
 8007fde:	b928      	cbnz	r0, 8007fec <_dtoa_r+0x9dc>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fe6:	4b7e      	ldr	r3, [pc, #504]	; (80081e0 <_dtoa_r+0xbd0>)
 8007fe8:	f7ff bb26 	b.w	8007638 <_dtoa_r+0x28>
 8007fec:	6932      	ldr	r2, [r6, #16]
 8007fee:	f106 010c 	add.w	r1, r6, #12
 8007ff2:	3202      	adds	r2, #2
 8007ff4:	0092      	lsls	r2, r2, #2
 8007ff6:	300c      	adds	r0, #12
 8007ff8:	f000 f912 	bl	8008220 <memcpy>
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	4639      	mov	r1, r7
 8008000:	4628      	mov	r0, r5
 8008002:	f000 fb29 	bl	8008658 <__lshift>
 8008006:	46b0      	mov	r8, r6
 8008008:	4606      	mov	r6, r0
 800800a:	9b08      	ldr	r3, [sp, #32]
 800800c:	3301      	adds	r3, #1
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	445b      	add	r3, fp
 8008014:	930a      	str	r3, [sp, #40]	; 0x28
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	9b02      	ldr	r3, [sp, #8]
 8008020:	4621      	mov	r1, r4
 8008022:	4650      	mov	r0, sl
 8008024:	f103 3bff 	add.w	fp, r3, #4294967295
 8008028:	f7ff fa64 	bl	80074f4 <quorem>
 800802c:	4603      	mov	r3, r0
 800802e:	4641      	mov	r1, r8
 8008030:	3330      	adds	r3, #48	; 0x30
 8008032:	9004      	str	r0, [sp, #16]
 8008034:	4650      	mov	r0, sl
 8008036:	930b      	str	r3, [sp, #44]	; 0x2c
 8008038:	f000 fb7a 	bl	8008730 <__mcmp>
 800803c:	4632      	mov	r2, r6
 800803e:	9006      	str	r0, [sp, #24]
 8008040:	4621      	mov	r1, r4
 8008042:	4628      	mov	r0, r5
 8008044:	f000 fb90 	bl	8008768 <__mdiff>
 8008048:	68c2      	ldr	r2, [r0, #12]
 800804a:	4607      	mov	r7, r0
 800804c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804e:	bb02      	cbnz	r2, 8008092 <_dtoa_r+0xa82>
 8008050:	4601      	mov	r1, r0
 8008052:	4650      	mov	r0, sl
 8008054:	f000 fb6c 	bl	8008730 <__mcmp>
 8008058:	4602      	mov	r2, r0
 800805a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805c:	4639      	mov	r1, r7
 800805e:	4628      	mov	r0, r5
 8008060:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008064:	f000 f92a 	bl	80082bc <_Bfree>
 8008068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800806a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800806c:	9f02      	ldr	r7, [sp, #8]
 800806e:	ea43 0102 	orr.w	r1, r3, r2
 8008072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008074:	430b      	orrs	r3, r1
 8008076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008078:	d10d      	bne.n	8008096 <_dtoa_r+0xa86>
 800807a:	2b39      	cmp	r3, #57	; 0x39
 800807c:	d027      	beq.n	80080ce <_dtoa_r+0xabe>
 800807e:	9a06      	ldr	r2, [sp, #24]
 8008080:	2a00      	cmp	r2, #0
 8008082:	dd01      	ble.n	8008088 <_dtoa_r+0xa78>
 8008084:	9b04      	ldr	r3, [sp, #16]
 8008086:	3331      	adds	r3, #49	; 0x31
 8008088:	f88b 3000 	strb.w	r3, [fp]
 800808c:	e776      	b.n	8007f7c <_dtoa_r+0x96c>
 800808e:	4630      	mov	r0, r6
 8008090:	e7b9      	b.n	8008006 <_dtoa_r+0x9f6>
 8008092:	2201      	movs	r2, #1
 8008094:	e7e2      	b.n	800805c <_dtoa_r+0xa4c>
 8008096:	9906      	ldr	r1, [sp, #24]
 8008098:	2900      	cmp	r1, #0
 800809a:	db04      	blt.n	80080a6 <_dtoa_r+0xa96>
 800809c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800809e:	4301      	orrs	r1, r0
 80080a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a2:	4301      	orrs	r1, r0
 80080a4:	d120      	bne.n	80080e8 <_dtoa_r+0xad8>
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	ddee      	ble.n	8008088 <_dtoa_r+0xa78>
 80080aa:	4651      	mov	r1, sl
 80080ac:	2201      	movs	r2, #1
 80080ae:	4628      	mov	r0, r5
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	f000 fad1 	bl	8008658 <__lshift>
 80080b6:	4621      	mov	r1, r4
 80080b8:	4682      	mov	sl, r0
 80080ba:	f000 fb39 	bl	8008730 <__mcmp>
 80080be:	2800      	cmp	r0, #0
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	dc02      	bgt.n	80080ca <_dtoa_r+0xaba>
 80080c4:	d1e0      	bne.n	8008088 <_dtoa_r+0xa78>
 80080c6:	07da      	lsls	r2, r3, #31
 80080c8:	d5de      	bpl.n	8008088 <_dtoa_r+0xa78>
 80080ca:	2b39      	cmp	r3, #57	; 0x39
 80080cc:	d1da      	bne.n	8008084 <_dtoa_r+0xa74>
 80080ce:	2339      	movs	r3, #57	; 0x39
 80080d0:	f88b 3000 	strb.w	r3, [fp]
 80080d4:	463b      	mov	r3, r7
 80080d6:	461f      	mov	r7, r3
 80080d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80080dc:	3b01      	subs	r3, #1
 80080de:	2a39      	cmp	r2, #57	; 0x39
 80080e0:	d050      	beq.n	8008184 <_dtoa_r+0xb74>
 80080e2:	3201      	adds	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e749      	b.n	8007f7c <_dtoa_r+0x96c>
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	dd03      	ble.n	80080f4 <_dtoa_r+0xae4>
 80080ec:	2b39      	cmp	r3, #57	; 0x39
 80080ee:	d0ee      	beq.n	80080ce <_dtoa_r+0xabe>
 80080f0:	3301      	adds	r3, #1
 80080f2:	e7c9      	b.n	8008088 <_dtoa_r+0xa78>
 80080f4:	9a02      	ldr	r2, [sp, #8]
 80080f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080fc:	428a      	cmp	r2, r1
 80080fe:	d02a      	beq.n	8008156 <_dtoa_r+0xb46>
 8008100:	4651      	mov	r1, sl
 8008102:	2300      	movs	r3, #0
 8008104:	220a      	movs	r2, #10
 8008106:	4628      	mov	r0, r5
 8008108:	f000 f8fa 	bl	8008300 <__multadd>
 800810c:	45b0      	cmp	r8, r6
 800810e:	4682      	mov	sl, r0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	f04f 020a 	mov.w	r2, #10
 8008118:	4641      	mov	r1, r8
 800811a:	4628      	mov	r0, r5
 800811c:	d107      	bne.n	800812e <_dtoa_r+0xb1e>
 800811e:	f000 f8ef 	bl	8008300 <__multadd>
 8008122:	4680      	mov	r8, r0
 8008124:	4606      	mov	r6, r0
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	3301      	adds	r3, #1
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	e777      	b.n	800801e <_dtoa_r+0xa0e>
 800812e:	f000 f8e7 	bl	8008300 <__multadd>
 8008132:	4631      	mov	r1, r6
 8008134:	4680      	mov	r8, r0
 8008136:	2300      	movs	r3, #0
 8008138:	220a      	movs	r2, #10
 800813a:	4628      	mov	r0, r5
 800813c:	f000 f8e0 	bl	8008300 <__multadd>
 8008140:	4606      	mov	r6, r0
 8008142:	e7f0      	b.n	8008126 <_dtoa_r+0xb16>
 8008144:	f1bb 0f00 	cmp.w	fp, #0
 8008148:	bfcc      	ite	gt
 800814a:	465f      	movgt	r7, fp
 800814c:	2701      	movle	r7, #1
 800814e:	f04f 0800 	mov.w	r8, #0
 8008152:	9a08      	ldr	r2, [sp, #32]
 8008154:	4417      	add	r7, r2
 8008156:	4651      	mov	r1, sl
 8008158:	2201      	movs	r2, #1
 800815a:	4628      	mov	r0, r5
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	f000 fa7b 	bl	8008658 <__lshift>
 8008162:	4621      	mov	r1, r4
 8008164:	4682      	mov	sl, r0
 8008166:	f000 fae3 	bl	8008730 <__mcmp>
 800816a:	2800      	cmp	r0, #0
 800816c:	dcb2      	bgt.n	80080d4 <_dtoa_r+0xac4>
 800816e:	d102      	bne.n	8008176 <_dtoa_r+0xb66>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d4ae      	bmi.n	80080d4 <_dtoa_r+0xac4>
 8008176:	463b      	mov	r3, r7
 8008178:	461f      	mov	r7, r3
 800817a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800817e:	2a30      	cmp	r2, #48	; 0x30
 8008180:	d0fa      	beq.n	8008178 <_dtoa_r+0xb68>
 8008182:	e6fb      	b.n	8007f7c <_dtoa_r+0x96c>
 8008184:	9a08      	ldr	r2, [sp, #32]
 8008186:	429a      	cmp	r2, r3
 8008188:	d1a5      	bne.n	80080d6 <_dtoa_r+0xac6>
 800818a:	2331      	movs	r3, #49	; 0x31
 800818c:	f109 0901 	add.w	r9, r9, #1
 8008190:	7013      	strb	r3, [r2, #0]
 8008192:	e6f3      	b.n	8007f7c <_dtoa_r+0x96c>
 8008194:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <_dtoa_r+0xbd4>)
 8008196:	f7ff baa7 	b.w	80076e8 <_dtoa_r+0xd8>
 800819a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800819c:	2b00      	cmp	r3, #0
 800819e:	f47f aa80 	bne.w	80076a2 <_dtoa_r+0x92>
 80081a2:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <_dtoa_r+0xbd8>)
 80081a4:	f7ff baa0 	b.w	80076e8 <_dtoa_r+0xd8>
 80081a8:	f1bb 0f00 	cmp.w	fp, #0
 80081ac:	dc03      	bgt.n	80081b6 <_dtoa_r+0xba6>
 80081ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	f73f aecc 	bgt.w	8007f4e <_dtoa_r+0x93e>
 80081b6:	9f08      	ldr	r7, [sp, #32]
 80081b8:	4621      	mov	r1, r4
 80081ba:	4650      	mov	r0, sl
 80081bc:	f7ff f99a 	bl	80074f4 <quorem>
 80081c0:	9a08      	ldr	r2, [sp, #32]
 80081c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80081c6:	f807 3b01 	strb.w	r3, [r7], #1
 80081ca:	1aba      	subs	r2, r7, r2
 80081cc:	4593      	cmp	fp, r2
 80081ce:	ddb9      	ble.n	8008144 <_dtoa_r+0xb34>
 80081d0:	4651      	mov	r1, sl
 80081d2:	2300      	movs	r3, #0
 80081d4:	220a      	movs	r2, #10
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f892 	bl	8008300 <__multadd>
 80081dc:	4682      	mov	sl, r0
 80081de:	e7eb      	b.n	80081b8 <_dtoa_r+0xba8>
 80081e0:	08009cc7 	.word	0x08009cc7
 80081e4:	08009c20 	.word	0x08009c20
 80081e8:	08009c44 	.word	0x08009c44

080081ec <_localeconv_r>:
 80081ec:	4800      	ldr	r0, [pc, #0]	; (80081f0 <_localeconv_r+0x4>)
 80081ee:	4770      	bx	lr
 80081f0:	20000168 	.word	0x20000168

080081f4 <malloc>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <malloc+0xc>)
 80081f6:	4601      	mov	r1, r0
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f000 bbfb 	b.w	80089f4 <_malloc_r>
 80081fe:	bf00      	nop
 8008200:	20000014 	.word	0x20000014

08008204 <memchr>:
 8008204:	4603      	mov	r3, r0
 8008206:	b510      	push	{r4, lr}
 8008208:	b2c9      	uxtb	r1, r1
 800820a:	4402      	add	r2, r0
 800820c:	4293      	cmp	r3, r2
 800820e:	4618      	mov	r0, r3
 8008210:	d101      	bne.n	8008216 <memchr+0x12>
 8008212:	2000      	movs	r0, #0
 8008214:	e003      	b.n	800821e <memchr+0x1a>
 8008216:	7804      	ldrb	r4, [r0, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	428c      	cmp	r4, r1
 800821c:	d1f6      	bne.n	800820c <memchr+0x8>
 800821e:	bd10      	pop	{r4, pc}

08008220 <memcpy>:
 8008220:	440a      	add	r2, r1
 8008222:	4291      	cmp	r1, r2
 8008224:	f100 33ff 	add.w	r3, r0, #4294967295
 8008228:	d100      	bne.n	800822c <memcpy+0xc>
 800822a:	4770      	bx	lr
 800822c:	b510      	push	{r4, lr}
 800822e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008232:	4291      	cmp	r1, r2
 8008234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008238:	d1f9      	bne.n	800822e <memcpy+0xe>
 800823a:	bd10      	pop	{r4, pc}

0800823c <_Balloc>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	b976      	cbnz	r6, 8008264 <_Balloc+0x28>
 8008246:	2010      	movs	r0, #16
 8008248:	f7ff ffd4 	bl	80081f4 <malloc>
 800824c:	4602      	mov	r2, r0
 800824e:	6260      	str	r0, [r4, #36]	; 0x24
 8008250:	b920      	cbnz	r0, 800825c <_Balloc+0x20>
 8008252:	2166      	movs	r1, #102	; 0x66
 8008254:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <_Balloc+0x78>)
 8008256:	4818      	ldr	r0, [pc, #96]	; (80082b8 <_Balloc+0x7c>)
 8008258:	f000 fd92 	bl	8008d80 <__assert_func>
 800825c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008260:	6006      	str	r6, [r0, #0]
 8008262:	60c6      	str	r6, [r0, #12]
 8008264:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008266:	68f3      	ldr	r3, [r6, #12]
 8008268:	b183      	cbz	r3, 800828c <_Balloc+0x50>
 800826a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008272:	b9b8      	cbnz	r0, 80082a4 <_Balloc+0x68>
 8008274:	2101      	movs	r1, #1
 8008276:	fa01 f605 	lsl.w	r6, r1, r5
 800827a:	1d72      	adds	r2, r6, #5
 800827c:	4620      	mov	r0, r4
 800827e:	0092      	lsls	r2, r2, #2
 8008280:	f000 fb5e 	bl	8008940 <_calloc_r>
 8008284:	b160      	cbz	r0, 80082a0 <_Balloc+0x64>
 8008286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800828a:	e00e      	b.n	80082aa <_Balloc+0x6e>
 800828c:	2221      	movs	r2, #33	; 0x21
 800828e:	2104      	movs	r1, #4
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fb55 	bl	8008940 <_calloc_r>
 8008296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008298:	60f0      	str	r0, [r6, #12]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e4      	bne.n	800826a <_Balloc+0x2e>
 80082a0:	2000      	movs	r0, #0
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	6802      	ldr	r2, [r0, #0]
 80082a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082aa:	2300      	movs	r3, #0
 80082ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082b0:	e7f7      	b.n	80082a2 <_Balloc+0x66>
 80082b2:	bf00      	nop
 80082b4:	08009c51 	.word	0x08009c51
 80082b8:	08009cd8 	.word	0x08009cd8

080082bc <_Bfree>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082c0:	4605      	mov	r5, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b976      	cbnz	r6, 80082e4 <_Bfree+0x28>
 80082c6:	2010      	movs	r0, #16
 80082c8:	f7ff ff94 	bl	80081f4 <malloc>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6268      	str	r0, [r5, #36]	; 0x24
 80082d0:	b920      	cbnz	r0, 80082dc <_Bfree+0x20>
 80082d2:	218a      	movs	r1, #138	; 0x8a
 80082d4:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <_Bfree+0x3c>)
 80082d6:	4809      	ldr	r0, [pc, #36]	; (80082fc <_Bfree+0x40>)
 80082d8:	f000 fd52 	bl	8008d80 <__assert_func>
 80082dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e0:	6006      	str	r6, [r0, #0]
 80082e2:	60c6      	str	r6, [r0, #12]
 80082e4:	b13c      	cbz	r4, 80082f6 <_Bfree+0x3a>
 80082e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082e8:	6862      	ldr	r2, [r4, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082f0:	6021      	str	r1, [r4, #0]
 80082f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	08009c51 	.word	0x08009c51
 80082fc:	08009cd8 	.word	0x08009cd8

08008300 <__multadd>:
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008304:	4698      	mov	r8, r3
 8008306:	460c      	mov	r4, r1
 8008308:	2300      	movs	r3, #0
 800830a:	690e      	ldr	r6, [r1, #16]
 800830c:	4607      	mov	r7, r0
 800830e:	f101 0014 	add.w	r0, r1, #20
 8008312:	6805      	ldr	r5, [r0, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	b2a9      	uxth	r1, r5
 8008318:	fb02 8101 	mla	r1, r2, r1, r8
 800831c:	0c2d      	lsrs	r5, r5, #16
 800831e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008322:	fb02 c505 	mla	r5, r2, r5, ip
 8008326:	b289      	uxth	r1, r1
 8008328:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800832c:	429e      	cmp	r6, r3
 800832e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008332:	f840 1b04 	str.w	r1, [r0], #4
 8008336:	dcec      	bgt.n	8008312 <__multadd+0x12>
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	d022      	beq.n	8008384 <__multadd+0x84>
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	42b3      	cmp	r3, r6
 8008342:	dc19      	bgt.n	8008378 <__multadd+0x78>
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	4638      	mov	r0, r7
 8008348:	3101      	adds	r1, #1
 800834a:	f7ff ff77 	bl	800823c <_Balloc>
 800834e:	4605      	mov	r5, r0
 8008350:	b928      	cbnz	r0, 800835e <__multadd+0x5e>
 8008352:	4602      	mov	r2, r0
 8008354:	21b5      	movs	r1, #181	; 0xb5
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <__multadd+0x8c>)
 8008358:	480d      	ldr	r0, [pc, #52]	; (8008390 <__multadd+0x90>)
 800835a:	f000 fd11 	bl	8008d80 <__assert_func>
 800835e:	6922      	ldr	r2, [r4, #16]
 8008360:	f104 010c 	add.w	r1, r4, #12
 8008364:	3202      	adds	r2, #2
 8008366:	0092      	lsls	r2, r2, #2
 8008368:	300c      	adds	r0, #12
 800836a:	f7ff ff59 	bl	8008220 <memcpy>
 800836e:	4621      	mov	r1, r4
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff ffa3 	bl	80082bc <_Bfree>
 8008376:	462c      	mov	r4, r5
 8008378:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800837c:	3601      	adds	r6, #1
 800837e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008382:	6126      	str	r6, [r4, #16]
 8008384:	4620      	mov	r0, r4
 8008386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800838a:	bf00      	nop
 800838c:	08009cc7 	.word	0x08009cc7
 8008390:	08009cd8 	.word	0x08009cd8

08008394 <__hi0bits>:
 8008394:	0c02      	lsrs	r2, r0, #16
 8008396:	0412      	lsls	r2, r2, #16
 8008398:	4603      	mov	r3, r0
 800839a:	b9ca      	cbnz	r2, 80083d0 <__hi0bits+0x3c>
 800839c:	0403      	lsls	r3, r0, #16
 800839e:	2010      	movs	r0, #16
 80083a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083a4:	bf04      	itt	eq
 80083a6:	021b      	lsleq	r3, r3, #8
 80083a8:	3008      	addeq	r0, #8
 80083aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083ae:	bf04      	itt	eq
 80083b0:	011b      	lsleq	r3, r3, #4
 80083b2:	3004      	addeq	r0, #4
 80083b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083b8:	bf04      	itt	eq
 80083ba:	009b      	lsleq	r3, r3, #2
 80083bc:	3002      	addeq	r0, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	db05      	blt.n	80083ce <__hi0bits+0x3a>
 80083c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80083c6:	f100 0001 	add.w	r0, r0, #1
 80083ca:	bf08      	it	eq
 80083cc:	2020      	moveq	r0, #32
 80083ce:	4770      	bx	lr
 80083d0:	2000      	movs	r0, #0
 80083d2:	e7e5      	b.n	80083a0 <__hi0bits+0xc>

080083d4 <__lo0bits>:
 80083d4:	6803      	ldr	r3, [r0, #0]
 80083d6:	4602      	mov	r2, r0
 80083d8:	f013 0007 	ands.w	r0, r3, #7
 80083dc:	d00b      	beq.n	80083f6 <__lo0bits+0x22>
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d422      	bmi.n	8008428 <__lo0bits+0x54>
 80083e2:	0798      	lsls	r0, r3, #30
 80083e4:	bf49      	itett	mi
 80083e6:	085b      	lsrmi	r3, r3, #1
 80083e8:	089b      	lsrpl	r3, r3, #2
 80083ea:	2001      	movmi	r0, #1
 80083ec:	6013      	strmi	r3, [r2, #0]
 80083ee:	bf5c      	itt	pl
 80083f0:	2002      	movpl	r0, #2
 80083f2:	6013      	strpl	r3, [r2, #0]
 80083f4:	4770      	bx	lr
 80083f6:	b299      	uxth	r1, r3
 80083f8:	b909      	cbnz	r1, 80083fe <__lo0bits+0x2a>
 80083fa:	2010      	movs	r0, #16
 80083fc:	0c1b      	lsrs	r3, r3, #16
 80083fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008402:	bf04      	itt	eq
 8008404:	0a1b      	lsreq	r3, r3, #8
 8008406:	3008      	addeq	r0, #8
 8008408:	0719      	lsls	r1, r3, #28
 800840a:	bf04      	itt	eq
 800840c:	091b      	lsreq	r3, r3, #4
 800840e:	3004      	addeq	r0, #4
 8008410:	0799      	lsls	r1, r3, #30
 8008412:	bf04      	itt	eq
 8008414:	089b      	lsreq	r3, r3, #2
 8008416:	3002      	addeq	r0, #2
 8008418:	07d9      	lsls	r1, r3, #31
 800841a:	d403      	bmi.n	8008424 <__lo0bits+0x50>
 800841c:	085b      	lsrs	r3, r3, #1
 800841e:	f100 0001 	add.w	r0, r0, #1
 8008422:	d003      	beq.n	800842c <__lo0bits+0x58>
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	4770      	bx	lr
 8008428:	2000      	movs	r0, #0
 800842a:	4770      	bx	lr
 800842c:	2020      	movs	r0, #32
 800842e:	4770      	bx	lr

08008430 <__i2b>:
 8008430:	b510      	push	{r4, lr}
 8008432:	460c      	mov	r4, r1
 8008434:	2101      	movs	r1, #1
 8008436:	f7ff ff01 	bl	800823c <_Balloc>
 800843a:	4602      	mov	r2, r0
 800843c:	b928      	cbnz	r0, 800844a <__i2b+0x1a>
 800843e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008442:	4b04      	ldr	r3, [pc, #16]	; (8008454 <__i2b+0x24>)
 8008444:	4804      	ldr	r0, [pc, #16]	; (8008458 <__i2b+0x28>)
 8008446:	f000 fc9b 	bl	8008d80 <__assert_func>
 800844a:	2301      	movs	r3, #1
 800844c:	6144      	str	r4, [r0, #20]
 800844e:	6103      	str	r3, [r0, #16]
 8008450:	bd10      	pop	{r4, pc}
 8008452:	bf00      	nop
 8008454:	08009cc7 	.word	0x08009cc7
 8008458:	08009cd8 	.word	0x08009cd8

0800845c <__multiply>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	4614      	mov	r4, r2
 8008462:	690a      	ldr	r2, [r1, #16]
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	460d      	mov	r5, r1
 8008468:	429a      	cmp	r2, r3
 800846a:	bfbe      	ittt	lt
 800846c:	460b      	movlt	r3, r1
 800846e:	4625      	movlt	r5, r4
 8008470:	461c      	movlt	r4, r3
 8008472:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008476:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800847a:	68ab      	ldr	r3, [r5, #8]
 800847c:	6869      	ldr	r1, [r5, #4]
 800847e:	eb0a 0709 	add.w	r7, sl, r9
 8008482:	42bb      	cmp	r3, r7
 8008484:	b085      	sub	sp, #20
 8008486:	bfb8      	it	lt
 8008488:	3101      	addlt	r1, #1
 800848a:	f7ff fed7 	bl	800823c <_Balloc>
 800848e:	b930      	cbnz	r0, 800849e <__multiply+0x42>
 8008490:	4602      	mov	r2, r0
 8008492:	f240 115d 	movw	r1, #349	; 0x15d
 8008496:	4b41      	ldr	r3, [pc, #260]	; (800859c <__multiply+0x140>)
 8008498:	4841      	ldr	r0, [pc, #260]	; (80085a0 <__multiply+0x144>)
 800849a:	f000 fc71 	bl	8008d80 <__assert_func>
 800849e:	f100 0614 	add.w	r6, r0, #20
 80084a2:	4633      	mov	r3, r6
 80084a4:	2200      	movs	r2, #0
 80084a6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80084aa:	4543      	cmp	r3, r8
 80084ac:	d31e      	bcc.n	80084ec <__multiply+0x90>
 80084ae:	f105 0c14 	add.w	ip, r5, #20
 80084b2:	f104 0314 	add.w	r3, r4, #20
 80084b6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80084ba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80084be:	9202      	str	r2, [sp, #8]
 80084c0:	ebac 0205 	sub.w	r2, ip, r5
 80084c4:	3a15      	subs	r2, #21
 80084c6:	f022 0203 	bic.w	r2, r2, #3
 80084ca:	3204      	adds	r2, #4
 80084cc:	f105 0115 	add.w	r1, r5, #21
 80084d0:	458c      	cmp	ip, r1
 80084d2:	bf38      	it	cc
 80084d4:	2204      	movcc	r2, #4
 80084d6:	9201      	str	r2, [sp, #4]
 80084d8:	9a02      	ldr	r2, [sp, #8]
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d808      	bhi.n	80084f2 <__multiply+0x96>
 80084e0:	2f00      	cmp	r7, #0
 80084e2:	dc55      	bgt.n	8008590 <__multiply+0x134>
 80084e4:	6107      	str	r7, [r0, #16]
 80084e6:	b005      	add	sp, #20
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	f843 2b04 	str.w	r2, [r3], #4
 80084f0:	e7db      	b.n	80084aa <__multiply+0x4e>
 80084f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80084f6:	f1ba 0f00 	cmp.w	sl, #0
 80084fa:	d020      	beq.n	800853e <__multiply+0xe2>
 80084fc:	46b1      	mov	r9, r6
 80084fe:	2200      	movs	r2, #0
 8008500:	f105 0e14 	add.w	lr, r5, #20
 8008504:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008508:	f8d9 b000 	ldr.w	fp, [r9]
 800850c:	b2a1      	uxth	r1, r4
 800850e:	fa1f fb8b 	uxth.w	fp, fp
 8008512:	fb0a b101 	mla	r1, sl, r1, fp
 8008516:	4411      	add	r1, r2
 8008518:	f8d9 2000 	ldr.w	r2, [r9]
 800851c:	0c24      	lsrs	r4, r4, #16
 800851e:	0c12      	lsrs	r2, r2, #16
 8008520:	fb0a 2404 	mla	r4, sl, r4, r2
 8008524:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008528:	b289      	uxth	r1, r1
 800852a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800852e:	45f4      	cmp	ip, lr
 8008530:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008534:	f849 1b04 	str.w	r1, [r9], #4
 8008538:	d8e4      	bhi.n	8008504 <__multiply+0xa8>
 800853a:	9901      	ldr	r1, [sp, #4]
 800853c:	5072      	str	r2, [r6, r1]
 800853e:	9a03      	ldr	r2, [sp, #12]
 8008540:	3304      	adds	r3, #4
 8008542:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008546:	f1b9 0f00 	cmp.w	r9, #0
 800854a:	d01f      	beq.n	800858c <__multiply+0x130>
 800854c:	46b6      	mov	lr, r6
 800854e:	f04f 0a00 	mov.w	sl, #0
 8008552:	6834      	ldr	r4, [r6, #0]
 8008554:	f105 0114 	add.w	r1, r5, #20
 8008558:	880a      	ldrh	r2, [r1, #0]
 800855a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800855e:	b2a4      	uxth	r4, r4
 8008560:	fb09 b202 	mla	r2, r9, r2, fp
 8008564:	4492      	add	sl, r2
 8008566:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800856a:	f84e 4b04 	str.w	r4, [lr], #4
 800856e:	f851 4b04 	ldr.w	r4, [r1], #4
 8008572:	f8be 2000 	ldrh.w	r2, [lr]
 8008576:	0c24      	lsrs	r4, r4, #16
 8008578:	fb09 2404 	mla	r4, r9, r4, r2
 800857c:	458c      	cmp	ip, r1
 800857e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008582:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008586:	d8e7      	bhi.n	8008558 <__multiply+0xfc>
 8008588:	9a01      	ldr	r2, [sp, #4]
 800858a:	50b4      	str	r4, [r6, r2]
 800858c:	3604      	adds	r6, #4
 800858e:	e7a3      	b.n	80084d8 <__multiply+0x7c>
 8008590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1a5      	bne.n	80084e4 <__multiply+0x88>
 8008598:	3f01      	subs	r7, #1
 800859a:	e7a1      	b.n	80084e0 <__multiply+0x84>
 800859c:	08009cc7 	.word	0x08009cc7
 80085a0:	08009cd8 	.word	0x08009cd8

080085a4 <__pow5mult>:
 80085a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a8:	4615      	mov	r5, r2
 80085aa:	f012 0203 	ands.w	r2, r2, #3
 80085ae:	4606      	mov	r6, r0
 80085b0:	460f      	mov	r7, r1
 80085b2:	d007      	beq.n	80085c4 <__pow5mult+0x20>
 80085b4:	4c25      	ldr	r4, [pc, #148]	; (800864c <__pow5mult+0xa8>)
 80085b6:	3a01      	subs	r2, #1
 80085b8:	2300      	movs	r3, #0
 80085ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085be:	f7ff fe9f 	bl	8008300 <__multadd>
 80085c2:	4607      	mov	r7, r0
 80085c4:	10ad      	asrs	r5, r5, #2
 80085c6:	d03d      	beq.n	8008644 <__pow5mult+0xa0>
 80085c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085ca:	b97c      	cbnz	r4, 80085ec <__pow5mult+0x48>
 80085cc:	2010      	movs	r0, #16
 80085ce:	f7ff fe11 	bl	80081f4 <malloc>
 80085d2:	4602      	mov	r2, r0
 80085d4:	6270      	str	r0, [r6, #36]	; 0x24
 80085d6:	b928      	cbnz	r0, 80085e4 <__pow5mult+0x40>
 80085d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085dc:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <__pow5mult+0xac>)
 80085de:	481d      	ldr	r0, [pc, #116]	; (8008654 <__pow5mult+0xb0>)
 80085e0:	f000 fbce 	bl	8008d80 <__assert_func>
 80085e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085e8:	6004      	str	r4, [r0, #0]
 80085ea:	60c4      	str	r4, [r0, #12]
 80085ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085f4:	b94c      	cbnz	r4, 800860a <__pow5mult+0x66>
 80085f6:	f240 2171 	movw	r1, #625	; 0x271
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff ff18 	bl	8008430 <__i2b>
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	f8c8 0008 	str.w	r0, [r8, #8]
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	f04f 0900 	mov.w	r9, #0
 800860e:	07eb      	lsls	r3, r5, #31
 8008610:	d50a      	bpl.n	8008628 <__pow5mult+0x84>
 8008612:	4639      	mov	r1, r7
 8008614:	4622      	mov	r2, r4
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff ff20 	bl	800845c <__multiply>
 800861c:	4680      	mov	r8, r0
 800861e:	4639      	mov	r1, r7
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff fe4b 	bl	80082bc <_Bfree>
 8008626:	4647      	mov	r7, r8
 8008628:	106d      	asrs	r5, r5, #1
 800862a:	d00b      	beq.n	8008644 <__pow5mult+0xa0>
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	b938      	cbnz	r0, 8008640 <__pow5mult+0x9c>
 8008630:	4622      	mov	r2, r4
 8008632:	4621      	mov	r1, r4
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff ff11 	bl	800845c <__multiply>
 800863a:	6020      	str	r0, [r4, #0]
 800863c:	f8c0 9000 	str.w	r9, [r0]
 8008640:	4604      	mov	r4, r0
 8008642:	e7e4      	b.n	800860e <__pow5mult+0x6a>
 8008644:	4638      	mov	r0, r7
 8008646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864a:	bf00      	nop
 800864c:	08009e28 	.word	0x08009e28
 8008650:	08009c51 	.word	0x08009c51
 8008654:	08009cd8 	.word	0x08009cd8

08008658 <__lshift>:
 8008658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	460c      	mov	r4, r1
 800865e:	4607      	mov	r7, r0
 8008660:	4691      	mov	r9, r2
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	6849      	ldr	r1, [r1, #4]
 8008666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008670:	f108 0601 	add.w	r6, r8, #1
 8008674:	42b3      	cmp	r3, r6
 8008676:	db0b      	blt.n	8008690 <__lshift+0x38>
 8008678:	4638      	mov	r0, r7
 800867a:	f7ff fddf 	bl	800823c <_Balloc>
 800867e:	4605      	mov	r5, r0
 8008680:	b948      	cbnz	r0, 8008696 <__lshift+0x3e>
 8008682:	4602      	mov	r2, r0
 8008684:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008688:	4b27      	ldr	r3, [pc, #156]	; (8008728 <__lshift+0xd0>)
 800868a:	4828      	ldr	r0, [pc, #160]	; (800872c <__lshift+0xd4>)
 800868c:	f000 fb78 	bl	8008d80 <__assert_func>
 8008690:	3101      	adds	r1, #1
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	e7ee      	b.n	8008674 <__lshift+0x1c>
 8008696:	2300      	movs	r3, #0
 8008698:	f100 0114 	add.w	r1, r0, #20
 800869c:	f100 0210 	add.w	r2, r0, #16
 80086a0:	4618      	mov	r0, r3
 80086a2:	4553      	cmp	r3, sl
 80086a4:	db33      	blt.n	800870e <__lshift+0xb6>
 80086a6:	6920      	ldr	r0, [r4, #16]
 80086a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086ac:	f104 0314 	add.w	r3, r4, #20
 80086b0:	f019 091f 	ands.w	r9, r9, #31
 80086b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086bc:	d02b      	beq.n	8008716 <__lshift+0xbe>
 80086be:	468a      	mov	sl, r1
 80086c0:	2200      	movs	r2, #0
 80086c2:	f1c9 0e20 	rsb	lr, r9, #32
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	fa00 f009 	lsl.w	r0, r0, r9
 80086cc:	4302      	orrs	r2, r0
 80086ce:	f84a 2b04 	str.w	r2, [sl], #4
 80086d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d6:	459c      	cmp	ip, r3
 80086d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80086dc:	d8f3      	bhi.n	80086c6 <__lshift+0x6e>
 80086de:	ebac 0304 	sub.w	r3, ip, r4
 80086e2:	3b15      	subs	r3, #21
 80086e4:	f023 0303 	bic.w	r3, r3, #3
 80086e8:	3304      	adds	r3, #4
 80086ea:	f104 0015 	add.w	r0, r4, #21
 80086ee:	4584      	cmp	ip, r0
 80086f0:	bf38      	it	cc
 80086f2:	2304      	movcc	r3, #4
 80086f4:	50ca      	str	r2, [r1, r3]
 80086f6:	b10a      	cbz	r2, 80086fc <__lshift+0xa4>
 80086f8:	f108 0602 	add.w	r6, r8, #2
 80086fc:	3e01      	subs	r6, #1
 80086fe:	4638      	mov	r0, r7
 8008700:	4621      	mov	r1, r4
 8008702:	612e      	str	r6, [r5, #16]
 8008704:	f7ff fdda 	bl	80082bc <_Bfree>
 8008708:	4628      	mov	r0, r5
 800870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008712:	3301      	adds	r3, #1
 8008714:	e7c5      	b.n	80086a2 <__lshift+0x4a>
 8008716:	3904      	subs	r1, #4
 8008718:	f853 2b04 	ldr.w	r2, [r3], #4
 800871c:	459c      	cmp	ip, r3
 800871e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008722:	d8f9      	bhi.n	8008718 <__lshift+0xc0>
 8008724:	e7ea      	b.n	80086fc <__lshift+0xa4>
 8008726:	bf00      	nop
 8008728:	08009cc7 	.word	0x08009cc7
 800872c:	08009cd8 	.word	0x08009cd8

08008730 <__mcmp>:
 8008730:	4603      	mov	r3, r0
 8008732:	690a      	ldr	r2, [r1, #16]
 8008734:	6900      	ldr	r0, [r0, #16]
 8008736:	b530      	push	{r4, r5, lr}
 8008738:	1a80      	subs	r0, r0, r2
 800873a:	d10d      	bne.n	8008758 <__mcmp+0x28>
 800873c:	3314      	adds	r3, #20
 800873e:	3114      	adds	r1, #20
 8008740:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008744:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008748:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800874c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008750:	4295      	cmp	r5, r2
 8008752:	d002      	beq.n	800875a <__mcmp+0x2a>
 8008754:	d304      	bcc.n	8008760 <__mcmp+0x30>
 8008756:	2001      	movs	r0, #1
 8008758:	bd30      	pop	{r4, r5, pc}
 800875a:	42a3      	cmp	r3, r4
 800875c:	d3f4      	bcc.n	8008748 <__mcmp+0x18>
 800875e:	e7fb      	b.n	8008758 <__mcmp+0x28>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	e7f8      	b.n	8008758 <__mcmp+0x28>
	...

08008768 <__mdiff>:
 8008768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	460c      	mov	r4, r1
 800876e:	4606      	mov	r6, r0
 8008770:	4611      	mov	r1, r2
 8008772:	4620      	mov	r0, r4
 8008774:	4692      	mov	sl, r2
 8008776:	f7ff ffdb 	bl	8008730 <__mcmp>
 800877a:	1e05      	subs	r5, r0, #0
 800877c:	d111      	bne.n	80087a2 <__mdiff+0x3a>
 800877e:	4629      	mov	r1, r5
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff fd5b 	bl	800823c <_Balloc>
 8008786:	4602      	mov	r2, r0
 8008788:	b928      	cbnz	r0, 8008796 <__mdiff+0x2e>
 800878a:	f240 2132 	movw	r1, #562	; 0x232
 800878e:	4b3c      	ldr	r3, [pc, #240]	; (8008880 <__mdiff+0x118>)
 8008790:	483c      	ldr	r0, [pc, #240]	; (8008884 <__mdiff+0x11c>)
 8008792:	f000 faf5 	bl	8008d80 <__assert_func>
 8008796:	2301      	movs	r3, #1
 8008798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800879c:	4610      	mov	r0, r2
 800879e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	bfa4      	itt	ge
 80087a4:	4653      	movge	r3, sl
 80087a6:	46a2      	movge	sl, r4
 80087a8:	4630      	mov	r0, r6
 80087aa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80087ae:	bfa6      	itte	ge
 80087b0:	461c      	movge	r4, r3
 80087b2:	2500      	movge	r5, #0
 80087b4:	2501      	movlt	r5, #1
 80087b6:	f7ff fd41 	bl	800823c <_Balloc>
 80087ba:	4602      	mov	r2, r0
 80087bc:	b918      	cbnz	r0, 80087c6 <__mdiff+0x5e>
 80087be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087c2:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <__mdiff+0x118>)
 80087c4:	e7e4      	b.n	8008790 <__mdiff+0x28>
 80087c6:	f100 0814 	add.w	r8, r0, #20
 80087ca:	f8da 7010 	ldr.w	r7, [sl, #16]
 80087ce:	60c5      	str	r5, [r0, #12]
 80087d0:	f04f 0c00 	mov.w	ip, #0
 80087d4:	f10a 0514 	add.w	r5, sl, #20
 80087d8:	f10a 0010 	add.w	r0, sl, #16
 80087dc:	46c2      	mov	sl, r8
 80087de:	6926      	ldr	r6, [r4, #16]
 80087e0:	f104 0914 	add.w	r9, r4, #20
 80087e4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80087e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087ec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80087f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80087f4:	fa1f f18b 	uxth.w	r1, fp
 80087f8:	4461      	add	r1, ip
 80087fa:	fa1f fc83 	uxth.w	ip, r3
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	eba1 010c 	sub.w	r1, r1, ip
 8008804:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008808:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800880c:	b289      	uxth	r1, r1
 800880e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008812:	454e      	cmp	r6, r9
 8008814:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008818:	f84a 3b04 	str.w	r3, [sl], #4
 800881c:	d8e6      	bhi.n	80087ec <__mdiff+0x84>
 800881e:	1b33      	subs	r3, r6, r4
 8008820:	3b15      	subs	r3, #21
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	3415      	adds	r4, #21
 8008828:	3304      	adds	r3, #4
 800882a:	42a6      	cmp	r6, r4
 800882c:	bf38      	it	cc
 800882e:	2304      	movcc	r3, #4
 8008830:	441d      	add	r5, r3
 8008832:	4443      	add	r3, r8
 8008834:	461e      	mov	r6, r3
 8008836:	462c      	mov	r4, r5
 8008838:	4574      	cmp	r4, lr
 800883a:	d30e      	bcc.n	800885a <__mdiff+0xf2>
 800883c:	f10e 0103 	add.w	r1, lr, #3
 8008840:	1b49      	subs	r1, r1, r5
 8008842:	f021 0103 	bic.w	r1, r1, #3
 8008846:	3d03      	subs	r5, #3
 8008848:	45ae      	cmp	lr, r5
 800884a:	bf38      	it	cc
 800884c:	2100      	movcc	r1, #0
 800884e:	4419      	add	r1, r3
 8008850:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008854:	b18b      	cbz	r3, 800887a <__mdiff+0x112>
 8008856:	6117      	str	r7, [r2, #16]
 8008858:	e7a0      	b.n	800879c <__mdiff+0x34>
 800885a:	f854 8b04 	ldr.w	r8, [r4], #4
 800885e:	fa1f f188 	uxth.w	r1, r8
 8008862:	4461      	add	r1, ip
 8008864:	1408      	asrs	r0, r1, #16
 8008866:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800886a:	b289      	uxth	r1, r1
 800886c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008870:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008874:	f846 1b04 	str.w	r1, [r6], #4
 8008878:	e7de      	b.n	8008838 <__mdiff+0xd0>
 800887a:	3f01      	subs	r7, #1
 800887c:	e7e8      	b.n	8008850 <__mdiff+0xe8>
 800887e:	bf00      	nop
 8008880:	08009cc7 	.word	0x08009cc7
 8008884:	08009cd8 	.word	0x08009cd8

08008888 <__d2b>:
 8008888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800888c:	2101      	movs	r1, #1
 800888e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008892:	4690      	mov	r8, r2
 8008894:	461d      	mov	r5, r3
 8008896:	f7ff fcd1 	bl	800823c <_Balloc>
 800889a:	4604      	mov	r4, r0
 800889c:	b930      	cbnz	r0, 80088ac <__d2b+0x24>
 800889e:	4602      	mov	r2, r0
 80088a0:	f240 310a 	movw	r1, #778	; 0x30a
 80088a4:	4b24      	ldr	r3, [pc, #144]	; (8008938 <__d2b+0xb0>)
 80088a6:	4825      	ldr	r0, [pc, #148]	; (800893c <__d2b+0xb4>)
 80088a8:	f000 fa6a 	bl	8008d80 <__assert_func>
 80088ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80088b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80088b4:	bb2d      	cbnz	r5, 8008902 <__d2b+0x7a>
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	f1b8 0300 	subs.w	r3, r8, #0
 80088bc:	d026      	beq.n	800890c <__d2b+0x84>
 80088be:	4668      	mov	r0, sp
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	f7ff fd87 	bl	80083d4 <__lo0bits>
 80088c6:	9900      	ldr	r1, [sp, #0]
 80088c8:	b1f0      	cbz	r0, 8008908 <__d2b+0x80>
 80088ca:	9a01      	ldr	r2, [sp, #4]
 80088cc:	f1c0 0320 	rsb	r3, r0, #32
 80088d0:	fa02 f303 	lsl.w	r3, r2, r3
 80088d4:	430b      	orrs	r3, r1
 80088d6:	40c2      	lsrs	r2, r0
 80088d8:	6163      	str	r3, [r4, #20]
 80088da:	9201      	str	r2, [sp, #4]
 80088dc:	9b01      	ldr	r3, [sp, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf14      	ite	ne
 80088e2:	2102      	movne	r1, #2
 80088e4:	2101      	moveq	r1, #1
 80088e6:	61a3      	str	r3, [r4, #24]
 80088e8:	6121      	str	r1, [r4, #16]
 80088ea:	b1c5      	cbz	r5, 800891e <__d2b+0x96>
 80088ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088f0:	4405      	add	r5, r0
 80088f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088f6:	603d      	str	r5, [r7, #0]
 80088f8:	6030      	str	r0, [r6, #0]
 80088fa:	4620      	mov	r0, r4
 80088fc:	b002      	add	sp, #8
 80088fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008906:	e7d6      	b.n	80088b6 <__d2b+0x2e>
 8008908:	6161      	str	r1, [r4, #20]
 800890a:	e7e7      	b.n	80088dc <__d2b+0x54>
 800890c:	a801      	add	r0, sp, #4
 800890e:	f7ff fd61 	bl	80083d4 <__lo0bits>
 8008912:	2101      	movs	r1, #1
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	6121      	str	r1, [r4, #16]
 8008918:	6163      	str	r3, [r4, #20]
 800891a:	3020      	adds	r0, #32
 800891c:	e7e5      	b.n	80088ea <__d2b+0x62>
 800891e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008922:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008926:	6038      	str	r0, [r7, #0]
 8008928:	6918      	ldr	r0, [r3, #16]
 800892a:	f7ff fd33 	bl	8008394 <__hi0bits>
 800892e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008932:	6031      	str	r1, [r6, #0]
 8008934:	e7e1      	b.n	80088fa <__d2b+0x72>
 8008936:	bf00      	nop
 8008938:	08009cc7 	.word	0x08009cc7
 800893c:	08009cd8 	.word	0x08009cd8

08008940 <_calloc_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	fb02 f501 	mul.w	r5, r2, r1
 8008946:	4629      	mov	r1, r5
 8008948:	f000 f854 	bl	80089f4 <_malloc_r>
 800894c:	4604      	mov	r4, r0
 800894e:	b118      	cbz	r0, 8008958 <_calloc_r+0x18>
 8008950:	462a      	mov	r2, r5
 8008952:	2100      	movs	r1, #0
 8008954:	f7fe f946 	bl	8006be4 <memset>
 8008958:	4620      	mov	r0, r4
 800895a:	bd38      	pop	{r3, r4, r5, pc}

0800895c <_free_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4605      	mov	r5, r0
 8008960:	2900      	cmp	r1, #0
 8008962:	d043      	beq.n	80089ec <_free_r+0x90>
 8008964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008968:	1f0c      	subs	r4, r1, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	bfb8      	it	lt
 800896e:	18e4      	addlt	r4, r4, r3
 8008970:	f000 fa62 	bl	8008e38 <__malloc_lock>
 8008974:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <_free_r+0x94>)
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	4610      	mov	r0, r2
 800897a:	b933      	cbnz	r3, 800898a <_free_r+0x2e>
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	6014      	str	r4, [r2, #0]
 8008980:	4628      	mov	r0, r5
 8008982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008986:	f000 ba5d 	b.w	8008e44 <__malloc_unlock>
 800898a:	42a3      	cmp	r3, r4
 800898c:	d90a      	bls.n	80089a4 <_free_r+0x48>
 800898e:	6821      	ldr	r1, [r4, #0]
 8008990:	1862      	adds	r2, r4, r1
 8008992:	4293      	cmp	r3, r2
 8008994:	bf01      	itttt	eq
 8008996:	681a      	ldreq	r2, [r3, #0]
 8008998:	685b      	ldreq	r3, [r3, #4]
 800899a:	1852      	addeq	r2, r2, r1
 800899c:	6022      	streq	r2, [r4, #0]
 800899e:	6063      	str	r3, [r4, #4]
 80089a0:	6004      	str	r4, [r0, #0]
 80089a2:	e7ed      	b.n	8008980 <_free_r+0x24>
 80089a4:	461a      	mov	r2, r3
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	b10b      	cbz	r3, 80089ae <_free_r+0x52>
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	d9fa      	bls.n	80089a4 <_free_r+0x48>
 80089ae:	6811      	ldr	r1, [r2, #0]
 80089b0:	1850      	adds	r0, r2, r1
 80089b2:	42a0      	cmp	r0, r4
 80089b4:	d10b      	bne.n	80089ce <_free_r+0x72>
 80089b6:	6820      	ldr	r0, [r4, #0]
 80089b8:	4401      	add	r1, r0
 80089ba:	1850      	adds	r0, r2, r1
 80089bc:	4283      	cmp	r3, r0
 80089be:	6011      	str	r1, [r2, #0]
 80089c0:	d1de      	bne.n	8008980 <_free_r+0x24>
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	4401      	add	r1, r0
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	6053      	str	r3, [r2, #4]
 80089cc:	e7d8      	b.n	8008980 <_free_r+0x24>
 80089ce:	d902      	bls.n	80089d6 <_free_r+0x7a>
 80089d0:	230c      	movs	r3, #12
 80089d2:	602b      	str	r3, [r5, #0]
 80089d4:	e7d4      	b.n	8008980 <_free_r+0x24>
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	1821      	adds	r1, r4, r0
 80089da:	428b      	cmp	r3, r1
 80089dc:	bf01      	itttt	eq
 80089de:	6819      	ldreq	r1, [r3, #0]
 80089e0:	685b      	ldreq	r3, [r3, #4]
 80089e2:	1809      	addeq	r1, r1, r0
 80089e4:	6021      	streq	r1, [r4, #0]
 80089e6:	6063      	str	r3, [r4, #4]
 80089e8:	6054      	str	r4, [r2, #4]
 80089ea:	e7c9      	b.n	8008980 <_free_r+0x24>
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	20001010 	.word	0x20001010

080089f4 <_malloc_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	1ccd      	adds	r5, r1, #3
 80089f8:	f025 0503 	bic.w	r5, r5, #3
 80089fc:	3508      	adds	r5, #8
 80089fe:	2d0c      	cmp	r5, #12
 8008a00:	bf38      	it	cc
 8008a02:	250c      	movcc	r5, #12
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	4606      	mov	r6, r0
 8008a08:	db01      	blt.n	8008a0e <_malloc_r+0x1a>
 8008a0a:	42a9      	cmp	r1, r5
 8008a0c:	d903      	bls.n	8008a16 <_malloc_r+0x22>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	6033      	str	r3, [r6, #0]
 8008a12:	2000      	movs	r0, #0
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a16:	f000 fa0f 	bl	8008e38 <__malloc_lock>
 8008a1a:	4921      	ldr	r1, [pc, #132]	; (8008aa0 <_malloc_r+0xac>)
 8008a1c:	680a      	ldr	r2, [r1, #0]
 8008a1e:	4614      	mov	r4, r2
 8008a20:	b99c      	cbnz	r4, 8008a4a <_malloc_r+0x56>
 8008a22:	4f20      	ldr	r7, [pc, #128]	; (8008aa4 <_malloc_r+0xb0>)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	b923      	cbnz	r3, 8008a32 <_malloc_r+0x3e>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f000 f998 	bl	8008d60 <_sbrk_r>
 8008a30:	6038      	str	r0, [r7, #0]
 8008a32:	4629      	mov	r1, r5
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f993 	bl	8008d60 <_sbrk_r>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d123      	bne.n	8008a86 <_malloc_r+0x92>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	4630      	mov	r0, r6
 8008a42:	6033      	str	r3, [r6, #0]
 8008a44:	f000 f9fe 	bl	8008e44 <__malloc_unlock>
 8008a48:	e7e3      	b.n	8008a12 <_malloc_r+0x1e>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	1b5b      	subs	r3, r3, r5
 8008a4e:	d417      	bmi.n	8008a80 <_malloc_r+0x8c>
 8008a50:	2b0b      	cmp	r3, #11
 8008a52:	d903      	bls.n	8008a5c <_malloc_r+0x68>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	441c      	add	r4, r3
 8008a58:	6025      	str	r5, [r4, #0]
 8008a5a:	e004      	b.n	8008a66 <_malloc_r+0x72>
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	42a2      	cmp	r2, r4
 8008a60:	bf0c      	ite	eq
 8008a62:	600b      	streq	r3, [r1, #0]
 8008a64:	6053      	strne	r3, [r2, #4]
 8008a66:	4630      	mov	r0, r6
 8008a68:	f000 f9ec 	bl	8008e44 <__malloc_unlock>
 8008a6c:	f104 000b 	add.w	r0, r4, #11
 8008a70:	1d23      	adds	r3, r4, #4
 8008a72:	f020 0007 	bic.w	r0, r0, #7
 8008a76:	1ac2      	subs	r2, r0, r3
 8008a78:	d0cc      	beq.n	8008a14 <_malloc_r+0x20>
 8008a7a:	1a1b      	subs	r3, r3, r0
 8008a7c:	50a3      	str	r3, [r4, r2]
 8008a7e:	e7c9      	b.n	8008a14 <_malloc_r+0x20>
 8008a80:	4622      	mov	r2, r4
 8008a82:	6864      	ldr	r4, [r4, #4]
 8008a84:	e7cc      	b.n	8008a20 <_malloc_r+0x2c>
 8008a86:	1cc4      	adds	r4, r0, #3
 8008a88:	f024 0403 	bic.w	r4, r4, #3
 8008a8c:	42a0      	cmp	r0, r4
 8008a8e:	d0e3      	beq.n	8008a58 <_malloc_r+0x64>
 8008a90:	1a21      	subs	r1, r4, r0
 8008a92:	4630      	mov	r0, r6
 8008a94:	f000 f964 	bl	8008d60 <_sbrk_r>
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d1dd      	bne.n	8008a58 <_malloc_r+0x64>
 8008a9c:	e7cf      	b.n	8008a3e <_malloc_r+0x4a>
 8008a9e:	bf00      	nop
 8008aa0:	20001010 	.word	0x20001010
 8008aa4:	20001014 	.word	0x20001014

08008aa8 <__ssputs_r>:
 8008aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	688e      	ldr	r6, [r1, #8]
 8008aae:	4682      	mov	sl, r0
 8008ab0:	429e      	cmp	r6, r3
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4690      	mov	r8, r2
 8008ab6:	461f      	mov	r7, r3
 8008ab8:	d838      	bhi.n	8008b2c <__ssputs_r+0x84>
 8008aba:	898a      	ldrh	r2, [r1, #12]
 8008abc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ac0:	d032      	beq.n	8008b28 <__ssputs_r+0x80>
 8008ac2:	6825      	ldr	r5, [r4, #0]
 8008ac4:	6909      	ldr	r1, [r1, #16]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	eba5 0901 	sub.w	r9, r5, r1
 8008acc:	6965      	ldr	r5, [r4, #20]
 8008ace:	444b      	add	r3, r9
 8008ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ad8:	106d      	asrs	r5, r5, #1
 8008ada:	429d      	cmp	r5, r3
 8008adc:	bf38      	it	cc
 8008ade:	461d      	movcc	r5, r3
 8008ae0:	0553      	lsls	r3, r2, #21
 8008ae2:	d531      	bpl.n	8008b48 <__ssputs_r+0xa0>
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7ff ff85 	bl	80089f4 <_malloc_r>
 8008aea:	4606      	mov	r6, r0
 8008aec:	b950      	cbnz	r0, 8008b04 <__ssputs_r+0x5c>
 8008aee:	230c      	movs	r3, #12
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	f8ca 3000 	str.w	r3, [sl]
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b04:	464a      	mov	r2, r9
 8008b06:	6921      	ldr	r1, [r4, #16]
 8008b08:	f7ff fb8a 	bl	8008220 <memcpy>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	6126      	str	r6, [r4, #16]
 8008b1a:	444e      	add	r6, r9
 8008b1c:	6026      	str	r6, [r4, #0]
 8008b1e:	463e      	mov	r6, r7
 8008b20:	6165      	str	r5, [r4, #20]
 8008b22:	eba5 0509 	sub.w	r5, r5, r9
 8008b26:	60a5      	str	r5, [r4, #8]
 8008b28:	42be      	cmp	r6, r7
 8008b2a:	d900      	bls.n	8008b2e <__ssputs_r+0x86>
 8008b2c:	463e      	mov	r6, r7
 8008b2e:	4632      	mov	r2, r6
 8008b30:	4641      	mov	r1, r8
 8008b32:	6820      	ldr	r0, [r4, #0]
 8008b34:	f000 f966 	bl	8008e04 <memmove>
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	1b9b      	subs	r3, r3, r6
 8008b3e:	4432      	add	r2, r6
 8008b40:	2000      	movs	r0, #0
 8008b42:	60a3      	str	r3, [r4, #8]
 8008b44:	6022      	str	r2, [r4, #0]
 8008b46:	e7db      	b.n	8008b00 <__ssputs_r+0x58>
 8008b48:	462a      	mov	r2, r5
 8008b4a:	f000 f981 	bl	8008e50 <_realloc_r>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d1e1      	bne.n	8008b18 <__ssputs_r+0x70>
 8008b54:	4650      	mov	r0, sl
 8008b56:	6921      	ldr	r1, [r4, #16]
 8008b58:	f7ff ff00 	bl	800895c <_free_r>
 8008b5c:	e7c7      	b.n	8008aee <__ssputs_r+0x46>
	...

08008b60 <_svfiprintf_r>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	4698      	mov	r8, r3
 8008b66:	898b      	ldrh	r3, [r1, #12]
 8008b68:	4607      	mov	r7, r0
 8008b6a:	061b      	lsls	r3, r3, #24
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	4614      	mov	r4, r2
 8008b70:	b09d      	sub	sp, #116	; 0x74
 8008b72:	d50e      	bpl.n	8008b92 <_svfiprintf_r+0x32>
 8008b74:	690b      	ldr	r3, [r1, #16]
 8008b76:	b963      	cbnz	r3, 8008b92 <_svfiprintf_r+0x32>
 8008b78:	2140      	movs	r1, #64	; 0x40
 8008b7a:	f7ff ff3b 	bl	80089f4 <_malloc_r>
 8008b7e:	6028      	str	r0, [r5, #0]
 8008b80:	6128      	str	r0, [r5, #16]
 8008b82:	b920      	cbnz	r0, 8008b8e <_svfiprintf_r+0x2e>
 8008b84:	230c      	movs	r3, #12
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e0d1      	b.n	8008d32 <_svfiprintf_r+0x1d2>
 8008b8e:	2340      	movs	r3, #64	; 0x40
 8008b90:	616b      	str	r3, [r5, #20]
 8008b92:	2300      	movs	r3, #0
 8008b94:	9309      	str	r3, [sp, #36]	; 0x24
 8008b96:	2320      	movs	r3, #32
 8008b98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b9c:	2330      	movs	r3, #48	; 0x30
 8008b9e:	f04f 0901 	mov.w	r9, #1
 8008ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d4c <_svfiprintf_r+0x1ec>
 8008baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bae:	4623      	mov	r3, r4
 8008bb0:	469a      	mov	sl, r3
 8008bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb6:	b10a      	cbz	r2, 8008bbc <_svfiprintf_r+0x5c>
 8008bb8:	2a25      	cmp	r2, #37	; 0x25
 8008bba:	d1f9      	bne.n	8008bb0 <_svfiprintf_r+0x50>
 8008bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008bc0:	d00b      	beq.n	8008bda <_svfiprintf_r+0x7a>
 8008bc2:	465b      	mov	r3, fp
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f7ff ff6d 	bl	8008aa8 <__ssputs_r>
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f000 80aa 	beq.w	8008d28 <_svfiprintf_r+0x1c8>
 8008bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd6:	445a      	add	r2, fp
 8008bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008bda:	f89a 3000 	ldrb.w	r3, [sl]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 80a2 	beq.w	8008d28 <_svfiprintf_r+0x1c8>
 8008be4:	2300      	movs	r3, #0
 8008be6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bee:	f10a 0a01 	add.w	sl, sl, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008bfc:	4654      	mov	r4, sl
 8008bfe:	2205      	movs	r2, #5
 8008c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c04:	4851      	ldr	r0, [pc, #324]	; (8008d4c <_svfiprintf_r+0x1ec>)
 8008c06:	f7ff fafd 	bl	8008204 <memchr>
 8008c0a:	9a04      	ldr	r2, [sp, #16]
 8008c0c:	b9d8      	cbnz	r0, 8008c46 <_svfiprintf_r+0xe6>
 8008c0e:	06d0      	lsls	r0, r2, #27
 8008c10:	bf44      	itt	mi
 8008c12:	2320      	movmi	r3, #32
 8008c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c18:	0711      	lsls	r1, r2, #28
 8008c1a:	bf44      	itt	mi
 8008c1c:	232b      	movmi	r3, #43	; 0x2b
 8008c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c22:	f89a 3000 	ldrb.w	r3, [sl]
 8008c26:	2b2a      	cmp	r3, #42	; 0x2a
 8008c28:	d015      	beq.n	8008c56 <_svfiprintf_r+0xf6>
 8008c2a:	4654      	mov	r4, sl
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	f04f 0c0a 	mov.w	ip, #10
 8008c32:	9a07      	ldr	r2, [sp, #28]
 8008c34:	4621      	mov	r1, r4
 8008c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c3a:	3b30      	subs	r3, #48	; 0x30
 8008c3c:	2b09      	cmp	r3, #9
 8008c3e:	d94e      	bls.n	8008cde <_svfiprintf_r+0x17e>
 8008c40:	b1b0      	cbz	r0, 8008c70 <_svfiprintf_r+0x110>
 8008c42:	9207      	str	r2, [sp, #28]
 8008c44:	e014      	b.n	8008c70 <_svfiprintf_r+0x110>
 8008c46:	eba0 0308 	sub.w	r3, r0, r8
 8008c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	46a2      	mov	sl, r4
 8008c52:	9304      	str	r3, [sp, #16]
 8008c54:	e7d2      	b.n	8008bfc <_svfiprintf_r+0x9c>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	1d19      	adds	r1, r3, #4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	9103      	str	r1, [sp, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bfbb      	ittet	lt
 8008c62:	425b      	neglt	r3, r3
 8008c64:	f042 0202 	orrlt.w	r2, r2, #2
 8008c68:	9307      	strge	r3, [sp, #28]
 8008c6a:	9307      	strlt	r3, [sp, #28]
 8008c6c:	bfb8      	it	lt
 8008c6e:	9204      	strlt	r2, [sp, #16]
 8008c70:	7823      	ldrb	r3, [r4, #0]
 8008c72:	2b2e      	cmp	r3, #46	; 0x2e
 8008c74:	d10c      	bne.n	8008c90 <_svfiprintf_r+0x130>
 8008c76:	7863      	ldrb	r3, [r4, #1]
 8008c78:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7a:	d135      	bne.n	8008ce8 <_svfiprintf_r+0x188>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	3402      	adds	r4, #2
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	9203      	str	r2, [sp, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfb8      	it	lt
 8008c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d5c <_svfiprintf_r+0x1fc>
 8008c94:	2203      	movs	r2, #3
 8008c96:	4650      	mov	r0, sl
 8008c98:	7821      	ldrb	r1, [r4, #0]
 8008c9a:	f7ff fab3 	bl	8008204 <memchr>
 8008c9e:	b140      	cbz	r0, 8008cb2 <_svfiprintf_r+0x152>
 8008ca0:	2340      	movs	r3, #64	; 0x40
 8008ca2:	eba0 000a 	sub.w	r0, r0, sl
 8008ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8008caa:	9b04      	ldr	r3, [sp, #16]
 8008cac:	3401      	adds	r4, #1
 8008cae:	4303      	orrs	r3, r0
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb6:	2206      	movs	r2, #6
 8008cb8:	4825      	ldr	r0, [pc, #148]	; (8008d50 <_svfiprintf_r+0x1f0>)
 8008cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cbe:	f7ff faa1 	bl	8008204 <memchr>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d038      	beq.n	8008d38 <_svfiprintf_r+0x1d8>
 8008cc6:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <_svfiprintf_r+0x1f4>)
 8008cc8:	bb1b      	cbnz	r3, 8008d12 <_svfiprintf_r+0x1b2>
 8008cca:	9b03      	ldr	r3, [sp, #12]
 8008ccc:	3307      	adds	r3, #7
 8008cce:	f023 0307 	bic.w	r3, r3, #7
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd8:	4433      	add	r3, r6
 8008cda:	9309      	str	r3, [sp, #36]	; 0x24
 8008cdc:	e767      	b.n	8008bae <_svfiprintf_r+0x4e>
 8008cde:	460c      	mov	r4, r1
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ce6:	e7a5      	b.n	8008c34 <_svfiprintf_r+0xd4>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f04f 0c0a 	mov.w	ip, #10
 8008cee:	4619      	mov	r1, r3
 8008cf0:	3401      	adds	r4, #1
 8008cf2:	9305      	str	r3, [sp, #20]
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cfa:	3a30      	subs	r2, #48	; 0x30
 8008cfc:	2a09      	cmp	r2, #9
 8008cfe:	d903      	bls.n	8008d08 <_svfiprintf_r+0x1a8>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0c5      	beq.n	8008c90 <_svfiprintf_r+0x130>
 8008d04:	9105      	str	r1, [sp, #20]
 8008d06:	e7c3      	b.n	8008c90 <_svfiprintf_r+0x130>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d10:	e7f0      	b.n	8008cf4 <_svfiprintf_r+0x194>
 8008d12:	ab03      	add	r3, sp, #12
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	462a      	mov	r2, r5
 8008d18:	4638      	mov	r0, r7
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <_svfiprintf_r+0x1f8>)
 8008d1c:	a904      	add	r1, sp, #16
 8008d1e:	f7fe f807 	bl	8006d30 <_printf_float>
 8008d22:	1c42      	adds	r2, r0, #1
 8008d24:	4606      	mov	r6, r0
 8008d26:	d1d6      	bne.n	8008cd6 <_svfiprintf_r+0x176>
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	065b      	lsls	r3, r3, #25
 8008d2c:	f53f af2c 	bmi.w	8008b88 <_svfiprintf_r+0x28>
 8008d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d32:	b01d      	add	sp, #116	; 0x74
 8008d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d38:	ab03      	add	r3, sp, #12
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	462a      	mov	r2, r5
 8008d3e:	4638      	mov	r0, r7
 8008d40:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <_svfiprintf_r+0x1f8>)
 8008d42:	a904      	add	r1, sp, #16
 8008d44:	f7fe fa90 	bl	8007268 <_printf_i>
 8008d48:	e7eb      	b.n	8008d22 <_svfiprintf_r+0x1c2>
 8008d4a:	bf00      	nop
 8008d4c:	08009e34 	.word	0x08009e34
 8008d50:	08009e3e 	.word	0x08009e3e
 8008d54:	08006d31 	.word	0x08006d31
 8008d58:	08008aa9 	.word	0x08008aa9
 8008d5c:	08009e3a 	.word	0x08009e3a

08008d60 <_sbrk_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	2300      	movs	r3, #0
 8008d64:	4d05      	ldr	r5, [pc, #20]	; (8008d7c <_sbrk_r+0x1c>)
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	f7f9 feec 	bl	8002b48 <_sbrk>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_sbrk_r+0x1a>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_sbrk_r+0x1a>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	20002868 	.word	0x20002868

08008d80 <__assert_func>:
 8008d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d82:	4614      	mov	r4, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <__assert_func+0x2c>)
 8008d88:	4605      	mov	r5, r0
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68d8      	ldr	r0, [r3, #12]
 8008d8e:	b14c      	cbz	r4, 8008da4 <__assert_func+0x24>
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <__assert_func+0x30>)
 8008d92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d96:	9100      	str	r1, [sp, #0]
 8008d98:	462b      	mov	r3, r5
 8008d9a:	4906      	ldr	r1, [pc, #24]	; (8008db4 <__assert_func+0x34>)
 8008d9c:	f000 f80e 	bl	8008dbc <fiprintf>
 8008da0:	f000 faa2 	bl	80092e8 <abort>
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <__assert_func+0x38>)
 8008da6:	461c      	mov	r4, r3
 8008da8:	e7f3      	b.n	8008d92 <__assert_func+0x12>
 8008daa:	bf00      	nop
 8008dac:	20000014 	.word	0x20000014
 8008db0:	08009e45 	.word	0x08009e45
 8008db4:	08009e52 	.word	0x08009e52
 8008db8:	08009e80 	.word	0x08009e80

08008dbc <fiprintf>:
 8008dbc:	b40e      	push	{r1, r2, r3}
 8008dbe:	b503      	push	{r0, r1, lr}
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	ab03      	add	r3, sp, #12
 8008dc4:	4805      	ldr	r0, [pc, #20]	; (8008ddc <fiprintf+0x20>)
 8008dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dca:	6800      	ldr	r0, [r0, #0]
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	f000 f88d 	bl	8008eec <_vfiprintf_r>
 8008dd2:	b002      	add	sp, #8
 8008dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd8:	b003      	add	sp, #12
 8008dda:	4770      	bx	lr
 8008ddc:	20000014 	.word	0x20000014

08008de0 <__ascii_mbtowc>:
 8008de0:	b082      	sub	sp, #8
 8008de2:	b901      	cbnz	r1, 8008de6 <__ascii_mbtowc+0x6>
 8008de4:	a901      	add	r1, sp, #4
 8008de6:	b142      	cbz	r2, 8008dfa <__ascii_mbtowc+0x1a>
 8008de8:	b14b      	cbz	r3, 8008dfe <__ascii_mbtowc+0x1e>
 8008dea:	7813      	ldrb	r3, [r2, #0]
 8008dec:	600b      	str	r3, [r1, #0]
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	1e10      	subs	r0, r2, #0
 8008df2:	bf18      	it	ne
 8008df4:	2001      	movne	r0, #1
 8008df6:	b002      	add	sp, #8
 8008df8:	4770      	bx	lr
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	e7fb      	b.n	8008df6 <__ascii_mbtowc+0x16>
 8008dfe:	f06f 0001 	mvn.w	r0, #1
 8008e02:	e7f8      	b.n	8008df6 <__ascii_mbtowc+0x16>

08008e04 <memmove>:
 8008e04:	4288      	cmp	r0, r1
 8008e06:	b510      	push	{r4, lr}
 8008e08:	eb01 0402 	add.w	r4, r1, r2
 8008e0c:	d902      	bls.n	8008e14 <memmove+0x10>
 8008e0e:	4284      	cmp	r4, r0
 8008e10:	4623      	mov	r3, r4
 8008e12:	d807      	bhi.n	8008e24 <memmove+0x20>
 8008e14:	1e43      	subs	r3, r0, #1
 8008e16:	42a1      	cmp	r1, r4
 8008e18:	d008      	beq.n	8008e2c <memmove+0x28>
 8008e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e22:	e7f8      	b.n	8008e16 <memmove+0x12>
 8008e24:	4601      	mov	r1, r0
 8008e26:	4402      	add	r2, r0
 8008e28:	428a      	cmp	r2, r1
 8008e2a:	d100      	bne.n	8008e2e <memmove+0x2a>
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e36:	e7f7      	b.n	8008e28 <memmove+0x24>

08008e38 <__malloc_lock>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__malloc_lock+0x8>)
 8008e3a:	f000 bc15 	b.w	8009668 <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	20002870 	.word	0x20002870

08008e44 <__malloc_unlock>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__malloc_unlock+0x8>)
 8008e46:	f000 bc10 	b.w	800966a <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	20002870 	.word	0x20002870

08008e50 <_realloc_r>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	4607      	mov	r7, r0
 8008e54:	4614      	mov	r4, r2
 8008e56:	460e      	mov	r6, r1
 8008e58:	b921      	cbnz	r1, 8008e64 <_realloc_r+0x14>
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e60:	f7ff bdc8 	b.w	80089f4 <_malloc_r>
 8008e64:	b922      	cbnz	r2, 8008e70 <_realloc_r+0x20>
 8008e66:	f7ff fd79 	bl	800895c <_free_r>
 8008e6a:	4625      	mov	r5, r4
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e70:	f000 fc60 	bl	8009734 <_malloc_usable_size_r>
 8008e74:	42a0      	cmp	r0, r4
 8008e76:	d20f      	bcs.n	8008e98 <_realloc_r+0x48>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f7ff fdba 	bl	80089f4 <_malloc_r>
 8008e80:	4605      	mov	r5, r0
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d0f2      	beq.n	8008e6c <_realloc_r+0x1c>
 8008e86:	4631      	mov	r1, r6
 8008e88:	4622      	mov	r2, r4
 8008e8a:	f7ff f9c9 	bl	8008220 <memcpy>
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff fd63 	bl	800895c <_free_r>
 8008e96:	e7e9      	b.n	8008e6c <_realloc_r+0x1c>
 8008e98:	4635      	mov	r5, r6
 8008e9a:	e7e7      	b.n	8008e6c <_realloc_r+0x1c>

08008e9c <__sfputc_r>:
 8008e9c:	6893      	ldr	r3, [r2, #8]
 8008e9e:	b410      	push	{r4}
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	6093      	str	r3, [r2, #8]
 8008ea6:	da07      	bge.n	8008eb8 <__sfputc_r+0x1c>
 8008ea8:	6994      	ldr	r4, [r2, #24]
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	db01      	blt.n	8008eb2 <__sfputc_r+0x16>
 8008eae:	290a      	cmp	r1, #10
 8008eb0:	d102      	bne.n	8008eb8 <__sfputc_r+0x1c>
 8008eb2:	bc10      	pop	{r4}
 8008eb4:	f000 b94a 	b.w	800914c <__swbuf_r>
 8008eb8:	6813      	ldr	r3, [r2, #0]
 8008eba:	1c58      	adds	r0, r3, #1
 8008ebc:	6010      	str	r0, [r2, #0]
 8008ebe:	7019      	strb	r1, [r3, #0]
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	bc10      	pop	{r4}
 8008ec4:	4770      	bx	lr

08008ec6 <__sfputs_r>:
 8008ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec8:	4606      	mov	r6, r0
 8008eca:	460f      	mov	r7, r1
 8008ecc:	4614      	mov	r4, r2
 8008ece:	18d5      	adds	r5, r2, r3
 8008ed0:	42ac      	cmp	r4, r5
 8008ed2:	d101      	bne.n	8008ed8 <__sfputs_r+0x12>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e007      	b.n	8008ee8 <__sfputs_r+0x22>
 8008ed8:	463a      	mov	r2, r7
 8008eda:	4630      	mov	r0, r6
 8008edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee0:	f7ff ffdc 	bl	8008e9c <__sfputc_r>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d1f3      	bne.n	8008ed0 <__sfputs_r+0xa>
 8008ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008eec <_vfiprintf_r>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	4614      	mov	r4, r2
 8008ef4:	4698      	mov	r8, r3
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	b09d      	sub	sp, #116	; 0x74
 8008efa:	b118      	cbz	r0, 8008f04 <_vfiprintf_r+0x18>
 8008efc:	6983      	ldr	r3, [r0, #24]
 8008efe:	b90b      	cbnz	r3, 8008f04 <_vfiprintf_r+0x18>
 8008f00:	f000 fb14 	bl	800952c <__sinit>
 8008f04:	4b89      	ldr	r3, [pc, #548]	; (800912c <_vfiprintf_r+0x240>)
 8008f06:	429d      	cmp	r5, r3
 8008f08:	d11b      	bne.n	8008f42 <_vfiprintf_r+0x56>
 8008f0a:	6875      	ldr	r5, [r6, #4]
 8008f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f0e:	07d9      	lsls	r1, r3, #31
 8008f10:	d405      	bmi.n	8008f1e <_vfiprintf_r+0x32>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	059a      	lsls	r2, r3, #22
 8008f16:	d402      	bmi.n	8008f1e <_vfiprintf_r+0x32>
 8008f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1a:	f000 fba5 	bl	8009668 <__retarget_lock_acquire_recursive>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	071b      	lsls	r3, r3, #28
 8008f22:	d501      	bpl.n	8008f28 <_vfiprintf_r+0x3c>
 8008f24:	692b      	ldr	r3, [r5, #16]
 8008f26:	b9eb      	cbnz	r3, 8008f64 <_vfiprintf_r+0x78>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f000 f96e 	bl	800920c <__swsetup_r>
 8008f30:	b1c0      	cbz	r0, 8008f64 <_vfiprintf_r+0x78>
 8008f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f34:	07dc      	lsls	r4, r3, #31
 8008f36:	d50e      	bpl.n	8008f56 <_vfiprintf_r+0x6a>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	b01d      	add	sp, #116	; 0x74
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	4b7b      	ldr	r3, [pc, #492]	; (8009130 <_vfiprintf_r+0x244>)
 8008f44:	429d      	cmp	r5, r3
 8008f46:	d101      	bne.n	8008f4c <_vfiprintf_r+0x60>
 8008f48:	68b5      	ldr	r5, [r6, #8]
 8008f4a:	e7df      	b.n	8008f0c <_vfiprintf_r+0x20>
 8008f4c:	4b79      	ldr	r3, [pc, #484]	; (8009134 <_vfiprintf_r+0x248>)
 8008f4e:	429d      	cmp	r5, r3
 8008f50:	bf08      	it	eq
 8008f52:	68f5      	ldreq	r5, [r6, #12]
 8008f54:	e7da      	b.n	8008f0c <_vfiprintf_r+0x20>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	0598      	lsls	r0, r3, #22
 8008f5a:	d4ed      	bmi.n	8008f38 <_vfiprintf_r+0x4c>
 8008f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f5e:	f000 fb84 	bl	800966a <__retarget_lock_release_recursive>
 8008f62:	e7e9      	b.n	8008f38 <_vfiprintf_r+0x4c>
 8008f64:	2300      	movs	r3, #0
 8008f66:	9309      	str	r3, [sp, #36]	; 0x24
 8008f68:	2320      	movs	r3, #32
 8008f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f6e:	2330      	movs	r3, #48	; 0x30
 8008f70:	f04f 0901 	mov.w	r9, #1
 8008f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009138 <_vfiprintf_r+0x24c>
 8008f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f80:	4623      	mov	r3, r4
 8008f82:	469a      	mov	sl, r3
 8008f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f88:	b10a      	cbz	r2, 8008f8e <_vfiprintf_r+0xa2>
 8008f8a:	2a25      	cmp	r2, #37	; 0x25
 8008f8c:	d1f9      	bne.n	8008f82 <_vfiprintf_r+0x96>
 8008f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f92:	d00b      	beq.n	8008fac <_vfiprintf_r+0xc0>
 8008f94:	465b      	mov	r3, fp
 8008f96:	4622      	mov	r2, r4
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f7ff ff93 	bl	8008ec6 <__sfputs_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	f000 80aa 	beq.w	80090fa <_vfiprintf_r+0x20e>
 8008fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa8:	445a      	add	r2, fp
 8008faa:	9209      	str	r2, [sp, #36]	; 0x24
 8008fac:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 80a2 	beq.w	80090fa <_vfiprintf_r+0x20e>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc0:	f10a 0a01 	add.w	sl, sl, #1
 8008fc4:	9304      	str	r3, [sp, #16]
 8008fc6:	9307      	str	r3, [sp, #28]
 8008fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8008fce:	4654      	mov	r4, sl
 8008fd0:	2205      	movs	r2, #5
 8008fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd6:	4858      	ldr	r0, [pc, #352]	; (8009138 <_vfiprintf_r+0x24c>)
 8008fd8:	f7ff f914 	bl	8008204 <memchr>
 8008fdc:	9a04      	ldr	r2, [sp, #16]
 8008fde:	b9d8      	cbnz	r0, 8009018 <_vfiprintf_r+0x12c>
 8008fe0:	06d1      	lsls	r1, r2, #27
 8008fe2:	bf44      	itt	mi
 8008fe4:	2320      	movmi	r3, #32
 8008fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fea:	0713      	lsls	r3, r2, #28
 8008fec:	bf44      	itt	mi
 8008fee:	232b      	movmi	r3, #43	; 0x2b
 8008ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffa:	d015      	beq.n	8009028 <_vfiprintf_r+0x13c>
 8008ffc:	4654      	mov	r4, sl
 8008ffe:	2000      	movs	r0, #0
 8009000:	f04f 0c0a 	mov.w	ip, #10
 8009004:	9a07      	ldr	r2, [sp, #28]
 8009006:	4621      	mov	r1, r4
 8009008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800900c:	3b30      	subs	r3, #48	; 0x30
 800900e:	2b09      	cmp	r3, #9
 8009010:	d94e      	bls.n	80090b0 <_vfiprintf_r+0x1c4>
 8009012:	b1b0      	cbz	r0, 8009042 <_vfiprintf_r+0x156>
 8009014:	9207      	str	r2, [sp, #28]
 8009016:	e014      	b.n	8009042 <_vfiprintf_r+0x156>
 8009018:	eba0 0308 	sub.w	r3, r0, r8
 800901c:	fa09 f303 	lsl.w	r3, r9, r3
 8009020:	4313      	orrs	r3, r2
 8009022:	46a2      	mov	sl, r4
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	e7d2      	b.n	8008fce <_vfiprintf_r+0xe2>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	1d19      	adds	r1, r3, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	9103      	str	r1, [sp, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfbb      	ittet	lt
 8009034:	425b      	neglt	r3, r3
 8009036:	f042 0202 	orrlt.w	r2, r2, #2
 800903a:	9307      	strge	r3, [sp, #28]
 800903c:	9307      	strlt	r3, [sp, #28]
 800903e:	bfb8      	it	lt
 8009040:	9204      	strlt	r2, [sp, #16]
 8009042:	7823      	ldrb	r3, [r4, #0]
 8009044:	2b2e      	cmp	r3, #46	; 0x2e
 8009046:	d10c      	bne.n	8009062 <_vfiprintf_r+0x176>
 8009048:	7863      	ldrb	r3, [r4, #1]
 800904a:	2b2a      	cmp	r3, #42	; 0x2a
 800904c:	d135      	bne.n	80090ba <_vfiprintf_r+0x1ce>
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	3402      	adds	r4, #2
 8009052:	1d1a      	adds	r2, r3, #4
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	9203      	str	r2, [sp, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	bfb8      	it	lt
 800905c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009060:	9305      	str	r3, [sp, #20]
 8009062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009148 <_vfiprintf_r+0x25c>
 8009066:	2203      	movs	r2, #3
 8009068:	4650      	mov	r0, sl
 800906a:	7821      	ldrb	r1, [r4, #0]
 800906c:	f7ff f8ca 	bl	8008204 <memchr>
 8009070:	b140      	cbz	r0, 8009084 <_vfiprintf_r+0x198>
 8009072:	2340      	movs	r3, #64	; 0x40
 8009074:	eba0 000a 	sub.w	r0, r0, sl
 8009078:	fa03 f000 	lsl.w	r0, r3, r0
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	3401      	adds	r4, #1
 8009080:	4303      	orrs	r3, r0
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	2206      	movs	r2, #6
 800908a:	482c      	ldr	r0, [pc, #176]	; (800913c <_vfiprintf_r+0x250>)
 800908c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009090:	f7ff f8b8 	bl	8008204 <memchr>
 8009094:	2800      	cmp	r0, #0
 8009096:	d03f      	beq.n	8009118 <_vfiprintf_r+0x22c>
 8009098:	4b29      	ldr	r3, [pc, #164]	; (8009140 <_vfiprintf_r+0x254>)
 800909a:	bb1b      	cbnz	r3, 80090e4 <_vfiprintf_r+0x1f8>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	3307      	adds	r3, #7
 80090a0:	f023 0307 	bic.w	r3, r3, #7
 80090a4:	3308      	adds	r3, #8
 80090a6:	9303      	str	r3, [sp, #12]
 80090a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090aa:	443b      	add	r3, r7
 80090ac:	9309      	str	r3, [sp, #36]	; 0x24
 80090ae:	e767      	b.n	8008f80 <_vfiprintf_r+0x94>
 80090b0:	460c      	mov	r4, r1
 80090b2:	2001      	movs	r0, #1
 80090b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b8:	e7a5      	b.n	8009006 <_vfiprintf_r+0x11a>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f04f 0c0a 	mov.w	ip, #10
 80090c0:	4619      	mov	r1, r3
 80090c2:	3401      	adds	r4, #1
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090cc:	3a30      	subs	r2, #48	; 0x30
 80090ce:	2a09      	cmp	r2, #9
 80090d0:	d903      	bls.n	80090da <_vfiprintf_r+0x1ee>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0c5      	beq.n	8009062 <_vfiprintf_r+0x176>
 80090d6:	9105      	str	r1, [sp, #20]
 80090d8:	e7c3      	b.n	8009062 <_vfiprintf_r+0x176>
 80090da:	4604      	mov	r4, r0
 80090dc:	2301      	movs	r3, #1
 80090de:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e2:	e7f0      	b.n	80090c6 <_vfiprintf_r+0x1da>
 80090e4:	ab03      	add	r3, sp, #12
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	462a      	mov	r2, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	4b15      	ldr	r3, [pc, #84]	; (8009144 <_vfiprintf_r+0x258>)
 80090ee:	a904      	add	r1, sp, #16
 80090f0:	f7fd fe1e 	bl	8006d30 <_printf_float>
 80090f4:	4607      	mov	r7, r0
 80090f6:	1c78      	adds	r0, r7, #1
 80090f8:	d1d6      	bne.n	80090a8 <_vfiprintf_r+0x1bc>
 80090fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090fc:	07d9      	lsls	r1, r3, #31
 80090fe:	d405      	bmi.n	800910c <_vfiprintf_r+0x220>
 8009100:	89ab      	ldrh	r3, [r5, #12]
 8009102:	059a      	lsls	r2, r3, #22
 8009104:	d402      	bmi.n	800910c <_vfiprintf_r+0x220>
 8009106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009108:	f000 faaf 	bl	800966a <__retarget_lock_release_recursive>
 800910c:	89ab      	ldrh	r3, [r5, #12]
 800910e:	065b      	lsls	r3, r3, #25
 8009110:	f53f af12 	bmi.w	8008f38 <_vfiprintf_r+0x4c>
 8009114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009116:	e711      	b.n	8008f3c <_vfiprintf_r+0x50>
 8009118:	ab03      	add	r3, sp, #12
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	462a      	mov	r2, r5
 800911e:	4630      	mov	r0, r6
 8009120:	4b08      	ldr	r3, [pc, #32]	; (8009144 <_vfiprintf_r+0x258>)
 8009122:	a904      	add	r1, sp, #16
 8009124:	f7fe f8a0 	bl	8007268 <_printf_i>
 8009128:	e7e4      	b.n	80090f4 <_vfiprintf_r+0x208>
 800912a:	bf00      	nop
 800912c:	08009fac 	.word	0x08009fac
 8009130:	08009fcc 	.word	0x08009fcc
 8009134:	08009f8c 	.word	0x08009f8c
 8009138:	08009e34 	.word	0x08009e34
 800913c:	08009e3e 	.word	0x08009e3e
 8009140:	08006d31 	.word	0x08006d31
 8009144:	08008ec7 	.word	0x08008ec7
 8009148:	08009e3a 	.word	0x08009e3a

0800914c <__swbuf_r>:
 800914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914e:	460e      	mov	r6, r1
 8009150:	4614      	mov	r4, r2
 8009152:	4605      	mov	r5, r0
 8009154:	b118      	cbz	r0, 800915e <__swbuf_r+0x12>
 8009156:	6983      	ldr	r3, [r0, #24]
 8009158:	b90b      	cbnz	r3, 800915e <__swbuf_r+0x12>
 800915a:	f000 f9e7 	bl	800952c <__sinit>
 800915e:	4b21      	ldr	r3, [pc, #132]	; (80091e4 <__swbuf_r+0x98>)
 8009160:	429c      	cmp	r4, r3
 8009162:	d12b      	bne.n	80091bc <__swbuf_r+0x70>
 8009164:	686c      	ldr	r4, [r5, #4]
 8009166:	69a3      	ldr	r3, [r4, #24]
 8009168:	60a3      	str	r3, [r4, #8]
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	071a      	lsls	r2, r3, #28
 800916e:	d52f      	bpl.n	80091d0 <__swbuf_r+0x84>
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	b36b      	cbz	r3, 80091d0 <__swbuf_r+0x84>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	6820      	ldr	r0, [r4, #0]
 8009178:	b2f6      	uxtb	r6, r6
 800917a:	1ac0      	subs	r0, r0, r3
 800917c:	6963      	ldr	r3, [r4, #20]
 800917e:	4637      	mov	r7, r6
 8009180:	4283      	cmp	r3, r0
 8009182:	dc04      	bgt.n	800918e <__swbuf_r+0x42>
 8009184:	4621      	mov	r1, r4
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f93c 	bl	8009404 <_fflush_r>
 800918c:	bb30      	cbnz	r0, 80091dc <__swbuf_r+0x90>
 800918e:	68a3      	ldr	r3, [r4, #8]
 8009190:	3001      	adds	r0, #1
 8009192:	3b01      	subs	r3, #1
 8009194:	60a3      	str	r3, [r4, #8]
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	6022      	str	r2, [r4, #0]
 800919c:	701e      	strb	r6, [r3, #0]
 800919e:	6963      	ldr	r3, [r4, #20]
 80091a0:	4283      	cmp	r3, r0
 80091a2:	d004      	beq.n	80091ae <__swbuf_r+0x62>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	07db      	lsls	r3, r3, #31
 80091a8:	d506      	bpl.n	80091b8 <__swbuf_r+0x6c>
 80091aa:	2e0a      	cmp	r6, #10
 80091ac:	d104      	bne.n	80091b8 <__swbuf_r+0x6c>
 80091ae:	4621      	mov	r1, r4
 80091b0:	4628      	mov	r0, r5
 80091b2:	f000 f927 	bl	8009404 <_fflush_r>
 80091b6:	b988      	cbnz	r0, 80091dc <__swbuf_r+0x90>
 80091b8:	4638      	mov	r0, r7
 80091ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <__swbuf_r+0x9c>)
 80091be:	429c      	cmp	r4, r3
 80091c0:	d101      	bne.n	80091c6 <__swbuf_r+0x7a>
 80091c2:	68ac      	ldr	r4, [r5, #8]
 80091c4:	e7cf      	b.n	8009166 <__swbuf_r+0x1a>
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <__swbuf_r+0xa0>)
 80091c8:	429c      	cmp	r4, r3
 80091ca:	bf08      	it	eq
 80091cc:	68ec      	ldreq	r4, [r5, #12]
 80091ce:	e7ca      	b.n	8009166 <__swbuf_r+0x1a>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4628      	mov	r0, r5
 80091d4:	f000 f81a 	bl	800920c <__swsetup_r>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d0cb      	beq.n	8009174 <__swbuf_r+0x28>
 80091dc:	f04f 37ff 	mov.w	r7, #4294967295
 80091e0:	e7ea      	b.n	80091b8 <__swbuf_r+0x6c>
 80091e2:	bf00      	nop
 80091e4:	08009fac 	.word	0x08009fac
 80091e8:	08009fcc 	.word	0x08009fcc
 80091ec:	08009f8c 	.word	0x08009f8c

080091f0 <__ascii_wctomb>:
 80091f0:	4603      	mov	r3, r0
 80091f2:	4608      	mov	r0, r1
 80091f4:	b141      	cbz	r1, 8009208 <__ascii_wctomb+0x18>
 80091f6:	2aff      	cmp	r2, #255	; 0xff
 80091f8:	d904      	bls.n	8009204 <__ascii_wctomb+0x14>
 80091fa:	228a      	movs	r2, #138	; 0x8a
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	4770      	bx	lr
 8009204:	2001      	movs	r0, #1
 8009206:	700a      	strb	r2, [r1, #0]
 8009208:	4770      	bx	lr
	...

0800920c <__swsetup_r>:
 800920c:	4b32      	ldr	r3, [pc, #200]	; (80092d8 <__swsetup_r+0xcc>)
 800920e:	b570      	push	{r4, r5, r6, lr}
 8009210:	681d      	ldr	r5, [r3, #0]
 8009212:	4606      	mov	r6, r0
 8009214:	460c      	mov	r4, r1
 8009216:	b125      	cbz	r5, 8009222 <__swsetup_r+0x16>
 8009218:	69ab      	ldr	r3, [r5, #24]
 800921a:	b913      	cbnz	r3, 8009222 <__swsetup_r+0x16>
 800921c:	4628      	mov	r0, r5
 800921e:	f000 f985 	bl	800952c <__sinit>
 8009222:	4b2e      	ldr	r3, [pc, #184]	; (80092dc <__swsetup_r+0xd0>)
 8009224:	429c      	cmp	r4, r3
 8009226:	d10f      	bne.n	8009248 <__swsetup_r+0x3c>
 8009228:	686c      	ldr	r4, [r5, #4]
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009230:	0719      	lsls	r1, r3, #28
 8009232:	d42c      	bmi.n	800928e <__swsetup_r+0x82>
 8009234:	06dd      	lsls	r5, r3, #27
 8009236:	d411      	bmi.n	800925c <__swsetup_r+0x50>
 8009238:	2309      	movs	r3, #9
 800923a:	6033      	str	r3, [r6, #0]
 800923c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	e03e      	b.n	80092c6 <__swsetup_r+0xba>
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <__swsetup_r+0xd4>)
 800924a:	429c      	cmp	r4, r3
 800924c:	d101      	bne.n	8009252 <__swsetup_r+0x46>
 800924e:	68ac      	ldr	r4, [r5, #8]
 8009250:	e7eb      	b.n	800922a <__swsetup_r+0x1e>
 8009252:	4b24      	ldr	r3, [pc, #144]	; (80092e4 <__swsetup_r+0xd8>)
 8009254:	429c      	cmp	r4, r3
 8009256:	bf08      	it	eq
 8009258:	68ec      	ldreq	r4, [r5, #12]
 800925a:	e7e6      	b.n	800922a <__swsetup_r+0x1e>
 800925c:	0758      	lsls	r0, r3, #29
 800925e:	d512      	bpl.n	8009286 <__swsetup_r+0x7a>
 8009260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009262:	b141      	cbz	r1, 8009276 <__swsetup_r+0x6a>
 8009264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009268:	4299      	cmp	r1, r3
 800926a:	d002      	beq.n	8009272 <__swsetup_r+0x66>
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff fb75 	bl	800895c <_free_r>
 8009272:	2300      	movs	r3, #0
 8009274:	6363      	str	r3, [r4, #52]	; 0x34
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800927c:	81a3      	strh	r3, [r4, #12]
 800927e:	2300      	movs	r3, #0
 8009280:	6063      	str	r3, [r4, #4]
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f043 0308 	orr.w	r3, r3, #8
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	b94b      	cbnz	r3, 80092a6 <__swsetup_r+0x9a>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800929c:	d003      	beq.n	80092a6 <__swsetup_r+0x9a>
 800929e:	4621      	mov	r1, r4
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 fa07 	bl	80096b4 <__smakebuf_r>
 80092a6:	89a0      	ldrh	r0, [r4, #12]
 80092a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092ac:	f010 0301 	ands.w	r3, r0, #1
 80092b0:	d00a      	beq.n	80092c8 <__swsetup_r+0xbc>
 80092b2:	2300      	movs	r3, #0
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	6963      	ldr	r3, [r4, #20]
 80092b8:	425b      	negs	r3, r3
 80092ba:	61a3      	str	r3, [r4, #24]
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	b943      	cbnz	r3, 80092d2 <__swsetup_r+0xc6>
 80092c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092c4:	d1ba      	bne.n	800923c <__swsetup_r+0x30>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	0781      	lsls	r1, r0, #30
 80092ca:	bf58      	it	pl
 80092cc:	6963      	ldrpl	r3, [r4, #20]
 80092ce:	60a3      	str	r3, [r4, #8]
 80092d0:	e7f4      	b.n	80092bc <__swsetup_r+0xb0>
 80092d2:	2000      	movs	r0, #0
 80092d4:	e7f7      	b.n	80092c6 <__swsetup_r+0xba>
 80092d6:	bf00      	nop
 80092d8:	20000014 	.word	0x20000014
 80092dc:	08009fac 	.word	0x08009fac
 80092e0:	08009fcc 	.word	0x08009fcc
 80092e4:	08009f8c 	.word	0x08009f8c

080092e8 <abort>:
 80092e8:	2006      	movs	r0, #6
 80092ea:	b508      	push	{r3, lr}
 80092ec:	f000 fa52 	bl	8009794 <raise>
 80092f0:	2001      	movs	r0, #1
 80092f2:	f7f9 fbb6 	bl	8002a62 <_exit>
	...

080092f8 <__sflush_r>:
 80092f8:	898a      	ldrh	r2, [r1, #12]
 80092fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fe:	4605      	mov	r5, r0
 8009300:	0710      	lsls	r0, r2, #28
 8009302:	460c      	mov	r4, r1
 8009304:	d458      	bmi.n	80093b8 <__sflush_r+0xc0>
 8009306:	684b      	ldr	r3, [r1, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	dc05      	bgt.n	8009318 <__sflush_r+0x20>
 800930c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	dc02      	bgt.n	8009318 <__sflush_r+0x20>
 8009312:	2000      	movs	r0, #0
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800931a:	2e00      	cmp	r6, #0
 800931c:	d0f9      	beq.n	8009312 <__sflush_r+0x1a>
 800931e:	2300      	movs	r3, #0
 8009320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009324:	682f      	ldr	r7, [r5, #0]
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	d032      	beq.n	8009390 <__sflush_r+0x98>
 800932a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	075a      	lsls	r2, r3, #29
 8009330:	d505      	bpl.n	800933e <__sflush_r+0x46>
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	1ac0      	subs	r0, r0, r3
 8009336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009338:	b10b      	cbz	r3, 800933e <__sflush_r+0x46>
 800933a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800933c:	1ac0      	subs	r0, r0, r3
 800933e:	2300      	movs	r3, #0
 8009340:	4602      	mov	r2, r0
 8009342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009344:	4628      	mov	r0, r5
 8009346:	6a21      	ldr	r1, [r4, #32]
 8009348:	47b0      	blx	r6
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	d106      	bne.n	800935e <__sflush_r+0x66>
 8009350:	6829      	ldr	r1, [r5, #0]
 8009352:	291d      	cmp	r1, #29
 8009354:	d82c      	bhi.n	80093b0 <__sflush_r+0xb8>
 8009356:	4a2a      	ldr	r2, [pc, #168]	; (8009400 <__sflush_r+0x108>)
 8009358:	40ca      	lsrs	r2, r1
 800935a:	07d6      	lsls	r6, r2, #31
 800935c:	d528      	bpl.n	80093b0 <__sflush_r+0xb8>
 800935e:	2200      	movs	r2, #0
 8009360:	6062      	str	r2, [r4, #4]
 8009362:	6922      	ldr	r2, [r4, #16]
 8009364:	04d9      	lsls	r1, r3, #19
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	d504      	bpl.n	8009374 <__sflush_r+0x7c>
 800936a:	1c42      	adds	r2, r0, #1
 800936c:	d101      	bne.n	8009372 <__sflush_r+0x7a>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b903      	cbnz	r3, 8009374 <__sflush_r+0x7c>
 8009372:	6560      	str	r0, [r4, #84]	; 0x54
 8009374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009376:	602f      	str	r7, [r5, #0]
 8009378:	2900      	cmp	r1, #0
 800937a:	d0ca      	beq.n	8009312 <__sflush_r+0x1a>
 800937c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009380:	4299      	cmp	r1, r3
 8009382:	d002      	beq.n	800938a <__sflush_r+0x92>
 8009384:	4628      	mov	r0, r5
 8009386:	f7ff fae9 	bl	800895c <_free_r>
 800938a:	2000      	movs	r0, #0
 800938c:	6360      	str	r0, [r4, #52]	; 0x34
 800938e:	e7c1      	b.n	8009314 <__sflush_r+0x1c>
 8009390:	6a21      	ldr	r1, [r4, #32]
 8009392:	2301      	movs	r3, #1
 8009394:	4628      	mov	r0, r5
 8009396:	47b0      	blx	r6
 8009398:	1c41      	adds	r1, r0, #1
 800939a:	d1c7      	bne.n	800932c <__sflush_r+0x34>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0c4      	beq.n	800932c <__sflush_r+0x34>
 80093a2:	2b1d      	cmp	r3, #29
 80093a4:	d001      	beq.n	80093aa <__sflush_r+0xb2>
 80093a6:	2b16      	cmp	r3, #22
 80093a8:	d101      	bne.n	80093ae <__sflush_r+0xb6>
 80093aa:	602f      	str	r7, [r5, #0]
 80093ac:	e7b1      	b.n	8009312 <__sflush_r+0x1a>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	e7ad      	b.n	8009314 <__sflush_r+0x1c>
 80093b8:	690f      	ldr	r7, [r1, #16]
 80093ba:	2f00      	cmp	r7, #0
 80093bc:	d0a9      	beq.n	8009312 <__sflush_r+0x1a>
 80093be:	0793      	lsls	r3, r2, #30
 80093c0:	bf18      	it	ne
 80093c2:	2300      	movne	r3, #0
 80093c4:	680e      	ldr	r6, [r1, #0]
 80093c6:	bf08      	it	eq
 80093c8:	694b      	ldreq	r3, [r1, #20]
 80093ca:	eba6 0807 	sub.w	r8, r6, r7
 80093ce:	600f      	str	r7, [r1, #0]
 80093d0:	608b      	str	r3, [r1, #8]
 80093d2:	f1b8 0f00 	cmp.w	r8, #0
 80093d6:	dd9c      	ble.n	8009312 <__sflush_r+0x1a>
 80093d8:	4643      	mov	r3, r8
 80093da:	463a      	mov	r2, r7
 80093dc:	4628      	mov	r0, r5
 80093de:	6a21      	ldr	r1, [r4, #32]
 80093e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093e2:	47b0      	blx	r6
 80093e4:	2800      	cmp	r0, #0
 80093e6:	dc06      	bgt.n	80093f6 <__sflush_r+0xfe>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f04f 30ff 	mov.w	r0, #4294967295
 80093ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	e78e      	b.n	8009314 <__sflush_r+0x1c>
 80093f6:	4407      	add	r7, r0
 80093f8:	eba8 0800 	sub.w	r8, r8, r0
 80093fc:	e7e9      	b.n	80093d2 <__sflush_r+0xda>
 80093fe:	bf00      	nop
 8009400:	20400001 	.word	0x20400001

08009404 <_fflush_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	690b      	ldr	r3, [r1, #16]
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b913      	cbnz	r3, 8009414 <_fflush_r+0x10>
 800940e:	2500      	movs	r5, #0
 8009410:	4628      	mov	r0, r5
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	b118      	cbz	r0, 800941e <_fflush_r+0x1a>
 8009416:	6983      	ldr	r3, [r0, #24]
 8009418:	b90b      	cbnz	r3, 800941e <_fflush_r+0x1a>
 800941a:	f000 f887 	bl	800952c <__sinit>
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <_fflush_r+0x6c>)
 8009420:	429c      	cmp	r4, r3
 8009422:	d11b      	bne.n	800945c <_fflush_r+0x58>
 8009424:	686c      	ldr	r4, [r5, #4]
 8009426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0ef      	beq.n	800940e <_fflush_r+0xa>
 800942e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009430:	07d0      	lsls	r0, r2, #31
 8009432:	d404      	bmi.n	800943e <_fflush_r+0x3a>
 8009434:	0599      	lsls	r1, r3, #22
 8009436:	d402      	bmi.n	800943e <_fflush_r+0x3a>
 8009438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800943a:	f000 f915 	bl	8009668 <__retarget_lock_acquire_recursive>
 800943e:	4628      	mov	r0, r5
 8009440:	4621      	mov	r1, r4
 8009442:	f7ff ff59 	bl	80092f8 <__sflush_r>
 8009446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009448:	4605      	mov	r5, r0
 800944a:	07da      	lsls	r2, r3, #31
 800944c:	d4e0      	bmi.n	8009410 <_fflush_r+0xc>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	059b      	lsls	r3, r3, #22
 8009452:	d4dd      	bmi.n	8009410 <_fflush_r+0xc>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f000 f908 	bl	800966a <__retarget_lock_release_recursive>
 800945a:	e7d9      	b.n	8009410 <_fflush_r+0xc>
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <_fflush_r+0x70>)
 800945e:	429c      	cmp	r4, r3
 8009460:	d101      	bne.n	8009466 <_fflush_r+0x62>
 8009462:	68ac      	ldr	r4, [r5, #8]
 8009464:	e7df      	b.n	8009426 <_fflush_r+0x22>
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <_fflush_r+0x74>)
 8009468:	429c      	cmp	r4, r3
 800946a:	bf08      	it	eq
 800946c:	68ec      	ldreq	r4, [r5, #12]
 800946e:	e7da      	b.n	8009426 <_fflush_r+0x22>
 8009470:	08009fac 	.word	0x08009fac
 8009474:	08009fcc 	.word	0x08009fcc
 8009478:	08009f8c 	.word	0x08009f8c

0800947c <std>:
 800947c:	2300      	movs	r3, #0
 800947e:	b510      	push	{r4, lr}
 8009480:	4604      	mov	r4, r0
 8009482:	e9c0 3300 	strd	r3, r3, [r0]
 8009486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800948a:	6083      	str	r3, [r0, #8]
 800948c:	8181      	strh	r1, [r0, #12]
 800948e:	6643      	str	r3, [r0, #100]	; 0x64
 8009490:	81c2      	strh	r2, [r0, #14]
 8009492:	6183      	str	r3, [r0, #24]
 8009494:	4619      	mov	r1, r3
 8009496:	2208      	movs	r2, #8
 8009498:	305c      	adds	r0, #92	; 0x5c
 800949a:	f7fd fba3 	bl	8006be4 <memset>
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <std+0x38>)
 80094a0:	6224      	str	r4, [r4, #32]
 80094a2:	6263      	str	r3, [r4, #36]	; 0x24
 80094a4:	4b04      	ldr	r3, [pc, #16]	; (80094b8 <std+0x3c>)
 80094a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80094a8:	4b04      	ldr	r3, [pc, #16]	; (80094bc <std+0x40>)
 80094aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094ac:	4b04      	ldr	r3, [pc, #16]	; (80094c0 <std+0x44>)
 80094ae:	6323      	str	r3, [r4, #48]	; 0x30
 80094b0:	bd10      	pop	{r4, pc}
 80094b2:	bf00      	nop
 80094b4:	080097cd 	.word	0x080097cd
 80094b8:	080097ef 	.word	0x080097ef
 80094bc:	08009827 	.word	0x08009827
 80094c0:	0800984b 	.word	0x0800984b

080094c4 <_cleanup_r>:
 80094c4:	4901      	ldr	r1, [pc, #4]	; (80094cc <_cleanup_r+0x8>)
 80094c6:	f000 b8af 	b.w	8009628 <_fwalk_reent>
 80094ca:	bf00      	nop
 80094cc:	08009405 	.word	0x08009405

080094d0 <__sfmoreglue>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	2568      	movs	r5, #104	; 0x68
 80094d4:	1e4a      	subs	r2, r1, #1
 80094d6:	4355      	muls	r5, r2
 80094d8:	460e      	mov	r6, r1
 80094da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094de:	f7ff fa89 	bl	80089f4 <_malloc_r>
 80094e2:	4604      	mov	r4, r0
 80094e4:	b140      	cbz	r0, 80094f8 <__sfmoreglue+0x28>
 80094e6:	2100      	movs	r1, #0
 80094e8:	e9c0 1600 	strd	r1, r6, [r0]
 80094ec:	300c      	adds	r0, #12
 80094ee:	60a0      	str	r0, [r4, #8]
 80094f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094f4:	f7fd fb76 	bl	8006be4 <memset>
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd70      	pop	{r4, r5, r6, pc}

080094fc <__sfp_lock_acquire>:
 80094fc:	4801      	ldr	r0, [pc, #4]	; (8009504 <__sfp_lock_acquire+0x8>)
 80094fe:	f000 b8b3 	b.w	8009668 <__retarget_lock_acquire_recursive>
 8009502:	bf00      	nop
 8009504:	20002874 	.word	0x20002874

08009508 <__sfp_lock_release>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__sfp_lock_release+0x8>)
 800950a:	f000 b8ae 	b.w	800966a <__retarget_lock_release_recursive>
 800950e:	bf00      	nop
 8009510:	20002874 	.word	0x20002874

08009514 <__sinit_lock_acquire>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__sinit_lock_acquire+0x8>)
 8009516:	f000 b8a7 	b.w	8009668 <__retarget_lock_acquire_recursive>
 800951a:	bf00      	nop
 800951c:	2000286f 	.word	0x2000286f

08009520 <__sinit_lock_release>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__sinit_lock_release+0x8>)
 8009522:	f000 b8a2 	b.w	800966a <__retarget_lock_release_recursive>
 8009526:	bf00      	nop
 8009528:	2000286f 	.word	0x2000286f

0800952c <__sinit>:
 800952c:	b510      	push	{r4, lr}
 800952e:	4604      	mov	r4, r0
 8009530:	f7ff fff0 	bl	8009514 <__sinit_lock_acquire>
 8009534:	69a3      	ldr	r3, [r4, #24]
 8009536:	b11b      	cbz	r3, 8009540 <__sinit+0x14>
 8009538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800953c:	f7ff bff0 	b.w	8009520 <__sinit_lock_release>
 8009540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009544:	6523      	str	r3, [r4, #80]	; 0x50
 8009546:	4b13      	ldr	r3, [pc, #76]	; (8009594 <__sinit+0x68>)
 8009548:	4a13      	ldr	r2, [pc, #76]	; (8009598 <__sinit+0x6c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	62a2      	str	r2, [r4, #40]	; 0x28
 800954e:	42a3      	cmp	r3, r4
 8009550:	bf08      	it	eq
 8009552:	2301      	moveq	r3, #1
 8009554:	4620      	mov	r0, r4
 8009556:	bf08      	it	eq
 8009558:	61a3      	streq	r3, [r4, #24]
 800955a:	f000 f81f 	bl	800959c <__sfp>
 800955e:	6060      	str	r0, [r4, #4]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 f81b 	bl	800959c <__sfp>
 8009566:	60a0      	str	r0, [r4, #8]
 8009568:	4620      	mov	r0, r4
 800956a:	f000 f817 	bl	800959c <__sfp>
 800956e:	2200      	movs	r2, #0
 8009570:	2104      	movs	r1, #4
 8009572:	60e0      	str	r0, [r4, #12]
 8009574:	6860      	ldr	r0, [r4, #4]
 8009576:	f7ff ff81 	bl	800947c <std>
 800957a:	2201      	movs	r2, #1
 800957c:	2109      	movs	r1, #9
 800957e:	68a0      	ldr	r0, [r4, #8]
 8009580:	f7ff ff7c 	bl	800947c <std>
 8009584:	2202      	movs	r2, #2
 8009586:	2112      	movs	r1, #18
 8009588:	68e0      	ldr	r0, [r4, #12]
 800958a:	f7ff ff77 	bl	800947c <std>
 800958e:	2301      	movs	r3, #1
 8009590:	61a3      	str	r3, [r4, #24]
 8009592:	e7d1      	b.n	8009538 <__sinit+0xc>
 8009594:	08009c0c 	.word	0x08009c0c
 8009598:	080094c5 	.word	0x080094c5

0800959c <__sfp>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	4607      	mov	r7, r0
 80095a0:	f7ff ffac 	bl	80094fc <__sfp_lock_acquire>
 80095a4:	4b1e      	ldr	r3, [pc, #120]	; (8009620 <__sfp+0x84>)
 80095a6:	681e      	ldr	r6, [r3, #0]
 80095a8:	69b3      	ldr	r3, [r6, #24]
 80095aa:	b913      	cbnz	r3, 80095b2 <__sfp+0x16>
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff ffbd 	bl	800952c <__sinit>
 80095b2:	3648      	adds	r6, #72	; 0x48
 80095b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	d503      	bpl.n	80095c4 <__sfp+0x28>
 80095bc:	6833      	ldr	r3, [r6, #0]
 80095be:	b30b      	cbz	r3, 8009604 <__sfp+0x68>
 80095c0:	6836      	ldr	r6, [r6, #0]
 80095c2:	e7f7      	b.n	80095b4 <__sfp+0x18>
 80095c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095c8:	b9d5      	cbnz	r5, 8009600 <__sfp+0x64>
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <__sfp+0x88>)
 80095cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095d0:	60e3      	str	r3, [r4, #12]
 80095d2:	6665      	str	r5, [r4, #100]	; 0x64
 80095d4:	f000 f847 	bl	8009666 <__retarget_lock_init_recursive>
 80095d8:	f7ff ff96 	bl	8009508 <__sfp_lock_release>
 80095dc:	2208      	movs	r2, #8
 80095de:	4629      	mov	r1, r5
 80095e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095e8:	6025      	str	r5, [r4, #0]
 80095ea:	61a5      	str	r5, [r4, #24]
 80095ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095f0:	f7fd faf8 	bl	8006be4 <memset>
 80095f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095fc:	4620      	mov	r0, r4
 80095fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009600:	3468      	adds	r4, #104	; 0x68
 8009602:	e7d9      	b.n	80095b8 <__sfp+0x1c>
 8009604:	2104      	movs	r1, #4
 8009606:	4638      	mov	r0, r7
 8009608:	f7ff ff62 	bl	80094d0 <__sfmoreglue>
 800960c:	4604      	mov	r4, r0
 800960e:	6030      	str	r0, [r6, #0]
 8009610:	2800      	cmp	r0, #0
 8009612:	d1d5      	bne.n	80095c0 <__sfp+0x24>
 8009614:	f7ff ff78 	bl	8009508 <__sfp_lock_release>
 8009618:	230c      	movs	r3, #12
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	e7ee      	b.n	80095fc <__sfp+0x60>
 800961e:	bf00      	nop
 8009620:	08009c0c 	.word	0x08009c0c
 8009624:	ffff0001 	.word	0xffff0001

08009628 <_fwalk_reent>:
 8009628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800962c:	4606      	mov	r6, r0
 800962e:	4688      	mov	r8, r1
 8009630:	2700      	movs	r7, #0
 8009632:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800963a:	f1b9 0901 	subs.w	r9, r9, #1
 800963e:	d505      	bpl.n	800964c <_fwalk_reent+0x24>
 8009640:	6824      	ldr	r4, [r4, #0]
 8009642:	2c00      	cmp	r4, #0
 8009644:	d1f7      	bne.n	8009636 <_fwalk_reent+0xe>
 8009646:	4638      	mov	r0, r7
 8009648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964c:	89ab      	ldrh	r3, [r5, #12]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d907      	bls.n	8009662 <_fwalk_reent+0x3a>
 8009652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009656:	3301      	adds	r3, #1
 8009658:	d003      	beq.n	8009662 <_fwalk_reent+0x3a>
 800965a:	4629      	mov	r1, r5
 800965c:	4630      	mov	r0, r6
 800965e:	47c0      	blx	r8
 8009660:	4307      	orrs	r7, r0
 8009662:	3568      	adds	r5, #104	; 0x68
 8009664:	e7e9      	b.n	800963a <_fwalk_reent+0x12>

08009666 <__retarget_lock_init_recursive>:
 8009666:	4770      	bx	lr

08009668 <__retarget_lock_acquire_recursive>:
 8009668:	4770      	bx	lr

0800966a <__retarget_lock_release_recursive>:
 800966a:	4770      	bx	lr

0800966c <__swhatbuf_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	460e      	mov	r6, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	4614      	mov	r4, r2
 8009676:	2900      	cmp	r1, #0
 8009678:	461d      	mov	r5, r3
 800967a:	b096      	sub	sp, #88	; 0x58
 800967c:	da07      	bge.n	800968e <__swhatbuf_r+0x22>
 800967e:	2300      	movs	r3, #0
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	89b3      	ldrh	r3, [r6, #12]
 8009684:	061a      	lsls	r2, r3, #24
 8009686:	d410      	bmi.n	80096aa <__swhatbuf_r+0x3e>
 8009688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800968c:	e00e      	b.n	80096ac <__swhatbuf_r+0x40>
 800968e:	466a      	mov	r2, sp
 8009690:	f000 f902 	bl	8009898 <_fstat_r>
 8009694:	2800      	cmp	r0, #0
 8009696:	dbf2      	blt.n	800967e <__swhatbuf_r+0x12>
 8009698:	9a01      	ldr	r2, [sp, #4]
 800969a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800969e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096a2:	425a      	negs	r2, r3
 80096a4:	415a      	adcs	r2, r3
 80096a6:	602a      	str	r2, [r5, #0]
 80096a8:	e7ee      	b.n	8009688 <__swhatbuf_r+0x1c>
 80096aa:	2340      	movs	r3, #64	; 0x40
 80096ac:	2000      	movs	r0, #0
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	b016      	add	sp, #88	; 0x58
 80096b2:	bd70      	pop	{r4, r5, r6, pc}

080096b4 <__smakebuf_r>:
 80096b4:	898b      	ldrh	r3, [r1, #12]
 80096b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096b8:	079d      	lsls	r5, r3, #30
 80096ba:	4606      	mov	r6, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	d507      	bpl.n	80096d0 <__smakebuf_r+0x1c>
 80096c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	2301      	movs	r3, #1
 80096ca:	6163      	str	r3, [r4, #20]
 80096cc:	b002      	add	sp, #8
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	466a      	mov	r2, sp
 80096d2:	ab01      	add	r3, sp, #4
 80096d4:	f7ff ffca 	bl	800966c <__swhatbuf_r>
 80096d8:	9900      	ldr	r1, [sp, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff f989 	bl	80089f4 <_malloc_r>
 80096e2:	b948      	cbnz	r0, 80096f8 <__smakebuf_r+0x44>
 80096e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e8:	059a      	lsls	r2, r3, #22
 80096ea:	d4ef      	bmi.n	80096cc <__smakebuf_r+0x18>
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	f043 0302 	orr.w	r3, r3, #2
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	e7e3      	b.n	80096c0 <__smakebuf_r+0xc>
 80096f8:	4b0d      	ldr	r3, [pc, #52]	; (8009730 <__smakebuf_r+0x7c>)
 80096fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	6020      	str	r0, [r4, #0]
 8009700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009704:	81a3      	strh	r3, [r4, #12]
 8009706:	9b00      	ldr	r3, [sp, #0]
 8009708:	6120      	str	r0, [r4, #16]
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	9b01      	ldr	r3, [sp, #4]
 800970e:	b15b      	cbz	r3, 8009728 <__smakebuf_r+0x74>
 8009710:	4630      	mov	r0, r6
 8009712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009716:	f000 f8d1 	bl	80098bc <_isatty_r>
 800971a:	b128      	cbz	r0, 8009728 <__smakebuf_r+0x74>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	89a0      	ldrh	r0, [r4, #12]
 800972a:	4305      	orrs	r5, r0
 800972c:	81a5      	strh	r5, [r4, #12]
 800972e:	e7cd      	b.n	80096cc <__smakebuf_r+0x18>
 8009730:	080094c5 	.word	0x080094c5

08009734 <_malloc_usable_size_r>:
 8009734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009738:	1f18      	subs	r0, r3, #4
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfbc      	itt	lt
 800973e:	580b      	ldrlt	r3, [r1, r0]
 8009740:	18c0      	addlt	r0, r0, r3
 8009742:	4770      	bx	lr

08009744 <_raise_r>:
 8009744:	291f      	cmp	r1, #31
 8009746:	b538      	push	{r3, r4, r5, lr}
 8009748:	4604      	mov	r4, r0
 800974a:	460d      	mov	r5, r1
 800974c:	d904      	bls.n	8009758 <_raise_r+0x14>
 800974e:	2316      	movs	r3, #22
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	f04f 30ff 	mov.w	r0, #4294967295
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800975a:	b112      	cbz	r2, 8009762 <_raise_r+0x1e>
 800975c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009760:	b94b      	cbnz	r3, 8009776 <_raise_r+0x32>
 8009762:	4620      	mov	r0, r4
 8009764:	f000 f830 	bl	80097c8 <_getpid_r>
 8009768:	462a      	mov	r2, r5
 800976a:	4601      	mov	r1, r0
 800976c:	4620      	mov	r0, r4
 800976e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009772:	f000 b817 	b.w	80097a4 <_kill_r>
 8009776:	2b01      	cmp	r3, #1
 8009778:	d00a      	beq.n	8009790 <_raise_r+0x4c>
 800977a:	1c59      	adds	r1, r3, #1
 800977c:	d103      	bne.n	8009786 <_raise_r+0x42>
 800977e:	2316      	movs	r3, #22
 8009780:	6003      	str	r3, [r0, #0]
 8009782:	2001      	movs	r0, #1
 8009784:	e7e7      	b.n	8009756 <_raise_r+0x12>
 8009786:	2400      	movs	r4, #0
 8009788:	4628      	mov	r0, r5
 800978a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800978e:	4798      	blx	r3
 8009790:	2000      	movs	r0, #0
 8009792:	e7e0      	b.n	8009756 <_raise_r+0x12>

08009794 <raise>:
 8009794:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <raise+0xc>)
 8009796:	4601      	mov	r1, r0
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	f7ff bfd3 	b.w	8009744 <_raise_r>
 800979e:	bf00      	nop
 80097a0:	20000014 	.word	0x20000014

080097a4 <_kill_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	2300      	movs	r3, #0
 80097a8:	4d06      	ldr	r5, [pc, #24]	; (80097c4 <_kill_r+0x20>)
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	4611      	mov	r1, r2
 80097b0:	602b      	str	r3, [r5, #0]
 80097b2:	f7f9 f946 	bl	8002a42 <_kill>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d102      	bne.n	80097c0 <_kill_r+0x1c>
 80097ba:	682b      	ldr	r3, [r5, #0]
 80097bc:	b103      	cbz	r3, 80097c0 <_kill_r+0x1c>
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	bd38      	pop	{r3, r4, r5, pc}
 80097c2:	bf00      	nop
 80097c4:	20002868 	.word	0x20002868

080097c8 <_getpid_r>:
 80097c8:	f7f9 b934 	b.w	8002a34 <_getpid>

080097cc <__sread>:
 80097cc:	b510      	push	{r4, lr}
 80097ce:	460c      	mov	r4, r1
 80097d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d4:	f000 f894 	bl	8009900 <_read_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	bfab      	itete	ge
 80097dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097de:	89a3      	ldrhlt	r3, [r4, #12]
 80097e0:	181b      	addge	r3, r3, r0
 80097e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097e6:	bfac      	ite	ge
 80097e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097ea:	81a3      	strhlt	r3, [r4, #12]
 80097ec:	bd10      	pop	{r4, pc}

080097ee <__swrite>:
 80097ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	461f      	mov	r7, r3
 80097f4:	898b      	ldrh	r3, [r1, #12]
 80097f6:	4605      	mov	r5, r0
 80097f8:	05db      	lsls	r3, r3, #23
 80097fa:	460c      	mov	r4, r1
 80097fc:	4616      	mov	r6, r2
 80097fe:	d505      	bpl.n	800980c <__swrite+0x1e>
 8009800:	2302      	movs	r3, #2
 8009802:	2200      	movs	r2, #0
 8009804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009808:	f000 f868 	bl	80098dc <_lseek_r>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	4632      	mov	r2, r6
 8009810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	4628      	mov	r0, r5
 8009818:	463b      	mov	r3, r7
 800981a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800981e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009822:	f000 b817 	b.w	8009854 <_write_r>

08009826 <__sseek>:
 8009826:	b510      	push	{r4, lr}
 8009828:	460c      	mov	r4, r1
 800982a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982e:	f000 f855 	bl	80098dc <_lseek_r>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	bf15      	itete	ne
 8009838:	6560      	strne	r0, [r4, #84]	; 0x54
 800983a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800983e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009842:	81a3      	strheq	r3, [r4, #12]
 8009844:	bf18      	it	ne
 8009846:	81a3      	strhne	r3, [r4, #12]
 8009848:	bd10      	pop	{r4, pc}

0800984a <__sclose>:
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 b813 	b.w	8009878 <_close_r>
	...

08009854 <_write_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	4611      	mov	r1, r2
 800985c:	2200      	movs	r2, #0
 800985e:	4d05      	ldr	r5, [pc, #20]	; (8009874 <_write_r+0x20>)
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f9 f924 	bl	8002ab0 <_write>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_write_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_write_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20002868 	.word	0x20002868

08009878 <_close_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	2300      	movs	r3, #0
 800987c:	4d05      	ldr	r5, [pc, #20]	; (8009894 <_close_r+0x1c>)
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f9 f930 	bl	8002ae8 <_close>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_close_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_close_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	20002868 	.word	0x20002868

08009898 <_fstat_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	2300      	movs	r3, #0
 800989c:	4d06      	ldr	r5, [pc, #24]	; (80098b8 <_fstat_r+0x20>)
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	4611      	mov	r1, r2
 80098a4:	602b      	str	r3, [r5, #0]
 80098a6:	f7f9 f92a 	bl	8002afe <_fstat>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	d102      	bne.n	80098b4 <_fstat_r+0x1c>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	b103      	cbz	r3, 80098b4 <_fstat_r+0x1c>
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	20002868 	.word	0x20002868

080098bc <_isatty_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	2300      	movs	r3, #0
 80098c0:	4d05      	ldr	r5, [pc, #20]	; (80098d8 <_isatty_r+0x1c>)
 80098c2:	4604      	mov	r4, r0
 80098c4:	4608      	mov	r0, r1
 80098c6:	602b      	str	r3, [r5, #0]
 80098c8:	f7f9 f928 	bl	8002b1c <_isatty>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d102      	bne.n	80098d6 <_isatty_r+0x1a>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	b103      	cbz	r3, 80098d6 <_isatty_r+0x1a>
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	20002868 	.word	0x20002868

080098dc <_lseek_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	2200      	movs	r2, #0
 80098e6:	4d05      	ldr	r5, [pc, #20]	; (80098fc <_lseek_r+0x20>)
 80098e8:	602a      	str	r2, [r5, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f7f9 f920 	bl	8002b30 <_lseek>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_lseek_r+0x1e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_lseek_r+0x1e>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20002868 	.word	0x20002868

08009900 <_read_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	4611      	mov	r1, r2
 8009908:	2200      	movs	r2, #0
 800990a:	4d05      	ldr	r5, [pc, #20]	; (8009920 <_read_r+0x20>)
 800990c:	602a      	str	r2, [r5, #0]
 800990e:	461a      	mov	r2, r3
 8009910:	f7f9 f8b1 	bl	8002a76 <_read>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d102      	bne.n	800991e <_read_r+0x1e>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	b103      	cbz	r3, 800991e <_read_r+0x1e>
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	bd38      	pop	{r3, r4, r5, pc}
 8009920:	20002868 	.word	0x20002868

08009924 <_init>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	bf00      	nop
 8009928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992a:	bc08      	pop	{r3}
 800992c:	469e      	mov	lr, r3
 800992e:	4770      	bx	lr

08009930 <_fini>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr
