
Elevador_MORBI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  080092d8  080092d8  000192d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b4  080099b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080099b4  080099b4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099b4  080099b4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002494  200001e4  08009ba0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002678  08009ba0  00022678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6a9  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5b  00000000  00000000  0003c8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00040418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  000415b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c50f  00000000  00000000  000425a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001351e  00000000  00000000  0005eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000954aa  00000000  00000000  00071fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000569c  00000000  00000000  001074cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080092bc 	.word	0x080092bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080092bc 	.word	0x080092bc

08000150 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 8000150:	b672      	cpsid	i
        BX      LR
 8000152:	4770      	bx	lr

08000154 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000154:	b662      	cpsie	i
        BX      LR
 8000156:	4770      	bx	lr

08000158 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000158:	b672      	cpsid	i
        PUSH   {R1}
 800015a:	b402      	push	{r1}
        MRS     R1, BASEPRI
 800015c:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 8000160:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000164:	f3bf 8f4f 	dsb	sy
        ISB
 8000168:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 800016c:	4608      	mov	r0, r1
        POP    {R1}
 800016e:	bc02      	pop	{r1}
        CPSIE   I
 8000170:	b662      	cpsie	i
        BX      LR
 8000172:	4770      	bx	lr

08000174 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000174:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000176:	f380 8811 	msr	BASEPRI, r0
        DSB
 800017a:	f3bf 8f4f 	dsb	sy
        ISB
 800017e:	f3bf 8f6f 	isb	sy
        CPSIE   I
 8000182:	b662      	cpsie	i
        BX      LR
 8000184:	4770      	bx	lr

08000186 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000186:	bf30      	wfi
        BX      LR
 8000188:	4770      	bx	lr

0800018a <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 800018a:	bf20      	wfe
        BX      LR
 800018c:	4770      	bx	lr

0800018e <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800018e:	fab0 f080 	clz	r0, r0
        BX      LR
 8000192:	4770      	bx	lr

08000194 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000194:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000198:	fab0 f080 	clz	r0, r0
        BX      LR
 800019c:	4770      	bx	lr

0800019e <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800019e:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 80001a2:	4770      	bx	lr

080001a4 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001a4:	b672      	cpsid	i
    PUSH   {R1}
 80001a6:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001a8:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001ac:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001b0:	f3bf 8f4f 	dsb	sy
    ISB
 80001b4:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001b8:	4608      	mov	r0, r1
    POP    {R1}
 80001ba:	bc02      	pop	{r1}
    CPSIE   I
 80001bc:	b662      	cpsie	i
    BX      LR
 80001be:	4770      	bx	lr

080001c0 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001c0:	b672      	cpsid	i
    MSR     BASEPRI, R0
 80001c2:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001c6:	f3bf 8f4f 	dsb	sy
    ISB
 80001ca:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80001ce:	b662      	cpsie	i
    BX      LR
 80001d0:	4770      	bx	lr

080001d2 <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001d2:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 80001d4:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001d8:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001dc:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001e0:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001e4:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001e6:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001e8:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001ec:	f640 608c 	movw	r0, #3724	; 0xe8c
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 80001f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 80001f4:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001f6:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80001fa:	f004 f949 	bl	8004490 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001fe:	4832      	ldr	r0, [pc, #200]	; (80002c8 <OS_CPU_PendSVHandler+0x6c>)
    MOVS    R1, #1
 8000200:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000202:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000204:	f241 50b4 	movw	r0, #5556	; 0x15b4
    MOVT    R0, #:upper16:OSPrioCur
 8000208:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800020c:	f241 21e2 	movw	r1, #4834	; 0x12e2
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000210:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000214:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000216:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000218:	f641 20cc 	movw	r0, #6860	; 0x1acc
    MOVT    R0, #:upper16:OSTCBCur
 800021c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 8000220:	f641 01b0 	movw	r1, #6320	; 0x18b0
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000224:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000228:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800022a:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800022c:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800022e:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000232:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000236:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800023a:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800023e:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 8000242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000246:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000248:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800024c:	bc06      	pop	{r1, r2}
    CPSIE    I
 800024e:	b662      	cpsie	i
    BX       R1
 8000250:	4708      	bx	r1

08000252 <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000252:	481e      	ldr	r0, [pc, #120]	; (80002cc <OS_CPU_PendSVHandler+0x70>)
    LDR     R1, =NVIC_PENDSVSET
 8000254:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000258:	6001      	str	r1, [r0, #0]
    BX      LR
 800025a:	4770      	bx	lr

0800025c <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800025c:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 800025e:	f640 6290 	movw	r2, #3728	; 0xe90
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 8000262:	f2c2 0200 	movt	r2, #8192	; 0x2000
    LDR     R1, [R2]
 8000266:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 8000268:	f381 8811 	msr	BASEPRI, r1
    DSB
 800026c:	f3bf 8f4f 	dsb	sy
    ISB
 8000270:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000274:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000276:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 800027a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 800027e:	f641 25cc 	movw	r5, #6860	; 0x1acc
    MOVT    R5, #:upper16:OSTCBCur
 8000282:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R1, [R5]
 8000286:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000288:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800028a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800028c:	f004 f900 	bl	8004490 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000290:	f241 50b4 	movw	r0, #5556	; 0x15b4
    MOVT    R0, #:upper16:OSPrioCur
 8000294:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000298:	f241 21e2 	movw	r1, #4834	; 0x12e2
    MOVT    R1, #:upper16:OSPrioHighRdy
 800029c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002a0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002a2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002a4:	f641 01b0 	movw	r1, #6320	; 0x18b0
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002ac:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002ae:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002b0:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002b4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ba:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 80002be:	f04f 0200 	mov.w	r2, #0
    MSR     BASEPRI, R2
 80002c2:	f382 8811 	msr	BASEPRI, r2
    BX      LR                                                  @ Exception return will restore remaining context
 80002c6:	4770      	bx	lr
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002c8:	200012d9 	.word	0x200012d9
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002cc:	e000ed04 	.word	0xe000ed04

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_f2uiz>:
 8000ca8:	0042      	lsls	r2, r0, #1
 8000caa:	d20e      	bcs.n	8000cca <__aeabi_f2uiz+0x22>
 8000cac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cb0:	d30b      	bcc.n	8000cca <__aeabi_f2uiz+0x22>
 8000cb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cba:	d409      	bmi.n	8000cd0 <__aeabi_f2uiz+0x28>
 8000cbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc8:	4770      	bx	lr
 8000cca:	f04f 0000 	mov.w	r0, #0
 8000cce:	4770      	bx	lr
 8000cd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cd4:	d101      	bne.n	8000cda <__aeabi_f2uiz+0x32>
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	d102      	bne.n	8000ce0 <__aeabi_f2uiz+0x38>
 8000cda:	f04f 30ff 	mov.w	r0, #4294967295
 8000cde:	4770      	bx	lr
 8000ce0:	f04f 0000 	mov.w	r0, #0
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af0a      	add	r7, sp, #40	; 0x28
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	817b      	strh	r3, [r7, #10]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	813b      	strh	r3, [r7, #8]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <LiquidCrystal+0x90>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d019      	beq.n	8000d3e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000d0a:	8939      	ldrh	r1, [r7, #8]
 8000d0c:	897a      	ldrh	r2, [r7, #10]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9308      	str	r3, [sp, #32]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9307      	str	r3, [sp, #28]
 8000d16:	2300      	movs	r3, #0
 8000d18:	9306      	str	r3, [sp, #24]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9305      	str	r3, [sp, #20]
 8000d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d20:	9304      	str	r3, [sp, #16]
 8000d22:	8c3b      	ldrh	r3, [r7, #32]
 8000d24:	9303      	str	r3, [sp, #12]
 8000d26:	8bbb      	ldrh	r3, [r7, #28]
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	8b3b      	ldrh	r3, [r7, #24]
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	460b      	mov	r3, r1
 8000d34:	68f9      	ldr	r1, [r7, #12]
 8000d36:	2001      	movs	r0, #1
 8000d38:	f000 f820 	bl	8000d7c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000d3c:	e018      	b.n	8000d70 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000d3e:	8939      	ldrh	r1, [r7, #8]
 8000d40:	897a      	ldrh	r2, [r7, #10]
 8000d42:	2300      	movs	r3, #0
 8000d44:	9308      	str	r3, [sp, #32]
 8000d46:	2300      	movs	r3, #0
 8000d48:	9307      	str	r3, [sp, #28]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	9306      	str	r3, [sp, #24]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9305      	str	r3, [sp, #20]
 8000d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d54:	9304      	str	r3, [sp, #16]
 8000d56:	8c3b      	ldrh	r3, [r7, #32]
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	8bbb      	ldrh	r3, [r7, #28]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	8b3b      	ldrh	r3, [r7, #24]
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	460b      	mov	r3, r1
 8000d68:	68f9      	ldr	r1, [r7, #12]
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f806 	bl	8000d7c <init>
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000

08000d7c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	4611      	mov	r1, r2
 8000d86:	461a      	mov	r2, r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	81bb      	strh	r3, [r7, #12]
 8000d90:	4613      	mov	r3, r2
 8000d92:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <init+0x84>)
 8000d96:	89bb      	ldrh	r3, [r7, #12]
 8000d98:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <init+0x88>)
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <init+0x8c>)
 8000da2:	8b3b      	ldrh	r3, [r7, #24]
 8000da4:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <init+0x90>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <init+0x94>)
 8000dae:	8bbb      	ldrh	r3, [r7, #28]
 8000db0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <init+0x94>)
 8000db4:	8c3b      	ldrh	r3, [r7, #32]
 8000db6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000db8:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <init+0x94>)
 8000dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dbc:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <init+0x94>)
 8000dc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dc2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <init+0x94>)
 8000dc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dc8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000dca:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <init+0x94>)
 8000dcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000dce:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <init+0x94>)
 8000dd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000dd4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <init+0x94>)
 8000dd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000dda:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e002      	b.n	8000df0 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <init+0x98>)
 8000dec:	2210      	movs	r2, #16
 8000dee:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000df0:	2102      	movs	r1, #2
 8000df2:	2010      	movs	r0, #16
 8000df4:	f000 f810 	bl	8000e18 <begin>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000e3c 	.word	0x20000e3c
 8000e04:	20000e1c 	.word	0x20000e1c
 8000e08:	20000e3a 	.word	0x20000e3a
 8000e0c:	20000e20 	.word	0x20000e20
 8000e10:	20000e28 	.word	0x20000e28
 8000e14:	20000e39 	.word	0x20000e39

08000e18 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d906      	bls.n	8000e3c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000e2e:	4b80      	ldr	r3, [pc, #512]	; (8001030 <begin+0x218>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <begin+0x218>)
 8000e3a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000e3c:	4a7d      	ldr	r2, [pc, #500]	; (8001034 <begin+0x21c>)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	3340      	adds	r3, #64	; 0x40
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f988 	bl	8001160 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000e50:	4b79      	ldr	r3, [pc, #484]	; (8001038 <begin+0x220>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <begin+0x54>
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d106      	bne.n	8000e6c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000e5e:	4b74      	ldr	r3, [pc, #464]	; (8001030 <begin+0x218>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b71      	ldr	r3, [pc, #452]	; (8001030 <begin+0x218>)
 8000e6a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000e6c:	f000 f8f6 	bl	800105c <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]

  if(_fourbit_mode)
 8000e78:	4b70      	ldr	r3, [pc, #448]	; (800103c <begin+0x224>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01b      	beq.n	8000eb8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000e80:	4b6f      	ldr	r3, [pc, #444]	; (8001040 <begin+0x228>)
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <begin+0x22c>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b6e      	ldr	r3, [pc, #440]	; (8001048 <begin+0x230>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <begin+0x234>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b6b      	ldr	r3, [pc, #428]	; (800104c <begin+0x234>)
 8000e9e:	885b      	ldrh	r3, [r3, #2]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <begin+0x234>)
 8000ea6:	889b      	ldrh	r3, [r3, #4]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b67      	ldr	r3, [pc, #412]	; (800104c <begin+0x234>)
 8000eae:	88db      	ldrh	r3, [r3, #6]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	e02a      	b.n	8000f0e <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000eb8:	4b61      	ldr	r3, [pc, #388]	; (8001040 <begin+0x228>)
 8000eba:	881a      	ldrh	r2, [r3, #0]
 8000ebc:	4b61      	ldr	r3, [pc, #388]	; (8001044 <begin+0x22c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b60      	ldr	r3, [pc, #384]	; (8001048 <begin+0x230>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ecc:	4b5f      	ldr	r3, [pc, #380]	; (800104c <begin+0x234>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	; (800104c <begin+0x234>)
 8000ed6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000edc:	4b5b      	ldr	r3, [pc, #364]	; (800104c <begin+0x234>)
 8000ede:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ee4:	4b59      	ldr	r3, [pc, #356]	; (800104c <begin+0x234>)
 8000ee6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <begin+0x234>)
 8000eee:	891b      	ldrh	r3, [r3, #8]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b55      	ldr	r3, [pc, #340]	; (800104c <begin+0x234>)
 8000ef6:	895b      	ldrh	r3, [r3, #10]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b53      	ldr	r3, [pc, #332]	; (800104c <begin+0x234>)
 8000efe:	899b      	ldrh	r3, [r3, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b51      	ldr	r3, [pc, #324]	; (800104c <begin+0x234>)
 8000f06:	89db      	ldrh	r3, [r3, #14]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000f0c:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(_port, &gpio_init);
 8000f0e:	4b50      	ldr	r3, [pc, #320]	; (8001050 <begin+0x238>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f107 0208 	add.w	r2, r7, #8
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fbab 	bl	8002674 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  //HAL_Delay(50);
  OSTimeDlyHMSM(0u, 0u, 0u, 50);
 8000f1e:	2332      	movs	r3, #50	; 0x32
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f004 ffe7 	bl	8005ef8 <OSTimeDlyHMSM>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <begin+0x238>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <begin+0x228>)
 8000f30:	8811      	ldrh	r1, [r2, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fd38 	bl	80029aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <begin+0x238>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <begin+0x230>)
 8000f40:	8811      	ldrh	r1, [r2, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fd30 	bl	80029aa <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <begin+0x22c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d007      	beq.n	8000f62 <begin+0x14a>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000f52:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <begin+0x238>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a3b      	ldr	r2, [pc, #236]	; (8001044 <begin+0x22c>)
 8000f58:	8811      	ldrh	r1, [r2, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fd24 	bl	80029aa <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <begin+0x218>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11e      	bne.n	8000fac <begin+0x194>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 fa4e 	bl	8001410 <write4bits>
    //HAL_Delay(5); // wait min 4.1ms
    OSTimeDlyHMSM(0u, 0u, 0u, 5);
 8000f74:	2305      	movs	r3, #5
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f004 ffbc 	bl	8005ef8 <OSTimeDlyHMSM>
    // second try
    write4bits(0x03);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 fa45 	bl	8001410 <write4bits>
    //HAL_Delay(5); // wait min 4.1ms
    OSTimeDlyHMSM(0u, 0u, 0u, 5);
 8000f86:	2305      	movs	r3, #5
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f004 ffb3 	bl	8005ef8 <OSTimeDlyHMSM>
    // third go!
    write4bits(0x03); 
 8000f92:	2003      	movs	r0, #3
 8000f94:	f000 fa3c 	bl	8001410 <write4bits>
    //HAL_Delay(1);
    OSTimeDlyHMSM(0u, 0u, 0u, 1);
 8000f98:	2301      	movs	r3, #1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f004 ffaa 	bl	8005ef8 <OSTimeDlyHMSM>
    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f000 fa33 	bl	8001410 <write4bits>
 8000faa:	e023      	b.n	8000ff4 <begin+0x1dc>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <begin+0x218>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f99d 	bl	80012f6 <command>
    //HAL_Delay(5);  // wait more than 4.1ms
    OSTimeDlyHMSM(0u, 0u, 0u, 5);
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f004 ff98 	bl	8005ef8 <OSTimeDlyHMSM>
    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <begin+0x218>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f043 0320 	orr.w	r3, r3, #32
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f98f 	bl	80012f6 <command>
    //HAL_Delay(1);
    OSTimeDlyHMSM(0u, 0u, 0u, 1);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f004 ff8a 	bl	8005ef8 <OSTimeDlyHMSM>
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <begin+0x218>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f981 	bl	80012f6 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <begin+0x218>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f979 	bl	80012f6 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <begin+0x23c>)
 8001006:	2204      	movs	r2, #4
 8001008:	701a      	strb	r2, [r3, #0]
  display();
 800100a:	f000 f907 	bl	800121c <display>

  // clear it off
  clear();
 800100e:	f000 f8c5 	bl	800119c <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <begin+0x240>)
 8001014:	2202      	movs	r2, #2
 8001016:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <begin+0x240>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f967 	bl	80012f6 <command>

}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000e39 	.word	0x20000e39
 8001034:	20000e25 	.word	0x20000e25
 8001038:	20000200 	.word	0x20000200
 800103c:	20000000 	.word	0x20000000
 8001040:	20000e3c 	.word	0x20000e3c
 8001044:	20000e1c 	.word	0x20000e1c
 8001048:	20000e3a 	.word	0x20000e3a
 800104c:	20000e28 	.word	0x20000e28
 8001050:	20000e20 	.word	0x20000e20
 8001054:	20000e24 	.word	0x20000e24
 8001058:	20000e38 	.word	0x20000e38

0800105c <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <enableClock+0xe8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a38      	ldr	r2, [pc, #224]	; (8001148 <enableClock+0xec>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d10c      	bne.n	8001086 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <enableClock+0xf0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a36      	ldr	r2, [pc, #216]	; (800114c <enableClock+0xf0>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <enableClock+0xf0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOE_CLK_ENABLE();
/*	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();*/

  // if you have a port that is not listed add it below the other else ifs
}
 8001084:	e058      	b.n	8001138 <enableClock+0xdc>
  else if(_port == GPIOB)
 8001086:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <enableClock+0xe8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a31      	ldr	r2, [pc, #196]	; (8001150 <enableClock+0xf4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d10c      	bne.n	80010aa <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <enableClock+0xf0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a2d      	ldr	r2, [pc, #180]	; (800114c <enableClock+0xf0>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <enableClock+0xf0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
}
 80010a8:	e046      	b.n	8001138 <enableClock+0xdc>
  else if(_port == GPIOB)
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <enableClock+0xe8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a28      	ldr	r2, [pc, #160]	; (8001150 <enableClock+0xf4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d10c      	bne.n	80010ce <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <enableClock+0xf0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a24      	ldr	r2, [pc, #144]	; (800114c <enableClock+0xf0>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <enableClock+0xf0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	e034      	b.n	8001138 <enableClock+0xdc>
	else if(_port == GPIOC)
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <enableClock+0xe8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a20      	ldr	r2, [pc, #128]	; (8001154 <enableClock+0xf8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d10c      	bne.n	80010f2 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <enableClock+0xf0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <enableClock+0xf0>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <enableClock+0xf0>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
}
 80010f0:	e022      	b.n	8001138 <enableClock+0xdc>
	else if(_port == GPIOD)
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <enableClock+0xe8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <enableClock+0xfc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d10c      	bne.n	8001116 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <enableClock+0xf0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <enableClock+0xf0>)
 8001102:	f043 0320 	orr.w	r3, r3, #32
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <enableClock+0xf0>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	e010      	b.n	8001138 <enableClock+0xdc>
	else if(_port == GPIOE)
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <enableClock+0xe8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <enableClock+0x100>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d10b      	bne.n	8001138 <enableClock+0xdc>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <enableClock+0xf0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <enableClock+0xf0>)
 8001126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <enableClock+0xf0>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
}
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000e20 	.word	0x20000e20
 8001148:	40010800 	.word	0x40010800
 800114c:	40021000 	.word	0x40021000
 8001150:	40010c00 	.word	0x40010c00
 8001154:	40011000 	.word	0x40011000
 8001158:	40011400 	.word	0x40011400
 800115c:	40011800 	.word	0x40011800

08001160 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <setRowOffsets+0x38>)
 8001174:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <setRowOffsets+0x38>)
 800117c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <setRowOffsets+0x38>)
 8001184:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b03      	ldr	r3, [pc, #12]	; (8001198 <setRowOffsets+0x38>)
 800118c:	70da      	strb	r2, [r3, #3]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000e18 	.word	0x20000e18

0800119c <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 f8a8 	bl	80012f6 <command>
  //HAL_Delay(2);  // this command takes a long time!
  OSTimeDlyHMSM(0u, 0u, 0u, 2);
 80011a6:	2302      	movs	r3, #2
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2000      	movs	r0, #0
 80011ae:	f004 fea3 	bl	8005ef8 <OSTimeDlyHMSM>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <setCursor>:
  //HAL_Delay(2);  // this command takes a long time!
  OSTimeDlyHMSM(0u, 0u, 0u, 2);
}

void setCursor(uint8_t col, uint8_t row)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80011c8:	2304      	movs	r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d803      	bhi.n	80011dc <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3b01      	subs	r3, #1
 80011da:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <setCursor+0x5c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	79ba      	ldrb	r2, [r7, #6]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d303      	bcc.n	80011ee <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <setCursor+0x5c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <setCursor+0x60>)
 80011f2:	5cd2      	ldrb	r2, [r2, r3]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001200:	b25b      	sxtb	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f876 	bl	80012f6 <command>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000e25 	.word	0x20000e25
 8001218:	20000e18 	.word	0x20000e18

0800121c <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <display+0x28>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <display+0x28>)
 800122c:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <display+0x28>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f85c 	bl	80012f6 <command>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000e24 	.word	0x20000e24

08001248 <noBlink>:
  _displaycontrol |= LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turn on and off the blinking cursor
void noBlink(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  _displaycontrol &= ~LCD_BLINKON;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <noBlink+0x28>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <noBlink+0x28>)
 8001258:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <noBlink+0x28>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f846 	bl	80012f6 <command>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000e24 	.word	0x20000e24

08001274 <blink>:
void blink(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_BLINKON;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <blink+0x28>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <blink+0x28>)
 8001284:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <blink+0x28>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f830 	bl	80012f6 <command>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000e24 	.word	0x20000e24

080012a0 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <print+0x12>
 80012ae:	2300      	movs	r3, #0
 80012b0:	e01d      	b.n	80012ee <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f80a 	bl	80002d0 <strlen>
 80012bc:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80012c2:	e00c      	b.n	80012de <print+0x3e>
    if (write(*buffer++)) n++;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	617a      	str	r2, [r7, #20]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f820 	bl	8001312 <write>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <print+0x4a>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	613a      	str	r2, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ed      	bne.n	80012c4 <print+0x24>
 80012e8:	e000      	b.n	80012ec <print+0x4c>
    else break;
 80012ea:	bf00      	nop
  }
  return n;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f813 	bl	8001330 <send>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <write>:

inline size_t write(uint8_t value) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f805 	bl	8001330 <send>
  return 1; // assume sucess
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <send+0x6c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <send+0x70>)
 8001346:	8811      	ldrh	r1, [r2, #0]
 8001348:	79ba      	ldrb	r2, [r7, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fb2d 	bl	80029aa <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <send+0x74>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d007      	beq.n	8001368 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <send+0x6c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <send+0x74>)
 800135e:	8811      	ldrh	r1, [r2, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fb21 	bl	80029aa <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <send+0x78>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <send+0x4e>
    write8bits(value); 
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f874 	bl	8001464 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800137c:	e009      	b.n	8001392 <send+0x62>
    write4bits(value>>4);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f843 	bl	8001410 <write4bits>
    write4bits(value);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f83f 	bl	8001410 <write4bits>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000e20 	.word	0x20000e20
 80013a0:	20000e3c 	.word	0x20000e3c
 80013a4:	20000e1c 	.word	0x20000e1c
 80013a8:	20000e39 	.word	0x20000e39

080013ac <pulseEnable>:

void pulseEnable(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <pulseEnable+0x5c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a15      	ldr	r2, [pc, #84]	; (800140c <pulseEnable+0x60>)
 80013b6:	8811      	ldrh	r1, [r2, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 faf5 	bl	80029aa <HAL_GPIO_WritePin>
  //HAL_Delay(1);
  OSTimeDlyHMSM(0u, 0u, 0u, 1);
 80013c0:	2301      	movs	r3, #1
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2000      	movs	r0, #0
 80013c8:	f004 fd96 	bl	8005ef8 <OSTimeDlyHMSM>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <pulseEnable+0x5c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <pulseEnable+0x60>)
 80013d2:	8811      	ldrh	r1, [r2, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 fae7 	bl	80029aa <HAL_GPIO_WritePin>
  //HAL_Delay(1);    // enable pulse must be >450ns
  OSTimeDlyHMSM(0u, 0u, 0u, 1);
 80013dc:	2301      	movs	r3, #1
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	f004 fd88 	bl	8005ef8 <OSTimeDlyHMSM>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <pulseEnable+0x5c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <pulseEnable+0x60>)
 80013ee:	8811      	ldrh	r1, [r2, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fad9 	bl	80029aa <HAL_GPIO_WritePin>
  //HAL_Delay(1);   // commands need > 37us to settle
  OSTimeDlyHMSM(0u, 0u, 0u, 1);
 80013f8:	2301      	movs	r3, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2000      	movs	r0, #0
 8001400:	f004 fd7a 	bl	8005ef8 <OSTimeDlyHMSM>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000e20 	.word	0x20000e20
 800140c:	20000e3a 	.word	0x20000e3a

08001410 <write4bits>:

void write4bits(uint8_t value) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e013      	b.n	8001448 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <write4bits+0x4c>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <write4bits+0x50>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	fa42 f303 	asr.w	r3, r2, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	f001 fab4 	bl	80029aa <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3301      	adds	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b03      	cmp	r3, #3
 800144c:	dde8      	ble.n	8001420 <write4bits+0x10>
  }

  pulseEnable();
 800144e:	f7ff ffad 	bl	80013ac <pulseEnable>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000e20 	.word	0x20000e20
 8001460:	20000e28 	.word	0x20000e28

08001464 <write8bits>:

void write8bits(uint8_t value) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e013      	b.n	800149c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <write8bits+0x4c>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <write8bits+0x50>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	fa42 f303 	asr.w	r3, r2, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	f001 fa8a 	bl	80029aa <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b07      	cmp	r3, #7
 80014a0:	dde8      	ble.n	8001474 <write8bits+0x10>
  }
  
  pulseEnable();
 80014a2:	f7ff ff83 	bl	80013ac <pulseEnable>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000e20 	.word	0x20000e20
 80014b4:	20000e28 	.word	0x20000e28

080014b8 <LecturaPulsadores>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void LecturaPulsadores (void *p_arg)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	menuState=ModoAut;								//Con este estado arranca el programa
 80014c0:	4ba4      	ldr	r3, [pc, #656]	; (8001754 <LecturaPulsadores+0x29c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	while(DEF_TRUE)
	{
		OSTimeDlyHMSM(0, 0, 0, 25u); 				//Tiempo de lectura: 100ms
 80014c6:	2319      	movs	r3, #25
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f004 fd13 	bl	8005ef8 <OSTimeDlyHMSM>

		/***************************PULSADOR MENU **************************************/
		if(HAL_GPIO_ReadPin(GPIOB, PULSADOR1_Pin) == GPIO_PIN_RESET && !start)
 80014d2:	2120      	movs	r1, #32
 80014d4:	48a0      	ldr	r0, [pc, #640]	; (8001758 <LecturaPulsadores+0x2a0>)
 80014d6:	f001 fa51 	bl	800297c <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11d      	bne.n	800151c <LecturaPulsadores+0x64>
 80014e0:	4b9e      	ldr	r3, [pc, #632]	; (800175c <LecturaPulsadores+0x2a4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f083 0301 	eor.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <LecturaPulsadores+0x64>
		{
			menuState++;
 80014ee:	4b99      	ldr	r3, [pc, #612]	; (8001754 <LecturaPulsadores+0x29c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b97      	ldr	r3, [pc, #604]	; (8001754 <LecturaPulsadores+0x29c>)
 80014f8:	701a      	strb	r2, [r3, #0]
			if (menuState == count)
 80014fa:	4b96      	ldr	r3, [pc, #600]	; (8001754 <LecturaPulsadores+0x29c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d102      	bne.n	8001508 <LecturaPulsadores+0x50>
			{
				menuState = ModoAut;				//El menú es circular
 8001502:	4b94      	ldr	r3, [pc, #592]	; (8001754 <LecturaPulsadores+0x29c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
			}
			OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001508:	200e      	movs	r0, #14
 800150a:	f004 fb03 	bl	8005b14 <OSTaskResume>
			OSTimeDlyHMSM(0, 0, 0, 400u);			//Delay luego de pulsarlo
 800150e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2000      	movs	r0, #0
 8001518:	f004 fcee 	bl	8005ef8 <OSTimeDlyHMSM>

		}
		/***************************PULSADOR MENU **************************************/

		/***************************PULSADOR ARRIBA ************************************/
		if(HAL_GPIO_ReadPin(GPIOB, PULSADOR2_Pin) == GPIO_PIN_RESET)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	488e      	ldr	r0, [pc, #568]	; (8001758 <LecturaPulsadores+0x2a0>)
 8001520:	f001 fa2c 	bl	800297c <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d166      	bne.n	80015f8 <LecturaPulsadores+0x140>
		{
			switch(menuState)
 800152a:	4b8a      	ldr	r3, [pc, #552]	; (8001754 <LecturaPulsadores+0x29c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d850      	bhi.n	80015d4 <LecturaPulsadores+0x11c>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <LecturaPulsadores+0x80>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015d5 	.word	0x080015d5
 800153c:	08001555 	.word	0x08001555
 8001540:	08001563 	.word	0x08001563
 8001544:	08001579 	.word	0x08001579
 8001548:	08001593 	.word	0x08001593
 800154c:	080015ad 	.word	0x080015ad
 8001550:	080015d5 	.word	0x080015d5
					  	{
					  	case ModoAut:				//Si display muestra modo automatico:
					  		break;

					  	case ModoMan:
					  		giroHorario = false;
 8001554:	4b82      	ldr	r3, [pc, #520]	; (8001760 <LecturaPulsadores+0x2a8>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
					  		giroAntiHorario = true;
 800155a:	4b82      	ldr	r3, [pc, #520]	; (8001764 <LecturaPulsadores+0x2ac>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
					  		break;
 8001560:	e038      	b.n	80015d4 <LecturaPulsadores+0x11c>


					  	case CantRejillas:			//Si display muestra cant de rejillas:

					  		if (nRejillas < 255)
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <LecturaPulsadores+0x2b0>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d02d      	beq.n	80015c6 <LecturaPulsadores+0x10e>
					  		{
					  			nRejillas ++;
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <LecturaPulsadores+0x2b0>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <LecturaPulsadores+0x2b0>)
 8001574:	701a      	strb	r2, [r3, #0]
					  		}
					  		break;
 8001576:	e026      	b.n	80015c6 <LecturaPulsadores+0x10e>

					  	case Desplazamiento:		//Si display muestra desplazamiento:
					  		if (distancia_mm < 65535)
 8001578:	4b7c      	ldr	r3, [pc, #496]	; (800176c <LecturaPulsadores+0x2b4>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	4293      	cmp	r3, r2
 8001582:	d022      	beq.n	80015ca <LecturaPulsadores+0x112>
					  		{
					  			distancia_mm ++;
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <LecturaPulsadores+0x2b4>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b77      	ldr	r3, [pc, #476]	; (800176c <LecturaPulsadores+0x2b4>)
 800158e:	801a      	strh	r2, [r3, #0]
					  		}
					  		break;
 8001590:	e01b      	b.n	80015ca <LecturaPulsadores+0x112>

					  	case VelMax:				//Si display muestra velocidad maxima:
					  		if (velMAX_RPM < 65535)
 8001592:	4b77      	ldr	r3, [pc, #476]	; (8001770 <LecturaPulsadores+0x2b8>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	4293      	cmp	r3, r2
 800159c:	d017      	beq.n	80015ce <LecturaPulsadores+0x116>
					  		{
					  			velMAX_RPM++;
 800159e:	4b74      	ldr	r3, [pc, #464]	; (8001770 <LecturaPulsadores+0x2b8>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <LecturaPulsadores+0x2b8>)
 80015a8:	801a      	strh	r2, [r3, #0]
					  		}
					  		break;
 80015aa:	e010      	b.n	80015ce <LecturaPulsadores+0x116>

					  	case VelMin:				//Si display muestra velocidad minima:
					  		if (velMIN_RPM < 65535)
 80015ac:	4b71      	ldr	r3, [pc, #452]	; (8001774 <LecturaPulsadores+0x2bc>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00c      	beq.n	80015d2 <LecturaPulsadores+0x11a>
					  		{
					  			velMIN_RPM++;
 80015b8:	4b6e      	ldr	r3, [pc, #440]	; (8001774 <LecturaPulsadores+0x2bc>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <LecturaPulsadores+0x2bc>)
 80015c2:	801a      	strh	r2, [r3, #0]
					  		}
					  		break;
 80015c4:	e005      	b.n	80015d2 <LecturaPulsadores+0x11a>
					  		break;
 80015c6:	bf00      	nop
 80015c8:	e004      	b.n	80015d4 <LecturaPulsadores+0x11c>
					  		break;
 80015ca:	bf00      	nop
 80015cc:	e002      	b.n	80015d4 <LecturaPulsadores+0x11c>
					  		break;
 80015ce:	bf00      	nop
 80015d0:	e000      	b.n	80015d4 <LecturaPulsadores+0x11c>
					  		break;
 80015d2:	bf00      	nop

					  	case count:					//Este estado no debería darse
					  		break;

					  	}
			if( menuState != ModoMan && menuState != ModoAut )
 80015d4:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <LecturaPulsadores+0x29c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d006      	beq.n	80015ea <LecturaPulsadores+0x132>
 80015dc:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <LecturaPulsadores+0x29c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <LecturaPulsadores+0x132>
				{
				OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 80015e4:	200e      	movs	r0, #14
 80015e6:	f004 fa95 	bl	8005b14 <OSTaskResume>
				}

			OSTimeDlyHMSM(0, 0, 0, 100u);				//Delay luego de pulsarlo
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2000      	movs	r0, #0
 80015f2:	f004 fc81 	bl	8005ef8 <OSTimeDlyHMSM>
 80015f6:	e073      	b.n	80016e0 <LecturaPulsadores+0x228>

		/***************************PULSADOR ABAJO ************************************/
		else
		{

			if(HAL_GPIO_ReadPin(GPIOB, PULSADOR3_Pin) == GPIO_PIN_RESET)
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	4856      	ldr	r0, [pc, #344]	; (8001758 <LecturaPulsadores+0x2a0>)
 80015fe:	f001 f9bd 	bl	800297c <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d161      	bne.n	80016cc <LecturaPulsadores+0x214>
			{
				switch(menuState)
 8001608:	4b52      	ldr	r3, [pc, #328]	; (8001754 <LecturaPulsadores+0x29c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d84b      	bhi.n	80016a8 <LecturaPulsadores+0x1f0>
 8001610:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <LecturaPulsadores+0x160>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	080016a9 	.word	0x080016a9
 800161c:	08001635 	.word	0x08001635
 8001620:	08001643 	.word	0x08001643
 8001624:	08001659 	.word	0x08001659
 8001628:	0800166f 	.word	0x0800166f
 800162c:	08001685 	.word	0x08001685
 8001630:	080016a9 	.word	0x080016a9
							{
							case ModoAut:			//Si display muestra modo automatico:
								break;

							case ModoMan:			//Si display muestra modo manual:
								giroHorario = true;
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <LecturaPulsadores+0x2a8>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
								giroAntiHorario = false;
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <LecturaPulsadores+0x2ac>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
								break;
 8001640:	e032      	b.n	80016a8 <LecturaPulsadores+0x1f0>


							case CantRejillas:		//Si display muestra cantidad de rejillas:
								if (nRejillas > 0)
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <LecturaPulsadores+0x2b0>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d027      	beq.n	800169a <LecturaPulsadores+0x1e2>
								{
									nRejillas --;
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <LecturaPulsadores+0x2b0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <LecturaPulsadores+0x2b0>)
 8001654:	701a      	strb	r2, [r3, #0]
								}
								break;
 8001656:	e020      	b.n	800169a <LecturaPulsadores+0x1e2>

							case Desplazamiento:	//Si display muestra desplazameinto:
								if (distancia_mm > 0)
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <LecturaPulsadores+0x2b4>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01e      	beq.n	800169e <LecturaPulsadores+0x1e6>
								{
									distancia_mm --;
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <LecturaPulsadores+0x2b4>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <LecturaPulsadores+0x2b4>)
 800166a:	801a      	strh	r2, [r3, #0]
								}
								break;
 800166c:	e017      	b.n	800169e <LecturaPulsadores+0x1e6>

							case VelMax:			//Si display muestra velocidad maxima:
								if (velMAX_RPM > 0)
 800166e:	4b40      	ldr	r3, [pc, #256]	; (8001770 <LecturaPulsadores+0x2b8>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d015      	beq.n	80016a2 <LecturaPulsadores+0x1ea>
								{
									velMAX_RPM--;
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <LecturaPulsadores+0x2b8>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <LecturaPulsadores+0x2b8>)
 8001680:	801a      	strh	r2, [r3, #0]
								}
								break;
 8001682:	e00e      	b.n	80016a2 <LecturaPulsadores+0x1ea>

							case VelMin:			//Si display muestra velocidad minima:
								if (velMIN_RPM > 0)
 8001684:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <LecturaPulsadores+0x2bc>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <LecturaPulsadores+0x1ee>
								{
									velMIN_RPM--;
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <LecturaPulsadores+0x2bc>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <LecturaPulsadores+0x2bc>)
 8001696:	801a      	strh	r2, [r3, #0]
								}
								break;
 8001698:	e005      	b.n	80016a6 <LecturaPulsadores+0x1ee>
								break;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <LecturaPulsadores+0x1f0>
								break;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <LecturaPulsadores+0x1f0>
								break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <LecturaPulsadores+0x1f0>
								break;
 80016a6:	bf00      	nop
							case count:			//Este estado no deberia darse:
								break;

							}

				if( menuState != ModoMan && menuState != ModoAut )
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <LecturaPulsadores+0x29c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d006      	beq.n	80016be <LecturaPulsadores+0x206>
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <LecturaPulsadores+0x29c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <LecturaPulsadores+0x206>
				{
				OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 80016b8:	200e      	movs	r0, #14
 80016ba:	f004 fa2b 	bl	8005b14 <OSTaskResume>
				}
				OSTimeDlyHMSM(0, 0, 0, 100u);			//Delay luego de pulsarlo
 80016be:	2364      	movs	r3, #100	; 0x64
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2000      	movs	r0, #0
 80016c6:	f004 fc17 	bl	8005ef8 <OSTimeDlyHMSM>
 80016ca:	e009      	b.n	80016e0 <LecturaPulsadores+0x228>

			}
			else //Si modo manual y no se está pulsando ni arriba ni abajo
			{
				if(menuState == ModoMan)
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <LecturaPulsadores+0x29c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <LecturaPulsadores+0x228>
				{
					giroHorario = false;
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <LecturaPulsadores+0x2a8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
					giroAntiHorario = false;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <LecturaPulsadores+0x2ac>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]


		/***************************PULSADOR ABAJO ************************************/

		/***************************PULSADOR START/STOP *******************************/
		if(HAL_GPIO_ReadPin(GPIOB, PULSADOR4_Pin) == GPIO_PIN_RESET)
 80016e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e4:	481c      	ldr	r0, [pc, #112]	; (8001758 <LecturaPulsadores+0x2a0>)
 80016e6:	f001 f949 	bl	800297c <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f aeea 	bne.w	80014c6 <LecturaPulsadores+0xe>
		{
			if (menuState == ModoAut || menuState == ModoMan)	//solo start en manual o automatico
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <LecturaPulsadores+0x29c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <LecturaPulsadores+0x24c>
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <LecturaPulsadores+0x29c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f47f aee1 	bne.w	80014c6 <LecturaPulsadores+0xe>
			{
				start = !start;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <LecturaPulsadores+0x2a4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <LecturaPulsadores+0x2a4>)
 8001720:	701a      	strb	r2, [r3, #0]
				if (!start)
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <LecturaPulsadores+0x2a4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <LecturaPulsadores+0x284>
				{
					halt = true;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <LecturaPulsadores+0x2c0>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
					OSTimeDlyResume(APP_CFG_TASK3_PRIO); //Le quita los delay a la tarea del motor
 8001736:	200d      	movs	r0, #13
 8001738:	f004 fc42 	bl	8005fc0 <OSTimeDlyResume>
				}
				OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 800173c:	200e      	movs	r0, #14
 800173e:	f004 f9e9 	bl	8005b14 <OSTaskResume>
				OSTimeDlyHMSM(0, 0, 0, 400u);			//Delay luego de pulsarlo
 8001742:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2000      	movs	r0, #0
 800174c:	f004 fbd4 	bl	8005ef8 <OSTimeDlyHMSM>
		OSTimeDlyHMSM(0, 0, 0, 25u); 				//Tiempo de lectura: 100ms
 8001750:	e6b9      	b.n	80014c6 <LecturaPulsadores+0xe>
 8001752:	bf00      	nop
 8001754:	20000e88 	.word	0x20000e88
 8001758:	40010c00 	.word	0x40010c00
 800175c:	20000201 	.word	0x20000201
 8001760:	20000202 	.word	0x20000202
 8001764:	20000203 	.word	0x20000203
 8001768:	20000002 	.word	0x20000002
 800176c:	20000004 	.word	0x20000004
 8001770:	20000006 	.word	0x20000006
 8001774:	20000008 	.word	0x20000008
 8001778:	20000001 	.word	0x20000001

0800177c <ActualizarDisplay>:
*
* Note(s)     : none.
*********************************************************************************************************
*/
static void ActualizarDisplay (void *p_arg)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af04      	add	r7, sp, #16
 8001782:	6078      	str	r0, [r7, #4]
												//Configuracion inicial
	menuState=ModoAut;
 8001784:	4b60      	ldr	r3, [pc, #384]	; (8001908 <ActualizarDisplay+0x18c>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	LiquidCrystal(GPIOA, LCD_RS_Pin, LCD_RW_Pin, LCD_EN_Pin, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	9303      	str	r3, [sp, #12]
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2320      	movs	r3, #32
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2310      	movs	r3, #16
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	4859      	ldr	r0, [pc, #356]	; (800190c <ActualizarDisplay+0x190>)
 80017a8:	f7ff fa9e 	bl	8000ce8 <LiquidCrystal>
	OSTimeDlyHMSM(0u, 0u, 1u, 0u);
 80017ac:	2300      	movs	r3, #0
 80017ae:	2201      	movs	r2, #1
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f004 fba0 	bl	8005ef8 <OSTimeDlyHMSM>



	  while (1)
	  {
		  	clear();
 80017b8:	f7ff fcf0 	bl	800119c <clear>
		  	setCursor(0,0);
 80017bc:	2100      	movs	r1, #0
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fcfa 	bl	80011b8 <setCursor>
		  	char buffer[5];			//Este buffer contiene los números de los parametros

		  	switch(menuState)
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <ActualizarDisplay+0x18c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b06      	cmp	r3, #6
 80017ca:	f200 8089 	bhi.w	80018e0 <ActualizarDisplay+0x164>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <ActualizarDisplay+0x58>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	080017f1 	.word	0x080017f1
 80017d8:	08001827 	.word	0x08001827
 80017dc:	0800182f 	.word	0x0800182f
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	08001887 	.word	0x08001887
 80017e8:	080018b3 	.word	0x080018b3
 80017ec:	080018e1 	.word	0x080018e1
		  	{
		  	case ModoAut:

		  		print("Modo Automatico");
 80017f0:	4847      	ldr	r0, [pc, #284]	; (8001910 <ActualizarDisplay+0x194>)
 80017f2:	f7ff fd55 	bl	80012a0 <print>
		  		if (errorTimeoutSup)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <ActualizarDisplay+0x198>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <ActualizarDisplay+0x92>
		  		{
		  			setCursor(0,1);
 80017fe:	2101      	movs	r1, #1
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fcd9 	bl	80011b8 <setCursor>
		  			print("Err Fc Sup");
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <ActualizarDisplay+0x19c>)
 8001808:	f7ff fd4a 	bl	80012a0 <print>
		  				setCursor(0,1);
		  				print("Err Fc Inf");
		  			}

		  		}
		  		break;
 800180c:	e067      	b.n	80018de <ActualizarDisplay+0x162>
		  			if (errorTimeoutInf)
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <ActualizarDisplay+0x1a0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <ActualizarDisplay+0x162>
		  				setCursor(0,1);
 8001816:	2101      	movs	r1, #1
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff fccd 	bl	80011b8 <setCursor>
		  				print("Err Fc Inf");
 800181e:	4840      	ldr	r0, [pc, #256]	; (8001920 <ActualizarDisplay+0x1a4>)
 8001820:	f7ff fd3e 	bl	80012a0 <print>
		  		break;
 8001824:	e05b      	b.n	80018de <ActualizarDisplay+0x162>
		  	case ModoMan:

		  		print("Modo Manual");
 8001826:	483f      	ldr	r0, [pc, #252]	; (8001924 <ActualizarDisplay+0x1a8>)
 8001828:	f7ff fd3a 	bl	80012a0 <print>

		  		break;
 800182c:	e058      	b.n	80018e0 <ActualizarDisplay+0x164>
		  	case CantRejillas:

		  		print("Cant de Rejillas");
 800182e:	483e      	ldr	r0, [pc, #248]	; (8001928 <ActualizarDisplay+0x1ac>)
 8001830:	f7ff fd36 	bl	80012a0 <print>
		  		setCursor(0,1);
 8001834:	2101      	movs	r1, #1
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fcbe 	bl	80011b8 <setCursor>
		  		sprintf(buffer,"%d",nRejillas);
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <ActualizarDisplay+0x1b0>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	493a      	ldr	r1, [pc, #232]	; (8001930 <ActualizarDisplay+0x1b4>)
 8001848:	4618      	mov	r0, r3
 800184a:	f005 fafd 	bl	8006e48 <siprintf>
		  		print(buffer);
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fd24 	bl	80012a0 <print>
		  		break;
 8001858:	e042      	b.n	80018e0 <ActualizarDisplay+0x164>

		  	case Desplazamiento:
		  		print("Distancia en mm");
 800185a:	4836      	ldr	r0, [pc, #216]	; (8001934 <ActualizarDisplay+0x1b8>)
 800185c:	f7ff fd20 	bl	80012a0 <print>
		  		setCursor(0,1);
 8001860:	2101      	movs	r1, #1
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff fca8 	bl	80011b8 <setCursor>
		  		sprintf(buffer,"%d",distancia_mm);
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <ActualizarDisplay+0x1bc>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	492f      	ldr	r1, [pc, #188]	; (8001930 <ActualizarDisplay+0x1b4>)
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fae7 	bl	8006e48 <siprintf>
		  		print(buffer);
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fd0e 	bl	80012a0 <print>
		  		break;
 8001884:	e02c      	b.n	80018e0 <ActualizarDisplay+0x164>

		  	case VelMax:
		  		print("RPM motor Max");
 8001886:	482d      	ldr	r0, [pc, #180]	; (800193c <ActualizarDisplay+0x1c0>)
 8001888:	f7ff fd0a 	bl	80012a0 <print>
		  		setCursor(0,1);
 800188c:	2101      	movs	r1, #1
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fc92 	bl	80011b8 <setCursor>
		  		sprintf(buffer,"%d",velMAX_RPM);
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <ActualizarDisplay+0x1c4>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	4924      	ldr	r1, [pc, #144]	; (8001930 <ActualizarDisplay+0x1b4>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 fad1 	bl	8006e48 <siprintf>
		  		print(buffer);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fcf8 	bl	80012a0 <print>
		  		break;
 80018b0:	e016      	b.n	80018e0 <ActualizarDisplay+0x164>

		  	case VelMin:
		  		print("RPM motor Min");
 80018b2:	4824      	ldr	r0, [pc, #144]	; (8001944 <ActualizarDisplay+0x1c8>)
 80018b4:	f7ff fcf4 	bl	80012a0 <print>
		  		setCursor(0,1);
 80018b8:	2101      	movs	r1, #1
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fc7c 	bl	80011b8 <setCursor>
		  		sprintf(buffer,"%d",velMIN_RPM);
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <ActualizarDisplay+0x1cc>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	4919      	ldr	r1, [pc, #100]	; (8001930 <ActualizarDisplay+0x1b4>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f005 fabb 	bl	8006e48 <siprintf>
		  		print(buffer);
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fce2 	bl	80012a0 <print>
		  		break;
 80018dc:	e000      	b.n	80018e0 <ActualizarDisplay+0x164>
		  		break;
 80018de:	bf00      	nop

		  	case count:
		  		break;

		  	}
		  	if(start)
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <ActualizarDisplay+0x1d0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <ActualizarDisplay+0x180>
		  	{
		  		setCursor (7,1);
 80018e8:	2101      	movs	r1, #1
 80018ea:	2007      	movs	r0, #7
 80018ec:	f7ff fc64 	bl	80011b8 <setCursor>
		  		print("RUN");
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <ActualizarDisplay+0x1d4>)
 80018f2:	f7ff fcd5 	bl	80012a0 <print>
		  		blink();
 80018f6:	f7ff fcbd 	bl	8001274 <blink>
 80018fa:	e001      	b.n	8001900 <ActualizarDisplay+0x184>
		  	}
		  	else
		  	{
		  		noBlink();
 80018fc:	f7ff fca4 	bl	8001248 <noBlink>
		  	}

		  	OSTaskSuspend(APP_CFG_TASK2_PRIO); //Se autosuspende
 8001900:	200e      	movs	r0, #14
 8001902:	f004 f9f1 	bl	8005ce8 <OSTaskSuspend>
	  {
 8001906:	e757      	b.n	80017b8 <ActualizarDisplay+0x3c>
 8001908:	20000e88 	.word	0x20000e88
 800190c:	40010800 	.word	0x40010800
 8001910:	080092d8 	.word	0x080092d8
 8001914:	20000204 	.word	0x20000204
 8001918:	080092e8 	.word	0x080092e8
 800191c:	20000205 	.word	0x20000205
 8001920:	080092f4 	.word	0x080092f4
 8001924:	08009300 	.word	0x08009300
 8001928:	0800930c 	.word	0x0800930c
 800192c:	20000002 	.word	0x20000002
 8001930:	08009320 	.word	0x08009320
 8001934:	08009324 	.word	0x08009324
 8001938:	20000004 	.word	0x20000004
 800193c:	08009334 	.word	0x08009334
 8001940:	20000006 	.word	0x20000006
 8001944:	08009344 	.word	0x08009344
 8001948:	20000008 	.word	0x20000008
 800194c:	20000201 	.word	0x20000201
 8001950:	08009354 	.word	0x08009354

08001954 <ControlMotor>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void ControlMotor (void *p_arg)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

	while(DEF_TRUE)
	{
		OSTimeDlyHMSM(0u, 0u, 0u, 40);
 800195c:	2328      	movs	r3, #40	; 0x28
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2000      	movs	r0, #0
 8001964:	f004 fac8 	bl	8005ef8 <OSTimeDlyHMSM>

		if(start)
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <ControlMotor+0x7c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02a      	beq.n	80019c6 <ControlMotor+0x72>
		{
			if (menuState == ModoMan)	//if modo manual
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <ControlMotor+0x80>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d11f      	bne.n	80019b8 <ControlMotor+0x64>
			{
				if (giroHorario && !giroAntiHorario )
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <ControlMotor+0x84>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <ControlMotor+0x40>
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <ControlMotor+0x88>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <ControlMotor+0x40>
				{
					GiroHorario();
 800198e:	f000 f995 	bl	8001cbc <GiroHorario>
 8001992:	e01b      	b.n	80019cc <ControlMotor+0x78>
				}
				else
					if (!giroHorario && giroAntiHorario )
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <ControlMotor+0x84>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <ControlMotor+0x5c>
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <ControlMotor+0x88>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <ControlMotor+0x5c>
					{
						GiroAntiHorario();
 80019aa:	f000 f9ab 	bl	8001d04 <GiroAntiHorario>
 80019ae:	e00d      	b.n	80019cc <ControlMotor+0x78>
					}
					else // Si estoy en modo manual but no presiono los pulsadores
					{

						halt = true;
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <ControlMotor+0x8c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e7d1      	b.n	800195c <ControlMotor+0x8>
					}
			} //End if modo manual
			else
			{
				if(menuState == ModoAut)	//if modo automatico)
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <ControlMotor+0x80>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1cd      	bne.n	800195c <ControlMotor+0x8>
				{
					CicloAutomatico();
 80019c0:	f000 f87e 	bl	8001ac0 <CicloAutomatico>
 80019c4:	e7ca      	b.n	800195c <ControlMotor+0x8>
			}

		}
		else   //if not start
		{
			halt = true;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <ControlMotor+0x8c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
		OSTimeDlyHMSM(0u, 0u, 0u, 40);
 80019cc:	e7c6      	b.n	800195c <ControlMotor+0x8>
 80019ce:	bf00      	nop
 80019d0:	20000201 	.word	0x20000201
 80019d4:	20000e88 	.word	0x20000e88
 80019d8:	20000202 	.word	0x20000202
 80019dc:	20000203 	.word	0x20000203
 80019e0:	20000001 	.word	0x20000001

080019e4 <Detener>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Detener (void *p_arg)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	while(DEF_TRUE)
		{
			if(halt)
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <Detener+0x34>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <Detener+0x2a>
			{
				HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET); 		//INHABILITO DRIVER
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fa:	4808      	ldr	r0, [pc, #32]	; (8001a1c <Detener+0x38>)
 80019fc:	f000 ffd5 	bl	80029aa <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001a00:	2100      	movs	r1, #0
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <Detener+0x3c>)
 8001a04:	f001 fd3e 	bl	8003484 <HAL_TIM_PWM_Stop>
				halt = false;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <Detener+0x34>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
			}
				OSTimeDly(1);							//Tiene alta prioridad y bajo delay
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f004 fa1e 	bl	8005e50 <OSTimeDly>
			if(halt)
 8001a14:	e7ea      	b.n	80019ec <Detener+0x8>
 8001a16:	bf00      	nop
 8001a18:	20000001 	.word	0x20000001
 8001a1c:	40010c00 	.word	0x40010c00
 8001a20:	20000e40 	.word	0x20000e40

08001a24 <Rampa>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Rampa (void *p_arg)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

	while(DEF_TRUE)
		{
			if(htim4.Instance->PSC == 10)			//Si el preescaleer es 10
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <Rampa+0x90>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d118      	bne.n	8001a68 <Rampa+0x44>
			{
				for(int i = 0; i< 10;i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e011      	b.n	8001a60 <Rampa+0x3c>
				{	if(halt)break;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <Rampa+0x94>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12f      	bne.n	8001aa4 <Rampa+0x80>
					htim4.Instance->PSC =rampa[i]; //El vector rampa está en calibracion
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <Rampa+0x90>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	491c      	ldr	r1, [pc, #112]	; (8001abc <Rampa+0x98>)
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
					OSTimeDly(500);
 8001a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a56:	f004 f9fb 	bl	8005e50 <OSTimeDly>
				for(int i = 0; i< 10;i++)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	ddea      	ble.n	8001a3c <Rampa+0x18>
 8001a66:	e020      	b.n	8001aaa <Rampa+0x86>
				}

			}
			else
			{
				if (htim4.Instance->PSC == 0)
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <Rampa+0x90>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11b      	bne.n	8001aaa <Rampa+0x86>
				{
					for(int i = 9; i>=0 ;i--)
 8001a72:	2309      	movs	r3, #9
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	e011      	b.n	8001a9c <Rampa+0x78>
					{
						if(halt)break;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <Rampa+0x94>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d113      	bne.n	8001aa8 <Rampa+0x84>
						htim4.Instance->PSC =rampa[i];
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <Rampa+0x90>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	490d      	ldr	r1, [pc, #52]	; (8001abc <Rampa+0x98>)
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
						OSTimeDly(500);
 8001a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a92:	f004 f9dd 	bl	8005e50 <OSTimeDly>
					for(int i = 9; i>=0 ;i--)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	daea      	bge.n	8001a78 <Rampa+0x54>
 8001aa2:	e002      	b.n	8001aaa <Rampa+0x86>
				{	if(halt)break;
 8001aa4:	bf00      	nop
 8001aa6:	e000      	b.n	8001aaa <Rampa+0x86>
						if(halt)break;
 8001aa8:	bf00      	nop

					}
				}
			}
			OSTaskSuspend(APP_CFG_TASK5_PRIO); //Se autosuspende
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f004 f91c 	bl	8005ce8 <OSTaskSuspend>
			if(htim4.Instance->PSC == 10)			//Si el preescaleer es 10
 8001ab0:	e7bc      	b.n	8001a2c <Rampa+0x8>
 8001ab2:	bf00      	nop
 8001ab4:	20000e40 	.word	0x20000e40
 8001ab8:	20000001 	.word	0x20000001
 8001abc:	08009424 	.word	0x08009424

08001ac0 <CicloAutomatico>:
 * mover manualmente el elevador
 *
 ****************************************************************************************/

void CicloAutomatico()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	float delay_ms = ((distancia_mm / desplazamientoXrev ) * pulsosXrev ) / 2000; // Calculo delay
 8001ac6:	4b74      	ldr	r3, [pc, #464]	; (8001c98 <CicloAutomatico+0x1d8>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd5a 	bl	8000584 <__aeabi_i2d>
 8001ad0:	a36f      	add	r3, pc, #444	; (adr r3, 8001c90 <CicloAutomatico+0x1d0>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fee9 	bl	80008ac <__aeabi_ddiv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <CicloAutomatico+0x1dc>)
 8001ae8:	f7fe fdb6 	bl	8000658 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <CicloAutomatico+0x1e0>)
 8001afa:	f7fe fed7 	bl	80008ac <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f87f 	bl	8000c08 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	607b      	str	r3, [r7, #4]

	if (HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin) && (errorTimeoutInf || errorTimeoutSup)) //Reset errores FC
 8001b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b12:	4864      	ldr	r0, [pc, #400]	; (8001ca4 <CicloAutomatico+0x1e4>)
 8001b14:	f000 ff32 	bl	800297c <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <CicloAutomatico+0x80>
 8001b1e:	4b62      	ldr	r3, [pc, #392]	; (8001ca8 <CicloAutomatico+0x1e8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <CicloAutomatico+0x6e>
 8001b26:	4b61      	ldr	r3, [pc, #388]	; (8001cac <CicloAutomatico+0x1ec>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <CicloAutomatico+0x80>
	{
		errorTimeoutInf = false;
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <CicloAutomatico+0x1e8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
		errorTimeoutSup = false;
 8001b34:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <CicloAutomatico+0x1ec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
		OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001b3a:	200e      	movs	r0, #14
 8001b3c:	f003 ffea 	bl	8005b14 <OSTaskResume>

	}

		/********************** CICLO DE SUBIDA ***********************************/
	if(start && HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))//if start y Fc inferior
 8001b40:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d053      	beq.n	8001bf0 <CicloAutomatico+0x130>
 8001b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4c:	4855      	ldr	r0, [pc, #340]	; (8001ca4 <CicloAutomatico+0x1e4>)
 8001b4e:	f000 ff15 	bl	800297c <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d04b      	beq.n	8001bf0 <CicloAutomatico+0x130>
	{

		htim4.Instance->PSC = 10;					//setea el motor a velocidad minima
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <CicloAutomatico+0x1f4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
		OSTaskResume(APP_CFG_TASK5_PRIO); 			//Inicia la trea de la rampa para acelerar
 8001b60:	200f      	movs	r0, #15
 8001b62:	f003 ffd7 	bl	8005b14 <OSTaskResume>
		GiroHorario();
 8001b66:	f000 f8a9 	bl	8001cbc <GiroHorario>
		OSTimeDly((uint32_t)delay_ms);				//Espera que termine el tiempo calculado
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff f89c 	bl	8000ca8 <__aeabi_f2uiz>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 f96c 	bl	8005e50 <OSTimeDly>
		if (!start) return;							//Si se interrumpe la marcha
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d177      	bne.n	8001c76 <CicloAutomatico+0x1b6>
		OSTaskResume(APP_CFG_TASK5_PRIO); 			//Inicia la trea de la rampa para desacelerar
 8001b86:	200f      	movs	r0, #15
 8001b88:	f003 ffc4 	bl	8005b14 <OSTaskResume>


		OSTimeDly(timeout_Fc_Sup);					//Timeout FC superior
 8001b8c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001b90:	f004 f95e 	bl	8005e50 <OSTimeDly>
		halt = true;
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <CicloAutomatico+0x1f8>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(GPIOB, Fc_Sup_Pin))   //Si no se alcanzó el final de carrera sup
 8001b9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9e:	4841      	ldr	r0, [pc, #260]	; (8001ca4 <CicloAutomatico+0x1e4>)
 8001ba0:	f000 feec 	bl	800297c <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <CicloAutomatico+0xfc>
		{
			errorTimeoutSup = true;
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <CicloAutomatico+0x1ec>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
			start = false;
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
			OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001bb6:	200e      	movs	r0, #14
 8001bb8:	f003 ffac 	bl	8005b14 <OSTaskResume>

		}
		if (!start || errorTimeoutSup ) return;
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f083 0301 	eor.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d157      	bne.n	8001c7a <CicloAutomatico+0x1ba>
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <CicloAutomatico+0x1ec>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d153      	bne.n	8001c7a <CicloAutomatico+0x1ba>
		OSTimeDly(tiempoDescarga);
 8001bd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bd6:	f004 f93b 	bl	8005e50 <OSTimeDly>
		if (!start || errorTimeoutSup) return;
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f083 0301 	eor.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d14a      	bne.n	8001c7e <CicloAutomatico+0x1be>
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <CicloAutomatico+0x1ec>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d146      	bne.n	8001c7e <CicloAutomatico+0x1be>
	}
	/********************** CICLO DE SUBIDA ***********************************/

	/********************** CICLO DE BAJADA ***********************************/
	if(start && HAL_GPIO_ReadPin(GPIOB, Fc_Sup_Pin))//if start y Fc superior
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d045      	beq.n	8001c84 <CicloAutomatico+0x1c4>
 8001bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bfc:	4829      	ldr	r0, [pc, #164]	; (8001ca4 <CicloAutomatico+0x1e4>)
 8001bfe:	f000 febd 	bl	800297c <HAL_GPIO_ReadPin>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d03d      	beq.n	8001c84 <CicloAutomatico+0x1c4>
	{
		htim4.Instance->PSC = 10;					//setea el motor a velocidad minima
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <CicloAutomatico+0x1f4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
		OSTaskResume(APP_CFG_TASK5_PRIO); 			//Inicia la tarea de la rampa para acelerar
 8001c10:	200f      	movs	r0, #15
 8001c12:	f003 ff7f 	bl	8005b14 <OSTaskResume>
		GiroAntiHorario();
 8001c16:	f000 f875 	bl	8001d04 <GiroAntiHorario>
		OSTimeDly((uint32_t)delay_ms);				//Espera que termine el tiempo calculado
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff f844 	bl	8000ca8 <__aeabi_f2uiz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 f914 	bl	8005e50 <OSTimeDly>
		if (!start) return;
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d125      	bne.n	8001c82 <CicloAutomatico+0x1c2>
		OSTaskResume(APP_CFG_TASK5_PRIO); 			//Inicia la trea de la rampa para desacelerar
 8001c36:	200f      	movs	r0, #15
 8001c38:	f003 ff6c 	bl	8005b14 <OSTaskResume>


		OSTimeDly(timeout_Fc_Inf);					//Timeout FC inferior
 8001c3c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001c40:	f004 f906 	bl	8005e50 <OSTimeDly>
		halt = true;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <CicloAutomatico+0x1f8>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(GPIOB, Fc_Inf_Pin))   //Si no se alcanzó el final de carrera inf
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <CicloAutomatico+0x1e4>)
 8001c50:	f000 fe94 	bl	800297c <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <CicloAutomatico+0x1ac>
		{
			errorTimeoutInf = true;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <CicloAutomatico+0x1e8>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
			start = false;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <CicloAutomatico+0x1f0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
			OSTaskResume(APP_CFG_TASK2_PRIO); 		//Resume la tarea display
 8001c66:	200e      	movs	r0, #14
 8001c68:	f003 ff54 	bl	8005b14 <OSTaskResume>
		}
		OSTimeDly(tiempoDescarga);					//Delay tiempo descarga
 8001c6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c70:	f004 f8ee 	bl	8005e50 <OSTimeDly>
 8001c74:	e006      	b.n	8001c84 <CicloAutomatico+0x1c4>
		if (!start) return;							//Si se interrumpe la marcha
 8001c76:	bf00      	nop
 8001c78:	e004      	b.n	8001c84 <CicloAutomatico+0x1c4>
		if (!start || errorTimeoutSup ) return;
 8001c7a:	bf00      	nop
 8001c7c:	e002      	b.n	8001c84 <CicloAutomatico+0x1c4>
		if (!start || errorTimeoutSup) return;
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <CicloAutomatico+0x1c4>
		if (!start) return;
 8001c82:	bf00      	nop
	}
	/********************** CICLO DE BAJADA ***********************************/

}
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fb99999 	.word	0x3fb99999
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	40790000 	.word	0x40790000
 8001ca0:	409f4000 	.word	0x409f4000
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	20000205 	.word	0x20000205
 8001cac:	20000204 	.word	0x20000204
 8001cb0:	20000201 	.word	0x20000201
 8001cb4:	20000e40 	.word	0x20000e40
 8001cb8:	20000001 	.word	0x20000001

08001cbc <GiroHorario>:

void GiroHorario()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_RESET); 		//HABILITO DRIVER
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc6:	480d      	ldr	r0, [pc, #52]	; (8001cfc <GiroHorario+0x40>)
 8001cc8:	f000 fe6f 	bl	80029aa <HAL_GPIO_WritePin>
	OSTimeDlyHMSM(0, 0, 0, 1u);
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f004 f910 	bl	8005ef8 <OSTimeDlyHMSM>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET); 		//GIRO PA UN LADO
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <GiroHorario+0x40>)
 8001ce0:	f000 fe63 	bl	80029aa <HAL_GPIO_WritePin>

	OSTimeDlyHMSM(0, 0, 0, 1u);
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2000      	movs	r0, #0
 8001cec:	f004 f904 	bl	8005ef8 <OSTimeDlyHMSM>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <GiroHorario+0x44>)
 8001cf4:	f001 fb24 	bl	8003340 <HAL_TIM_PWM_Start>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	20000e40 	.word	0x20000e40

08001d04 <GiroAntiHorario>:

void GiroAntiHorario()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_RESET); 		//HABILITO DRIVER
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <GiroAntiHorario+0x40>)
 8001d10:	f000 fe4b 	bl	80029aa <HAL_GPIO_WritePin>
	OSTimeDlyHMSM(0, 0, 0, 1u);
 8001d14:	2301      	movs	r3, #1
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f004 f8ec 	bl	8005ef8 <OSTimeDlyHMSM>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET); 		//GIRO PA OTRO LADO
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	4807      	ldr	r0, [pc, #28]	; (8001d44 <GiroAntiHorario+0x40>)
 8001d28:	f000 fe3f 	bl	80029aa <HAL_GPIO_WritePin>
	OSTimeDlyHMSM(0, 0, 0, 1u);
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2000      	movs	r0, #0
 8001d34:	f004 f8e0 	bl	8005ef8 <OSTimeDlyHMSM>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <GiroAntiHorario+0x44>)
 8001d3c:	f001 fb00 	bl	8003340 <HAL_TIM_PWM_Start>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	20000e40 	.word	0x20000e40

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f000 fc49 	bl	80025e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  CPU_IntDis();
 8001d56:	f7fe f9fb 	bl	8000150 <CPU_IntDis>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	80fb      	strh	r3, [r7, #6]
 8001d5e:	e009      	b.n	8001d74 <main+0x28>
  {
  /* Set all external intr. to KA interrupt priority boundary */
  CPU_IntSrcPrioSet(int_id, CPU_CFG_KA_IPL_BOUNDARY, CPU_INT_KA);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	2104      	movs	r1, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 f873 	bl	8003e54 <CPU_IntSrcPrioSet>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	3301      	adds	r3, #1
 8001d72:	80fb      	strh	r3, [r7, #6]
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d9f2      	bls.n	8001d60 <main+0x14>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7a:	f000 f827 	bl	8001dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7e:	f000 f8e3 	bl	8001f48 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001d82:	f000 f869 	bl	8001e58 <MX_TIM4_Init>

  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);



  OSInit();
 8001d86:	f002 fc3f 	bl	8004608 <OSInit>
  OSTaskCreateExt( StartupTask,
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	9304      	str	r3, [sp, #16]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <main+0x70>)
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2303      	movs	r3, #3
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <main+0x74>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <main+0x78>)
 8001da6:	f003 fcf7 	bl	8005798 <OSTaskCreateExt>
				   &StartupTaskStk[0],
				   APP_CFG_STARTUP_TASK_STK_SIZE,
				   0,
				   (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
  #if (OS_TASK_NAME_EN > 0u)
   OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8001daa:	1d7b      	adds	r3, r7, #5
 8001dac:	461a      	mov	r2, r3
 8001dae:	4906      	ldr	r1, [pc, #24]	; (8001dc8 <main+0x7c>)
 8001db0:	2003      	movs	r0, #3
 8001db2:	f003 fe55 	bl	8005a60 <OSTaskNameSet>
    	  	      (INT8U *)"Startup task",
				  &os_err);
  #endif

  OSStart();
 8001db6:	f002 fd11 	bl	80047dc <OSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <main+0x6e>
 8001dbc:	20000208 	.word	0x20000208
 8001dc0:	20000404 	.word	0x20000404
 8001dc4:	080020a5 	.word	0x080020a5
 8001dc8:	08009358 	.word	0x08009358

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	; 0x40
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	f107 0318 	add.w	r3, r7, #24
 8001dd6:	2228      	movs	r2, #40	; 0x28
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fbcc 	bl	8006578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2302      	movs	r3, #2
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fdf9 	bl	8002a0c <HAL_RCC_OscConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e20:	f000 fa2c 	bl	800227c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e24:	230f      	movs	r3, #15
 8001e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f864 	bl	8002f0c <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e4a:	f000 fa17 	bl	800227c <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3740      	adds	r7, #64	; 0x40
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001e8a:	4a2e      	ldr	r2, [pc, #184]	; (8001f44 <MX_TIM4_Init+0xec>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 36000;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001e9c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001ea0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eae:	4824      	ldr	r0, [pc, #144]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001eb0:	f001 f99e 	bl	80031f0 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001eba:	f000 f9df 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481d      	ldr	r0, [pc, #116]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001ecc:	f001 fbfc 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ed6:	f000 f9d1 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eda:	4819      	ldr	r0, [pc, #100]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001edc:	f001 f9d7 	bl	800328e <HAL_TIM_PWM_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ee6:	f000 f9c9 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4811      	ldr	r0, [pc, #68]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001efa:	f001 ff4d 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f04:	f000 f9ba 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18000;
 8001f0c:	f244 6350 	movw	r3, #18000	; 0x4650
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001f22:	f001 fb13 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001f2c:	f000 f9a6 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM4_Init+0xe8>)
 8001f32:	f000 f9f9 	bl	8002328 <HAL_TIM_MspPostInit>

}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000e40 	.word	0x20000e40
 8001f44:	40000800 	.word	0x40000800

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a41      	ldr	r2, [pc, #260]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a35      	ldr	r2, [pc, #212]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <MX_GPIO_Init+0x120>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <MX_GPIO_Init+0x120>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <MX_GPIO_Init+0x120>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <MX_GPIO_Init+0x120>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc2:	482a      	ldr	r0, [pc, #168]	; (800206c <MX_GPIO_Init+0x124>)
 8001fc4:	f000 fcf1 	bl	80029aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fce:	4827      	ldr	r0, [pc, #156]	; (800206c <MX_GPIO_Init+0x124>)
 8001fd0:	f000 fceb 	bl	80029aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8001fda:	4825      	ldr	r0, [pc, #148]	; (8002070 <MX_GPIO_Init+0x128>)
 8001fdc:	f000 fce5 	bl	80029aa <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Fc_Inf_Pin|Fc_Sup_Pin|PUL_Pin|DIR_Pin
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8001fe6:	4823      	ldr	r0, [pc, #140]	; (8002074 <MX_GPIO_Init+0x12c>)
 8001fe8:	f000 fcdf 	bl	80029aa <HAL_GPIO_WritePin>
                          |ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8001fec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	4619      	mov	r1, r3
 8002004:	4819      	ldr	r0, [pc, #100]	; (800206c <MX_GPIO_Init+0x124>)
 8002006:	f000 fb35 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 800200a:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800200e:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2302      	movs	r3, #2
 800201a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	4813      	ldr	r0, [pc, #76]	; (8002070 <MX_GPIO_Init+0x128>)
 8002024:	f000 fb26 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : Fc_Inf_Pin Fc_Sup_Pin PUL_Pin DIR_Pin
                           ENA_Pin */
  GPIO_InitStruct.Pin = Fc_Inf_Pin|Fc_Sup_Pin|PUL_Pin|DIR_Pin
 8002028:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800202c:	613b      	str	r3, [r7, #16]
                          |ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2302      	movs	r3, #2
 8002038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0310 	add.w	r3, r7, #16
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_GPIO_Init+0x12c>)
 8002042:	f000 fb17 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PULSADOR1_Pin PULSADOR2_Pin PULSADOR3_Pin PULSADOR4_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin|PULSADOR2_Pin|PULSADOR3_Pin|PULSADOR4_Pin;
 8002046:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800204a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <MX_GPIO_Init+0x12c>)
 800205c:	f000 fb0a 	bl	8002674 <HAL_GPIO_Init>

}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40011000 	.word	0x40011000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00

08002078 <HAL_InitTick>:
*************************************************************************
* STM32Cube HAL FUNCTIONS
*************************************************************************
*/
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
/* define as empty to prevent the system tick being initialized before
    the OS starts */
 return (HAL_OK);
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

 #if (OS_VERSION >= 30000u)
  OS_ERR os_err;
  os_tick_ctr = OSTimeGet(&os_err);
 #else
  os_tick_ctr = OSTimeGet();
 8002092:	f004 f813 	bl	80060bc <OSTimeGet>
 8002096:	6078      	str	r0, [r7, #4]
 #endif

 return os_tick_ctr;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <StartupTask>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void StartupTask (void *p_arg)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 CPU_INT32U cpu_clk;
 (void)p_arg;
 cpu_clk = HAL_RCC_GetHCLKFreq();
 80020ac:	f001 f878 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80020b0:	60f8      	str	r0, [r7, #12]
 /* Initialize and enable System Tick timer */
 OS_CPU_SysTickInitFreq(cpu_clk);
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f002 fa2a 	bl	800450c <OS_CPU_SysTickInitFreq>

 #if (OS_TASK_STAT_EN > 0)
  OSStatInit();                                               /* Determine CPU capacity.                              */
 80020b8:	f002 fbb8 	bl	800482c <OSStatInit>
 #endif

// App_EventCreate();                                          /* Create application events.                           */
// App_TaskCreate();
  App_TaskCreate();			/* Create application tasks.               */
 80020bc:	f000 f816 	bl	80020ec <App_TaskCreate>
  App_Task2Create();		/* Create application tasks.  			   */
 80020c0:	f000 f83c 	bl	800213c <App_Task2Create>
  App_Task3Create();		/* Create application tasks.  			   */
 80020c4:	f000 f862 	bl	800218c <App_Task3Create>
  App_Task4Create();
 80020c8:	f000 f888 	bl	80021dc <App_Task4Create>
  App_Task5Create();
 80020cc:	f000 f8ae 	bl	800222c <App_Task5Create>

 while (DEF_TRUE){
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80020d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <StartupTask+0x44>)
 80020d6:	f000 fc80 	bl	80029da <HAL_GPIO_TogglePin>
   //UsbPrintf("uCOS-II Running...\n");
   OSTimeDlyHMSM(0u, 0u, 1u, 0u);
 80020da:	2300      	movs	r3, #0
 80020dc:	2201      	movs	r2, #1
 80020de:	2100      	movs	r1, #0
 80020e0:	2000      	movs	r0, #0
 80020e2:	f003 ff09 	bl	8005ef8 <OSTimeDlyHMSM>
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80020e6:	e7f3      	b.n	80020d0 <StartupTask+0x2c>
 80020e8:	40011000 	.word	0x40011000

080020ec <App_TaskCreate>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void App_TaskCreate (void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) LecturaPulsadores,
 80020f2:	2303      	movs	r3, #3
 80020f4:	9304      	str	r3, [sp, #16]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9303      	str	r3, [sp, #12]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <App_TaskCreate+0x40>)
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	230a      	movs	r3, #10
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	230a      	movs	r3, #10
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <App_TaskCreate+0x44>)
 800210a:	2100      	movs	r1, #0
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <App_TaskCreate+0x48>)
 800210e:	f003 fb43 	bl	8005798 <OSTaskCreateExt>
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task1Stk[0],
							 (INT32U		  ) APP_CFG_TASK1_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK1_PRIO, (unsigned char *)"Pulsadores", &os_err);
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	461a      	mov	r2, r3
 800211a:	4907      	ldr	r1, [pc, #28]	; (8002138 <App_TaskCreate+0x4c>)
 800211c:	200a      	movs	r0, #10
 800211e:	f003 fc9f 	bl	8005a60 <OSTaskNameSet>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000408 	.word	0x20000408
 8002130:	20000604 	.word	0x20000604
 8002134:	080014b9 	.word	0x080014b9
 8002138:	08009368 	.word	0x08009368

0800213c <App_Task2Create>:

static void App_Task2Create (void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) ActualizarDisplay,
 8002142:	2303      	movs	r3, #3
 8002144:	9304      	str	r3, [sp, #16]
 8002146:	2300      	movs	r3, #0
 8002148:	9303      	str	r3, [sp, #12]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <App_Task2Create+0x40>)
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	230e      	movs	r3, #14
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	230e      	movs	r3, #14
 8002158:	4a09      	ldr	r2, [pc, #36]	; (8002180 <App_Task2Create+0x44>)
 800215a:	2100      	movs	r1, #0
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <App_Task2Create+0x48>)
 800215e:	f003 fb1b 	bl	8005798 <OSTaskCreateExt>
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task2Stk[0],
							 (INT32U		  ) APP_CFG_TASK2_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK2_PRIO, (unsigned char *)"Display", &os_err);
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	461a      	mov	r2, r3
 800216a:	4907      	ldr	r1, [pc, #28]	; (8002188 <App_Task2Create+0x4c>)
 800216c:	200e      	movs	r0, #14
 800216e:	f003 fc77 	bl	8005a60 <OSTaskNameSet>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000608 	.word	0x20000608
 8002180:	20000804 	.word	0x20000804
 8002184:	0800177d 	.word	0x0800177d
 8002188:	08009374 	.word	0x08009374

0800218c <App_Task3Create>:

static void App_Task3Create (void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) ControlMotor,
 8002192:	2303      	movs	r3, #3
 8002194:	9304      	str	r3, [sp, #16]
 8002196:	2300      	movs	r3, #0
 8002198:	9303      	str	r3, [sp, #12]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <App_Task3Create+0x40>)
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	230d      	movs	r3, #13
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	230d      	movs	r3, #13
 80021a8:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <App_Task3Create+0x44>)
 80021aa:	2100      	movs	r1, #0
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <App_Task3Create+0x48>)
 80021ae:	f003 faf3 	bl	8005798 <OSTaskCreateExt>
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task3Stk[0],
							 (INT32U		  ) APP_CFG_TASK3_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK3_PRIO, (unsigned char *)"Control Motor", &os_err);
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	461a      	mov	r2, r3
 80021ba:	4907      	ldr	r1, [pc, #28]	; (80021d8 <App_Task3Create+0x4c>)
 80021bc:	200d      	movs	r0, #13
 80021be:	f003 fc4f 	bl	8005a60 <OSTaskNameSet>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000808 	.word	0x20000808
 80021d0:	20000a04 	.word	0x20000a04
 80021d4:	08001955 	.word	0x08001955
 80021d8:	0800937c 	.word	0x0800937c

080021dc <App_Task4Create>:

static void App_Task4Create (void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) Detener,
 80021e2:	2303      	movs	r3, #3
 80021e4:	9304      	str	r3, [sp, #16]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9303      	str	r3, [sp, #12]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <App_Task4Create+0x40>)
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2309      	movs	r3, #9
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2309      	movs	r3, #9
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <App_Task4Create+0x44>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <App_Task4Create+0x48>)
 80021fe:	f003 facb 	bl	8005798 <OSTaskCreateExt>
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task4Stk[0],
							 (INT32U		  ) APP_CFG_TASK4_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK4_PRIO, (unsigned char *)"Detener", &os_err);
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	461a      	mov	r2, r3
 800220a:	4907      	ldr	r1, [pc, #28]	; (8002228 <App_Task4Create+0x4c>)
 800220c:	2009      	movs	r0, #9
 800220e:	f003 fc27 	bl	8005a60 <OSTaskNameSet>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000a08 	.word	0x20000a08
 8002220:	20000c04 	.word	0x20000c04
 8002224:	080019e5 	.word	0x080019e5
 8002228:	0800938c 	.word	0x0800938c

0800222c <App_Task5Create>:

static void App_Task5Create (void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af06      	add	r7, sp, #24
	CPU_INT08U os_err;

	os_err = OSTaskCreateExt((void (*)(void *)) Rampa,
 8002232:	2303      	movs	r3, #3
 8002234:	9304      	str	r3, [sp, #16]
 8002236:	2300      	movs	r3, #0
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <App_Task5Create+0x40>)
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	230f      	movs	r3, #15
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	230f      	movs	r3, #15
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <App_Task5Create+0x44>)
 800224a:	2100      	movs	r1, #0
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <App_Task5Create+0x48>)
 800224e:	f003 faa3 	bl	8005798 <OSTaskCreateExt>
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
							 (OS_STK		* )&Task5Stk[0],
							 (INT32U		  ) APP_CFG_TASK5_STK_SIZE,
							 (void			* )0,
							 (INT16U		  )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

	OSTaskNameSet(APP_CFG_TASK5_PRIO, (unsigned char *)"Rampa", &os_err);
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	461a      	mov	r2, r3
 800225a:	4907      	ldr	r1, [pc, #28]	; (8002278 <App_Task5Create+0x4c>)
 800225c:	200f      	movs	r0, #15
 800225e:	f003 fbff 	bl	8005a60 <OSTaskNameSet>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000c08 	.word	0x20000c08
 8002270:	20000e04 	.word	0x20000e04
 8002274:	08001a25 	.word	0x08001a25
 8002278:	08009394 	.word	0x08009394

0800227c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_MspInit+0x5c>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_MspInit+0x5c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6193      	str	r3, [r2, #24]
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_MspInit+0x5c>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_MspInit+0x5c>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_MspInit+0x5c>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_MspInit+0x5c>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_MspInit+0x60>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_MspInit+0x60>)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010000 	.word	0x40010000

080022ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_TIM_Base_MspInit+0x34>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10b      	bne.n	8002316 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_TIM_Base_MspInit+0x38>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_TIM_Base_MspInit+0x38>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_TIM_Base_MspInit+0x38>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40000800 	.word	0x40000800
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_TIM_MspPostInit+0x58>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d117      	bne.n	8002378 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_TIM_MspPostInit+0x5c>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_TIM_MspPostInit+0x5c>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_TIM_MspPostInit+0x5c>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2302      	movs	r3, #2
 800236a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_TIM_MspPostInit+0x60>)
 8002374:	f000 f97e 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40000800 	.word	0x40000800
 8002384:	40021000 	.word	0x40021000
 8002388:	40010c00 	.word	0x40010c00

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <HardFault_Handler+0x4>

0800239e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <MemManage_Handler+0x4>

080023a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <BusFault_Handler+0x4>

080023aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <UsageFault_Handler+0x4>

080023b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	return 1;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <_kill>:

int _kill(int pid, int sig)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023e0:	f004 f8a0 	bl	8006524 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2216      	movs	r2, #22
 80023e8:	601a      	str	r2, [r3, #0]
	return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_exit>:

void _exit (int status)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffe7 	bl	80023d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002408:	e7fe      	b.n	8002408 <_exit+0x12>

0800240a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e00a      	b.n	8002432 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800241c:	f3af 8000 	nop.w
 8002420:	4601      	mov	r1, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	60ba      	str	r2, [r7, #8]
 8002428:	b2ca      	uxtb	r2, r1
 800242a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbf0      	blt.n	800241c <_read+0x12>
	}

return len;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	e009      	b.n	800246a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	dbf1      	blt.n	8002456 <_write+0x12>
	}
	return len;
 8002472:	687b      	ldr	r3, [r7, #4]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_close>:

int _close(int file)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a2:	605a      	str	r2, [r3, #4]
	return 0;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <_isatty>:

int _isatty(int file)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <_sbrk+0x50>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x16>
		heap_end = &end;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <_sbrk+0x50>)
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <_sbrk+0x54>)
 80024f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <_sbrk+0x50>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <_sbrk+0x50>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	466a      	mov	r2, sp
 8002502:	4293      	cmp	r3, r2
 8002504:	d907      	bls.n	8002516 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002506:	f004 f80d 	bl	8006524 <__errno>
 800250a:	4603      	mov	r3, r0
 800250c:	220c      	movs	r2, #12
 800250e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	e006      	b.n	8002524 <_sbrk+0x48>
	}

	heap_end += incr;
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <_sbrk+0x50>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <_sbrk+0x50>)
 8002520:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000e08 	.word	0x20000e08
 8002530:	20002678 	.word	0x20002678

08002534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002538:	4b15      	ldr	r3, [pc, #84]	; (8002590 <SystemInit+0x5c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <SystemInit+0x5c>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <SystemInit+0x5c>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4911      	ldr	r1, [pc, #68]	; (8002590 <SystemInit+0x5c>)
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <SystemInit+0x60>)
 800254c:	4013      	ands	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <SystemInit+0x5c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <SystemInit+0x5c>)
 8002556:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <SystemInit+0x5c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SystemInit+0x5c>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <SystemInit+0x5c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <SystemInit+0x5c>)
 8002572:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002576:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SystemInit+0x5c>)
 800257a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800257e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SystemInit+0x64>)
 8002582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002586:	609a      	str	r2, [r3, #8]
#endif 
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	f8ff0000 	.word	0xf8ff0000
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800259c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800259e:	e003      	b.n	80025a8 <LoopCopyDataInit>

080025a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025a6:	3104      	adds	r1, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025a8:	480a      	ldr	r0, [pc, #40]	; (80025d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025b0:	d3f6      	bcc.n	80025a0 <CopyDataInit>
  ldr r2, =_sbss
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025b4:	e002      	b.n	80025bc <LoopFillZerobss>

080025b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025b8:	f842 3b04 	str.w	r3, [r2], #4

080025bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025c0:	d3f9      	bcc.n	80025b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025c2:	f7ff ffb7 	bl	8002534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c6:	f003 ffb3 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ca:	f7ff fbbf 	bl	8001d4c <main>
  bx lr
 80025ce:	4770      	bx	lr
  ldr r3, =_sidata
 80025d0:	080099bc 	.word	0x080099bc
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80025dc:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80025e0:	20002678 	.word	0x20002678

080025e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC1_2_IRQHandler>
	...

080025e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_Init+0x28>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_Init+0x28>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f000 f82f 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fd3a 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002604:	f7ff fe40 	bl	8002288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffd5 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b08b      	sub	sp, #44	; 0x2c
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002686:	e169      	b.n	800295c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002688:	2201      	movs	r2, #1
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 8158 	bne.w	8002956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a9a      	ldr	r2, [pc, #616]	; (8002914 <HAL_GPIO_Init+0x2a0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d05e      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026b0:	4a98      	ldr	r2, [pc, #608]	; (8002914 <HAL_GPIO_Init+0x2a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d875      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026b6:	4a98      	ldr	r2, [pc, #608]	; (8002918 <HAL_GPIO_Init+0x2a4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d058      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026bc:	4a96      	ldr	r2, [pc, #600]	; (8002918 <HAL_GPIO_Init+0x2a4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d86f      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026c2:	4a96      	ldr	r2, [pc, #600]	; (800291c <HAL_GPIO_Init+0x2a8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d052      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026c8:	4a94      	ldr	r2, [pc, #592]	; (800291c <HAL_GPIO_Init+0x2a8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d869      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026ce:	4a94      	ldr	r2, [pc, #592]	; (8002920 <HAL_GPIO_Init+0x2ac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d04c      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026d4:	4a92      	ldr	r2, [pc, #584]	; (8002920 <HAL_GPIO_Init+0x2ac>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d863      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026da:	4a92      	ldr	r2, [pc, #584]	; (8002924 <HAL_GPIO_Init+0x2b0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d046      	beq.n	800276e <HAL_GPIO_Init+0xfa>
 80026e0:	4a90      	ldr	r2, [pc, #576]	; (8002924 <HAL_GPIO_Init+0x2b0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d85d      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026e6:	2b12      	cmp	r3, #18
 80026e8:	d82a      	bhi.n	8002740 <HAL_GPIO_Init+0xcc>
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d859      	bhi.n	80027a2 <HAL_GPIO_Init+0x12e>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <HAL_GPIO_Init+0x80>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	0800276f 	.word	0x0800276f
 80026f8:	08002749 	.word	0x08002749
 80026fc:	0800275b 	.word	0x0800275b
 8002700:	0800279d 	.word	0x0800279d
 8002704:	080027a3 	.word	0x080027a3
 8002708:	080027a3 	.word	0x080027a3
 800270c:	080027a3 	.word	0x080027a3
 8002710:	080027a3 	.word	0x080027a3
 8002714:	080027a3 	.word	0x080027a3
 8002718:	080027a3 	.word	0x080027a3
 800271c:	080027a3 	.word	0x080027a3
 8002720:	080027a3 	.word	0x080027a3
 8002724:	080027a3 	.word	0x080027a3
 8002728:	080027a3 	.word	0x080027a3
 800272c:	080027a3 	.word	0x080027a3
 8002730:	080027a3 	.word	0x080027a3
 8002734:	080027a3 	.word	0x080027a3
 8002738:	08002751 	.word	0x08002751
 800273c:	08002765 	.word	0x08002765
 8002740:	4a79      	ldr	r2, [pc, #484]	; (8002928 <HAL_GPIO_Init+0x2b4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002746:	e02c      	b.n	80027a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	623b      	str	r3, [r7, #32]
          break;
 800274e:	e029      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	3304      	adds	r3, #4
 8002756:	623b      	str	r3, [r7, #32]
          break;
 8002758:	e024      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	3308      	adds	r3, #8
 8002760:	623b      	str	r3, [r7, #32]
          break;
 8002762:	e01f      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	330c      	adds	r3, #12
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e01a      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002776:	2304      	movs	r3, #4
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e013      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002784:	2308      	movs	r3, #8
 8002786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	611a      	str	r2, [r3, #16]
          break;
 800278e:	e009      	b.n	80027a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002790:	2308      	movs	r3, #8
 8002792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	615a      	str	r2, [r3, #20]
          break;
 800279a:	e003      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
          break;
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x130>
          break;
 80027a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2bff      	cmp	r3, #255	; 0xff
 80027a8:	d801      	bhi.n	80027ae <HAL_GPIO_Init+0x13a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	e001      	b.n	80027b2 <HAL_GPIO_Init+0x13e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2bff      	cmp	r3, #255	; 0xff
 80027b8:	d802      	bhi.n	80027c0 <HAL_GPIO_Init+0x14c>
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x152>
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	3b08      	subs	r3, #8
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	210f      	movs	r1, #15
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	431a      	orrs	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80b1 	beq.w	8002956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_GPIO_Init+0x2b8>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2bc>)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_GPIO_Init+0x2c0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_GPIO_Init+0x1ec>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <HAL_GPIO_Init+0x2c4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_GPIO_Init+0x1e8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3e      	ldr	r2, [pc, #248]	; (800293c <HAL_GPIO_Init+0x2c8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <HAL_GPIO_Init+0x1e4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <HAL_GPIO_Init+0x2cc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_GPIO_Init+0x1e0>
 8002850:	2303      	movs	r3, #3
 8002852:	e006      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 8002854:	2304      	movs	r3, #4
 8002856:	e004      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 8002858:	2302      	movs	r3, #2
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_GPIO_Init+0x1ee>
 8002860:	2300      	movs	r3, #0
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	4093      	lsls	r3, r2
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002872:	492f      	ldr	r1, [pc, #188]	; (8002930 <HAL_GPIO_Init+0x2bc>)
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	492c      	ldr	r1, [pc, #176]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	4928      	ldr	r1, [pc, #160]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4922      	ldr	r1, [pc, #136]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	491e      	ldr	r1, [pc, #120]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4914      	ldr	r1, [pc, #80]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d021      	beq.n	8002948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <HAL_GPIO_Init+0x2d0>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e021      	b.n	8002956 <HAL_GPIO_Init+0x2e2>
 8002912:	bf00      	nop
 8002914:	10320000 	.word	0x10320000
 8002918:	10310000 	.word	0x10310000
 800291c:	10220000 	.word	0x10220000
 8002920:	10210000 	.word	0x10210000
 8002924:	10120000 	.word	0x10120000
 8002928:	10110000 	.word	0x10110000
 800292c:	40021000 	.word	0x40021000
 8002930:	40010000 	.word	0x40010000
 8002934:	40010800 	.word	0x40010800
 8002938:	40010c00 	.word	0x40010c00
 800293c:	40011000 	.word	0x40011000
 8002940:	40011400 	.word	0x40011400
 8002944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_GPIO_Init+0x304>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	43db      	mvns	r3, r3
 8002950:	4909      	ldr	r1, [pc, #36]	; (8002978 <HAL_GPIO_Init+0x304>)
 8002952:	4013      	ands	r3, r2
 8002954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	3301      	adds	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f ae8e 	bne.w	8002688 <HAL_GPIO_Init+0x14>
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	372c      	adds	r7, #44	; 0x2c
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40010400 	.word	0x40010400

0800297c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	807b      	strh	r3, [r7, #2]
 80029b6:	4613      	mov	r3, r2
 80029b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ba:	787b      	ldrb	r3, [r7, #1]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c0:	887a      	ldrh	r2, [r7, #2]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029c6:	e003      	b.n	80029d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	041a      	lsls	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	041a      	lsls	r2, r3, #16
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	400b      	ands	r3, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e26c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2c:	4b92      	ldr	r3, [pc, #584]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a38:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d112      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e>
 8002a44:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d10b      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x12c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d168      	bne.n	8002b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e246      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x76>
 8002a74:	4b80      	ldr	r3, [pc, #512]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7f      	ldr	r2, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e02e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x98>
 8002a8a:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xbc>
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a71      	ldr	r2, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a67      	ldr	r2, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fad0 	bl	800208c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7ff facc 	bl	800208c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1fa      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b5d      	ldr	r3, [pc, #372]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe4>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff fabc 	bl	800208c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7ff fab8 	bl	800208c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1e6      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x10c>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d063      	beq.n	8002c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x18c>
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1ba      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	e03a      	b.n	8002c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x270>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fa71 	bl	800208c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7ff fa6d 	bl	800208c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e19b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x270>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7ff fa50 	bl	800208c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7ff fa4c 	bl	800208c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e17a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03a      	beq.n	8002c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7ff fa30 	bl	800208c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7ff fa2c 	bl	800208c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e15a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f000 fab0 	bl	80031b4 <RCC_Delay>
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7ff fa16 	bl	800208c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c62:	e00f      	b.n	8002c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7ff fa12 	bl	800208c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d908      	bls.n	8002c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e140      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	42420000 	.word	0x42420000
 8002c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e9      	bne.n	8002c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a6 	beq.w	8002dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b97      	ldr	r3, [pc, #604]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4a93      	ldr	r2, [pc, #588]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	61d3      	str	r3, [r2, #28]
 8002cba:	4b91      	ldr	r3, [pc, #580]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a8a      	ldr	r2, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f9d3 	bl	800208c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7ff f9cf 	bl	800208c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0fd      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x312>
 8002d10:	4b7b      	ldr	r3, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a7a      	ldr	r2, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a72      	ldr	r2, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x356>
 8002d48:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7ff f983 	bl	800208c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7ff f97f 	bl	800208c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0ab      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x37e>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff f96d 	bl	800208c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff f969 	bl	800208c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e095      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a47      	ldr	r2, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8081 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d061      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d146      	bne.n	8002e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x4fc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7ff f93d 	bl	800208c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7ff f939 	bl	800208c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e067      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d108      	bne.n	8002e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	492d      	ldr	r1, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a19      	ldr	r1, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	430b      	orrs	r3, r1
 8002e62:	4927      	ldr	r1, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x4fc>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff f90d 	bl	800208c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7ff f909 	bl	800208c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e037      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x46a>
 8002e94:	e02f      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_RCC_OscConfig+0x4fc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f8f6 	bl	800208c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7ff f8f2 	bl	800208c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e020      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x498>
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e013      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42420060 	.word	0x42420060

08002f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4965      	ldr	r1, [pc, #404]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7ff f846 	bl	800208c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7ff f842 	bl	800208c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490a      	ldr	r1, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe ffdc 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	0800944c 	.word	0x0800944c
 80030d8:	2000000c 	.word	0x2000000c
 80030dc:	20000010 	.word	0x20000010

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b490      	push	{r4, r7}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030e6:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030e8:	1d3c      	adds	r4, r7, #4
 80030ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030f0:	f240 2301 	movw	r3, #513	; 0x201
 80030f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d002      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x40>
 800311a:	2b08      	cmp	r3, #8
 800311c:	d003      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x46>
 800311e:	e02d      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	623b      	str	r3, [r7, #32]
      break;
 8003124:	e02d      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	0c9b      	lsrs	r3, r3, #18
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003132:	4413      	add	r3, r2
 8003134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c5b      	lsrs	r3, r3, #17
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003152:	4413      	add	r3, r2
 8003154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800315e:	fb02 f203 	mul.w	r2, r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	623b      	str	r3, [r7, #32]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317e:	623b      	str	r3, [r7, #32]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6a3b      	ldr	r3, [r7, #32]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc90      	pop	{r4, r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	080093a4 	.word	0x080093a4
 8003194:	40021000 	.word	0x40021000
 8003198:	007a1200 	.word	0x007a1200
 800319c:	003d0900 	.word	0x003d0900

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	2000000c 	.word	0x2000000c

080031b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <RCC_Delay+0x34>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <RCC_Delay+0x38>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0a5b      	lsrs	r3, r3, #9
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d0:	bf00      	nop
  }
  while (Delay --);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	60fa      	str	r2, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f9      	bne.n	80031d0 <RCC_Delay+0x1c>
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	2000000c 	.word	0x2000000c
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e041      	b.n	8003286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff f868 	bl	80022ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f000 fb0e 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e041      	b.n	8003324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f839 	bl	800332c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f000 fabf 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
	...

08003340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_TIM_PWM_Start+0x24>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e022      	b.n	80033aa <HAL_TIM_PWM_Start+0x6a>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b04      	cmp	r3, #4
 8003368:	d109      	bne.n	800337e <HAL_TIM_PWM_Start+0x3e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e015      	b.n	80033aa <HAL_TIM_PWM_Start+0x6a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d109      	bne.n	8003398 <HAL_TIM_PWM_Start+0x58>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e008      	b.n	80033aa <HAL_TIM_PWM_Start+0x6a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e05e      	b.n	8003470 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x82>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	e013      	b.n	80033ea <HAL_TIM_PWM_Start+0xaa>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0x92>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d0:	e00b      	b.n	80033ea <HAL_TIM_PWM_Start+0xaa>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0xa2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e0:	e003      	b.n	80033ea <HAL_TIM_PWM_Start+0xaa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fcac 	bl	8003d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_TIM_PWM_Start+0x138>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d107      	bne.n	8003412 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_TIM_PWM_Start+0x138>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIM_PWM_Start+0xfa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d009      	beq.n	800343a <HAL_TIM_PWM_Start+0xfa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <HAL_TIM_PWM_Start+0x13c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIM_PWM_Start+0xfa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_TIM_PWM_Start+0x140>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d010      	beq.n	800346e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	e007      	b.n	800346e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fc5a 	bl	8003d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <HAL_TIM_PWM_Stop+0xc4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d117      	bne.n	80034d6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10f      	bne.n	80034d6 <HAL_TIM_PWM_Stop+0x52>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	f240 4344 	movw	r3, #1092	; 0x444
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_TIM_PWM_Stop+0x52>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <HAL_TIM_PWM_Stop+0x82>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a1a      	ldr	r2, [r3, #32]
 80034ec:	f240 4344 	movw	r3, #1092	; 0x444
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_TIM_PWM_Stop+0x82>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Stop+0x92>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Stop+0xba>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Stop+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	e00b      	b.n	800353e <HAL_TIM_PWM_Stop+0xba>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Stop+0xb2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	e003      	b.n	800353e <HAL_TIM_PWM_Stop+0xba>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40012c00 	.word	0x40012c00

0800354c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003562:	2302      	movs	r3, #2
 8003564:	e0ac      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	f200 809f 	bhi.w	80036b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080036b5 	.word	0x080036b5
 8003584:	080036b5 	.word	0x080036b5
 8003588:	080036b5 	.word	0x080036b5
 800358c:	080035f1 	.word	0x080035f1
 8003590:	080036b5 	.word	0x080036b5
 8003594:	080036b5 	.word	0x080036b5
 8003598:	080036b5 	.word	0x080036b5
 800359c:	08003633 	.word	0x08003633
 80035a0:	080036b5 	.word	0x080036b5
 80035a4:	080036b5 	.word	0x080036b5
 80035a8:	080036b5 	.word	0x080036b5
 80035ac:	08003673 	.word	0x08003673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f9ac 	bl	8003914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0208 	orr.w	r2, r2, #8
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	619a      	str	r2, [r3, #24]
      break;
 80035ee:	e062      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f9f2 	bl	80039e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6999      	ldr	r1, [r3, #24]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	021a      	lsls	r2, r3, #8
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	619a      	str	r2, [r3, #24]
      break;
 8003630:	e041      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fa3b 	bl	8003ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0208 	orr.w	r2, r2, #8
 800364c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0204 	bic.w	r2, r2, #4
 800365c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	61da      	str	r2, [r3, #28]
      break;
 8003670:	e021      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fa85 	bl	8003b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69d9      	ldr	r1, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0b3      	b.n	8003848 <HAL_TIM_ConfigClockSource+0x180>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003706:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003718:	d03e      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xd0>
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	f200 8087 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	f000 8085 	beq.w	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	d87f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d01a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xa2>
 8003734:	2b70      	cmp	r3, #112	; 0x70
 8003736:	d87b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d050      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x116>
 800373c:	2b60      	cmp	r3, #96	; 0x60
 800373e:	d877      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d03c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xf6>
 8003744:	2b50      	cmp	r3, #80	; 0x50
 8003746:	d873      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d058      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x136>
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d86f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d064      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 8003754:	2b30      	cmp	r3, #48	; 0x30
 8003756:	d86b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d060      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d867      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d05a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003768:	e062      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f000 faca 	bl	8003d12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800378c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e04e      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f000 fab3 	bl	8003d12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ba:	609a      	str	r2, [r3, #8]
      break;
 80037bc:	e03b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 fa2a 	bl	8003c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2150      	movs	r1, #80	; 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fa81 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 80037dc:	e02b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fa48 	bl	8003c80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2160      	movs	r1, #96	; 0x60
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fa71 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 80037fc:	e01b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fa0a 	bl	8003c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fa61 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 800381c:	e00b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 fa58 	bl	8003cde <TIM_ITRx_SetConfig>
        break;
 800382e:	e002      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a29      	ldr	r2, [pc, #164]	; (8003908 <TIM_Base_SetConfig+0xb8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00b      	beq.n	8003880 <TIM_Base_SetConfig+0x30>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d007      	beq.n	8003880 <TIM_Base_SetConfig+0x30>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <TIM_Base_SetConfig+0xbc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_Base_SetConfig+0x30>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <TIM_Base_SetConfig+0xc0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d108      	bne.n	8003892 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <TIM_Base_SetConfig+0xb8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0x62>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <TIM_Base_SetConfig+0xbc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0x62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <TIM_Base_SetConfig+0xc0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a07      	ldr	r2, [pc, #28]	; (8003908 <TIM_Base_SetConfig+0xb8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d103      	bne.n	80038f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	615a      	str	r2, [r3, #20]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800

08003914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0201 	bic.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 0302 	bic.w	r3, r3, #2
 800395c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <TIM_OC1_SetConfig+0xc8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d10c      	bne.n	800398a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0308 	bic.w	r3, r3, #8
 8003976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <TIM_OC1_SetConfig+0xc8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d111      	bne.n	80039b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00

080039e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0210 	bic.w	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0320 	bic.w	r3, r3, #32
 8003a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <TIM_OC2_SetConfig+0xd0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10d      	bne.n	8003a5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <TIM_OC2_SetConfig+0xd0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d113      	bne.n	8003a8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00

08003ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <TIM_OC3_SetConfig+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10d      	bne.n	8003b2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <TIM_OC3_SetConfig+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d113      	bne.n	8003b5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00

08003b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	031b      	lsls	r3, r3, #12
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <TIM_OC4_SetConfig+0x98>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d109      	bne.n	8003bfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00

08003c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 030a 	bic.w	r3, r3, #10
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f023 0210 	bic.w	r2, r3, #16
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003caa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	031b      	lsls	r3, r3, #12
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f043 0307 	orr.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	609a      	str	r2, [r3, #8]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2201      	movs	r2, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e046      	b.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10c      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800

08003e54 <CPU_IntSrcPrioSet>:
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio,
                         CPU_INT08U  type)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	71bb      	strb	r3, [r7, #6]
 8003e62:	4613      	mov	r3, r2
 8003e64:	717b      	strb	r3, [r7, #5]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT16U  pos_max;
    CPU_INT32U  temp;
    CPU_INT32U  prio_offset;
    CPU_SR_ALLOC();
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]


    prio_offset = (prio << (DEF_OCTET_NBR_BITS - CPU_CFG_NVIC_PRIO_BITS));
 8003e6a:	79bb      	ldrb	r3, [r7, #6]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	613b      	str	r3, [r7, #16]
    switch (pos) {
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	f200 80c3 	bhi.w	8003ffe <CPU_IntSrcPrioSet+0x1aa>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <CPU_IntSrcPrioSet+0x2c>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	080040af 	.word	0x080040af
 8003e84:	080040af 	.word	0x080040af
 8003e88:	080040af 	.word	0x080040af
 8003e8c:	080040af 	.word	0x080040af
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003f1b 	.word	0x08003f1b
 8003e9c:	080040af 	.word	0x080040af
 8003ea0:	080040af 	.word	0x080040af
 8003ea4:	080040af 	.word	0x080040af
 8003ea8:	080040af 	.word	0x080040af
 8003eac:	08003f49 	.word	0x08003f49
 8003eb0:	08003f77 	.word	0x08003f77
 8003eb4:	080040af 	.word	0x080040af
 8003eb8:	08003fa3 	.word	0x08003fa3
 8003ebc:	08003fd1 	.word	0x08003fd1
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8003ec0:	2040      	movs	r0, #64	; 0x40
 8003ec2:	f7fc f949 	bl	8000158 <CPU_SR_Save>
 8003ec6:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8003ec8:	4b7c      	ldr	r3, [pc, #496]	; (80040bc <CPU_IntSrcPrioSet+0x268>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ed4:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8003ede:	4a77      	ldr	r2, [pc, #476]	; (80040bc <CPU_IntSrcPrioSet+0x268>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003ee4:	6978      	ldr	r0, [r7, #20]
 8003ee6:	f7fc f945 	bl	8000174 <CPU_SR_Restore>
             break;
 8003eea:	e0e3      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8003eec:	2040      	movs	r0, #64	; 0x40
 8003eee:	f7fc f933 	bl	8000158 <CPU_SR_Save>
 8003ef2:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8003ef4:	4b71      	ldr	r3, [pc, #452]	; (80040bc <CPU_IntSrcPrioSet+0x268>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f00:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (1 * DEF_OCTET_NBR_BITS));
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8003f0c:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <CPU_IntSrcPrioSet+0x268>)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7fc f92e 	bl	8000174 <CPU_SR_Restore>
             break;
 8003f18:	e0cc      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8003f1a:	2040      	movs	r0, #64	; 0x40
 8003f1c:	f7fc f91c 	bl	8000158 <CPU_SR_Save>
 8003f20:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8003f22:	4b66      	ldr	r3, [pc, #408]	; (80040bc <CPU_IntSrcPrioSet+0x268>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8003f3a:	4a60      	ldr	r2, [pc, #384]	; (80040bc <CPU_IntSrcPrioSet+0x268>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7fc f917 	bl	8000174 <CPU_SR_Restore>
             break;
 8003f46:	e0b5      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
 8003f48:	2040      	movs	r0, #64	; 0x40
 8003f4a:	f7fc f905 	bl	8000158 <CPU_SR_Save>
 8003f4e:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI2;
 8003f50:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <CPU_IntSrcPrioSet+0x26c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f5c:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI2   = temp;
 8003f68:	4a55      	ldr	r2, [pc, #340]	; (80040c0 <CPU_IntSrcPrioSet+0x26c>)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f7fc f900 	bl	8000174 <CPU_SR_Restore>
             break;
 8003f74:	e09e      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
 8003f76:	2040      	movs	r0, #64	; 0x40
 8003f78:	f7fc f8ee 	bl	8000158 <CPU_SR_Save>
 8003f7c:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8003f7e:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <CPU_IntSrcPrioSet+0x270>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f8a:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8003f94:	4a4b      	ldr	r2, [pc, #300]	; (80040c4 <CPU_IntSrcPrioSet+0x270>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f7fc f8ea 	bl	8000174 <CPU_SR_Restore>
             break;
 8003fa0:	e088      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
 8003fa2:	2040      	movs	r0, #64	; 0x40
 8003fa4:	f7fc f8d8 	bl	8000158 <CPU_SR_Save>
 8003fa8:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8003faa:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <CPU_IntSrcPrioSet+0x270>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003fb6:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8003fc2:	4a40      	ldr	r2, [pc, #256]	; (80040c4 <CPU_IntSrcPrioSet+0x270>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f7fc f8d3 	bl	8000174 <CPU_SR_Restore>
             break;
 8003fce:	e071      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8003fd0:	2040      	movs	r0, #64	; 0x40
 8003fd2:	f7fc f8c1 	bl	8000158 <CPU_SR_Save>
 8003fd6:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8003fd8:	4b3a      	ldr	r3, [pc, #232]	; (80040c4 <CPU_IntSrcPrioSet+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fe4:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8003ff0:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <CPU_IntSrcPrioSet+0x270>)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f7fc f8bc 	bl	8000174 <CPU_SR_Restore>
             break;
 8003ffc:	e05a      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
             pos_max = CPU_INT_SRC_POS_MAX;
 8003ffe:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <CPU_IntSrcPrioSet+0x274>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3301      	adds	r3, #1
 8004008:	b29b      	uxth	r3, r3
 800400a:	015b      	lsls	r3, r3, #5
 800400c:	b29b      	uxth	r3, r3
 800400e:	3310      	adds	r3, #16
 8004010:	817b      	strh	r3, [r7, #10]
             if (pos < pos_max) {                               /* See Note #3.                                         */
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	b29b      	uxth	r3, r3
 8004016:	897a      	ldrh	r2, [r7, #10]
 8004018:	429a      	cmp	r2, r3
 800401a:	d94a      	bls.n	80040b2 <CPU_IntSrcPrioSet+0x25e>

                 if (type == CPU_INT_NKA) {                     /* Check if NKA priority goes beyond KA boundary        */
 800401c:	797b      	ldrb	r3, [r7, #5]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <CPU_IntSrcPrioSet+0x1da>
                     if (prio >= CPU_CFG_KA_IPL_BOUNDARY) {     /* Priority must be < CPU_CFG_KA_IPL_BOUNDARY           */
 8004022:	79bb      	ldrb	r3, [r7, #6]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d907      	bls.n	8004038 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8004028:	f000 f850 	bl	80040cc <CPU_SW_Exception>
 800402c:	e004      	b.n	8004038 <CPU_IntSrcPrioSet+0x1e4>
                     }

                 } else {                                       /* Check if KA priority is less than KA boundary        */
                     if (prio < CPU_CFG_KA_IPL_BOUNDARY) {      /* Priority must be >= CPU_CFG_KA_IPL_BOUNDARY          */
 800402e:	79bb      	ldrb	r3, [r7, #6]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d801      	bhi.n	8004038 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8004034:	f000 f84a 	bl	80040cc <CPU_SW_Exception>
                     }
                 }

                 group                    = (pos - 16) / 4;
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	3b10      	subs	r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	da00      	bge.n	8004042 <CPU_IntSrcPrioSet+0x1ee>
 8004040:	3303      	adds	r3, #3
 8004042:	109b      	asrs	r3, r3, #2
 8004044:	727b      	strb	r3, [r7, #9]
                 nbr                      = (pos - 16) % 4;
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	3b10      	subs	r3, #16
 800404a:	425a      	negs	r2, r3
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	f002 0203 	and.w	r2, r2, #3
 8004054:	bf58      	it	pl
 8004056:	4253      	negpl	r3, r2
 8004058:	723b      	strb	r3, [r7, #8]

                 CPU_CRITICAL_ENTER();
 800405a:	2040      	movs	r0, #64	; 0x40
 800405c:	f7fc f87c 	bl	8000158 <CPU_SR_Save>
 8004060:	6178      	str	r0, [r7, #20]
                 temp                     = CPU_REG_NVIC_IPR(group);
 8004062:	7a7b      	ldrb	r3, [r7, #9]
 8004064:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8004068:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~((CPU_INT32U)DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
 8004072:	7a3b      	ldrb	r3, [r7, #8]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
                 temp                    |=  ((CPU_INT32U)prio_offset    << (nbr * DEF_OCTET_NBR_BITS));
 8004084:	7a3b      	ldrb	r3, [r7, #8]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_IPR(group)  = temp;               /* Set interrupt priority.                              */
 8004094:	7a7b      	ldrb	r3, [r7, #9]
 8004096:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 800409a:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	461a      	mov	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6013      	str	r3, [r2, #0]
                 CPU_CRITICAL_EXIT();
 80040a6:	6978      	ldr	r0, [r7, #20]
 80040a8:	f7fc f864 	bl	8000174 <CPU_SR_Restore>
             }
             break;
 80040ac:	e001      	b.n	80040b2 <CPU_IntSrcPrioSet+0x25e>
             break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <CPU_IntSrcPrioSet+0x260>
             break;
 80040b2:	bf00      	nop
    }
}
 80040b4:	bf00      	nop
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed18 	.word	0xe000ed18
 80040c0:	e000ed1c 	.word	0xe000ed1c
 80040c4:	e000ed20 	.word	0xe000ed20
 80040c8:	e000e004 	.word	0xe000e004

080040cc <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
    for (;;) {
 80040d0:	e7fe      	b.n	80040d0 <CPU_SW_Exception+0x4>
	...

080040d4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 80040da:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <OSDebugInit+0xf4>)
 80040dc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 80040de:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <OSDebugInit+0xf8>)
 80040e0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <OSDebugInit+0xfc>)
 80040e4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 80040e6:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <OSDebugInit+0x100>)
 80040e8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <OSDebugInit+0x104>)
 80040ec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <OSDebugInit+0x108>)
 80040f0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <OSDebugInit+0x10c>)
 80040f4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 80040f6:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <OSDebugInit+0x110>)
 80040f8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <OSDebugInit+0x114>)
 80040fc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <OSDebugInit+0x118>)
 8004100:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <OSDebugInit+0x11c>)
 8004104:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8004106:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <OSDebugInit+0x120>)
 8004108:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <OSDebugInit+0x124>)
 800410c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <OSDebugInit+0x128>)
 8004110:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <OSDebugInit+0x12c>)
 8004114:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <OSDebugInit+0x130>)
 8004118:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <OSDebugInit+0x134>)
 800411c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 800411e:	4b3b      	ldr	r3, [pc, #236]	; (800420c <OSDebugInit+0x138>)
 8004120:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8004122:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <OSDebugInit+0x13c>)
 8004124:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8004126:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <OSDebugInit+0x140>)
 8004128:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <OSDebugInit+0x144>)
 800412c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 800412e:	4b3b      	ldr	r3, [pc, #236]	; (800421c <OSDebugInit+0x148>)
 8004130:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <OSDebugInit+0x14c>)
 8004134:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <OSDebugInit+0x150>)
 8004138:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <OSDebugInit+0x154>)
 800413c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <OSDebugInit+0x158>)
 8004140:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <OSDebugInit+0x15c>)
 8004144:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <OSDebugInit+0x160>)
 8004148:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 800414a:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <OSDebugInit+0x164>)
 800414c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <OSDebugInit+0x168>)
 8004150:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <OSDebugInit+0x16c>)
 8004154:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <OSDebugInit+0x170>)
 8004158:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <OSDebugInit+0x174>)
 800415c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <OSDebugInit+0x178>)
 8004160:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8004162:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <OSDebugInit+0x17c>)
 8004164:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8004166:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <OSDebugInit+0x180>)
 8004168:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <OSDebugInit+0x184>)
 800416c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <OSDebugInit+0x188>)
 8004170:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <OSDebugInit+0x18c>)
 8004174:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <OSDebugInit+0x190>)
 8004178:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <OSDebugInit+0x194>)
 800417c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 800417e:	4b3b      	ldr	r3, [pc, #236]	; (800426c <OSDebugInit+0x198>)
 8004180:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8004182:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <OSDebugInit+0x19c>)
 8004184:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <OSDebugInit+0x1a0>)
 8004188:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <OSDebugInit+0x1a4>)
 800418c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <OSDebugInit+0x1a8>)
 8004190:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <OSDebugInit+0x1ac>)
 8004194:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <OSDebugInit+0x1b0>)
 8004198:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <OSDebugInit+0x1b4>)
 800419c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <OSDebugInit+0x1b8>)
 80041a0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 80041a2:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <OSDebugInit+0x1bc>)
 80041a4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 80041a6:	4b3b      	ldr	r3, [pc, #236]	; (8004294 <OSDebugInit+0x1c0>)
 80041a8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <OSDebugInit+0x1c4>)
 80041ac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <OSDebugInit+0x1c8>)
 80041b0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <OSDebugInit+0x1cc>)
 80041b4:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <OSDebugInit+0x1d0>)
 80041b8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 80041ba:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <OSDebugInit+0x1d4>)
 80041bc:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	0800945c 	.word	0x0800945c
 80041cc:	08009460 	.word	0x08009460
 80041d0:	08009466 	.word	0x08009466
 80041d4:	08009468 	.word	0x08009468
 80041d8:	08009464 	.word	0x08009464
 80041dc:	0800946a 	.word	0x0800946a
 80041e0:	0800946c 	.word	0x0800946c
 80041e4:	0800946e 	.word	0x0800946e
 80041e8:	08009470 	.word	0x08009470
 80041ec:	08009472 	.word	0x08009472
 80041f0:	08009474 	.word	0x08009474
 80041f4:	08009476 	.word	0x08009476
 80041f8:	08009478 	.word	0x08009478
 80041fc:	0800947a 	.word	0x0800947a
 8004200:	0800947c 	.word	0x0800947c
 8004204:	0800947e 	.word	0x0800947e
 8004208:	08009480 	.word	0x08009480
 800420c:	08009482 	.word	0x08009482
 8004210:	08009484 	.word	0x08009484
 8004214:	08009486 	.word	0x08009486
 8004218:	08009488 	.word	0x08009488
 800421c:	0800948a 	.word	0x0800948a
 8004220:	0800948c 	.word	0x0800948c
 8004224:	0800948e 	.word	0x0800948e
 8004228:	08009490 	.word	0x08009490
 800422c:	08009492 	.word	0x08009492
 8004230:	08009494 	.word	0x08009494
 8004234:	08009496 	.word	0x08009496
 8004238:	08009498 	.word	0x08009498
 800423c:	0800949a 	.word	0x0800949a
 8004240:	0800949c 	.word	0x0800949c
 8004244:	0800949e 	.word	0x0800949e
 8004248:	080094a0 	.word	0x080094a0
 800424c:	080094a2 	.word	0x080094a2
 8004250:	080094a4 	.word	0x080094a4
 8004254:	080094a6 	.word	0x080094a6
 8004258:	080094a8 	.word	0x080094a8
 800425c:	080094aa 	.word	0x080094aa
 8004260:	080094ac 	.word	0x080094ac
 8004264:	080094ae 	.word	0x080094ae
 8004268:	080094b0 	.word	0x080094b0
 800426c:	080094b2 	.word	0x080094b2
 8004270:	080094b4 	.word	0x080094b4
 8004274:	080094b6 	.word	0x080094b6
 8004278:	20001334 	.word	0x20001334
 800427c:	20001298 	.word	0x20001298
 8004280:	080094ba 	.word	0x080094ba
 8004284:	080094bc 	.word	0x080094bc
 8004288:	080094be 	.word	0x080094be
 800428c:	080094c0 	.word	0x080094c0
 8004290:	080094c2 	.word	0x080094c2
 8004294:	080094c4 	.word	0x080094c4
 8004298:	080094c6 	.word	0x080094c6
 800429c:	080094c8 	.word	0x080094c8
 80042a0:	080094ca 	.word	0x080094ca
 80042a4:	080094b8 	.word	0x080094b8
 80042a8:	080094cc 	.word	0x080094cc

080042ac <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <OSInitHookBegin+0x54>)
 80042b4:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 80042b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ba:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 80042bc:	e007      	b.n	80042ce <OSInitHookBegin+0x22>
        size--;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	603a      	str	r2, [r7, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f4      	bne.n	80042be <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <OSInitHookBegin+0x58>)
 80042d6:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <OSInitHookBegin+0x5c>)
 80042d8:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <OSInitHookBegin+0x58>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <OSInitHookBegin+0x58>)
 80042e6:	601a      	str	r2, [r3, #0]
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <OSInitHookBegin+0x60>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <OSInitHookBegin+0x64>)
 80042f0:	2240      	movs	r2, #64	; 0x40
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000e94 	.word	0x20000e94
 8004304:	20000e8c 	.word	0x20000e8c
 8004308:	20001294 	.word	0x20001294
 800430c:	20000e0c 	.word	0x20000e0c
 8004310:	20000e90 	.word	0x20000e90

08004314 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0

}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f002 f8bf 	bl	80064ac <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f002 f8bd 	bl	80064be <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8004350:	f002 f8be 	bl	80064d0 <App_TaskIdleHook>
#endif
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}

08004358 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f002 f8c1 	bl	80064e8 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 8004372:	f002 f8b3 	bl	80064dc <App_TaskStatHook>
#endif
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b04      	subs	r3, #4
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043a4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	4a34      	ldr	r2, [pc, #208]	; (800448c <OSTaskStkInit+0x110>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80043ca:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b04      	subs	r3, #4
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80043d8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3b04      	subs	r3, #4
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80043e6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3b04      	subs	r3, #4
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80043f4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3b04      	subs	r3, #4
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	3b04      	subs	r3, #4
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	601a      	str	r2, [r3, #0]
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3b04      	subs	r3, #4
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800441c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3b04      	subs	r3, #4
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800442a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3b04      	subs	r3, #4
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8004438:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3b04      	subs	r3, #4
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8004446:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3b04      	subs	r3, #4
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8004454:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3b04      	subs	r3, #4
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8004462:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3b04      	subs	r3, #4
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8004470:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	3b04      	subs	r3, #4
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800447e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
#endif

    return (p_stk);
 8004480:	697b      	ldr	r3, [r7, #20]
}
 8004482:	4618      	mov	r0, r3
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	08005df1 	.word	0x08005df1

08004490 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8004494:	f002 f831 	bl	80064fa <App_TaskSwHook>
    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
#endif
}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}

0800449c <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f002 f82e 	bl	8006506 <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 80044b8:	f002 f82e 	bl	8006518 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <OSTimeTickHook+0x2c>)
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <OSTimeTickHook+0x2c>)
 80044c6:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <OSTimeTickHook+0x2c>)
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2b63      	cmp	r3, #99	; 0x63
 80044ce:	d904      	bls.n	80044da <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <OSTimeTickHook+0x2c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 80044d6:	f001 fe07 	bl	80060e8 <OSTmrSignal>
    }
#endif
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000e0c 	.word	0x20000e0c

080044e4 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 80044ea:	2040      	movs	r0, #64	; 0x40
 80044ec:	f7fb fe5a 	bl	80001a4 <OS_CPU_SR_Save>
 80044f0:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 80044f2:	f000 f8a7 	bl	8004644 <OSIntEnter>
    OS_EXIT_CRITICAL();
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fb fe62 	bl	80001c0 <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 80044fc:	f000 f9c4 	bl	8004888 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8004500:	f000 f8b8 	bl	8004674 <OSIntExit>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a06      	ldr	r2, [pc, #24]	; (8004530 <OS_CPU_SysTickInitFreq+0x24>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f807 	bl	8004534 <OS_CPU_SysTickInit>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	10624dd3 	.word	0x10624dd3

08004534 <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 800453c:	2340      	movs	r3, #64	; 0x40
 800453e:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 8004540:	4a11      	ldr	r2, [pc, #68]	; (8004588 <OS_CPU_SysTickInit+0x54>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3b01      	subs	r3, #1
 8004546:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <OS_CPU_SysTickInit+0x58>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004554:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <OS_CPU_SysTickInit+0x58>)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <OS_CPU_SysTickInit+0x5c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <OS_CPU_SysTickInit+0x5c>)
 800456c:	f043 0305 	orr.w	r3, r3, #5
 8004570:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <OS_CPU_SysTickInit+0x5c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a06      	ldr	r2, [pc, #24]	; (8004590 <OS_CPU_SysTickInit+0x5c>)
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	e000e014 	.word	0xe000e014
 800458c:	e000ed20 	.word	0xe000ed20
 8004590:	e000e010 	.word	0xe000e010

08004594 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2204      	movs	r2, #4
 80045ae:	701a      	strb	r2, [r3, #0]
        return;
 80045b0:	e025      	b.n	80045fe <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	220c      	movs	r2, #12
 80045bc:	701a      	strb	r2, [r3, #0]
        return;
 80045be:	e01e      	b.n	80045fe <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80045c0:	4b10      	ldr	r3, [pc, #64]	; (8004604 <OSEventNameSet+0x70>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2212      	movs	r2, #18
 80045cc:	701a      	strb	r2, [r3, #0]
        return;
 80045ce:	e016      	b.n	80045fe <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d903      	bls.n	80045e2 <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
             return;
 80045e0:	e00d      	b.n	80045fe <OSEventNameSet+0x6a>
             break;
 80045e2:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 80045e4:	2040      	movs	r0, #64	; 0x40
 80045e6:	f7fb fddd 	bl	80001a4 <OS_CPU_SR_Save>
 80045ea:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7fb fde4 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
}
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20001ac8 	.word	0x20001ac8

08004608 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 800460c:	f7ff fe4e 	bl	80042ac <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8004610:	f000 fb84 	bl	8004d1c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8004614:	f000 fbc0 	bl	8004d98 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8004618:	f000 fc3a 	bl	8004e90 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 800461c:	f000 fb34 	bl	8004c88 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8004620:	f000 feba 	bl	8005398 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8004624:	f000 ff28 	bl	8005478 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8004628:	f000 ff66 	bl	80054f8 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 800462c:	f000 fbe4 	bl	8004df8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8004630:	f000 fc08 	bl	8004e44 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8004634:	f001 fd6a 	bl	800610c <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8004638:	f7ff fe6c 	bl	8004314 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 800463c:	f7ff fd4a 	bl	80040d4 <OSDebugInit>
#endif
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}

08004644 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <OSIntEnter+0x28>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d109      	bne.n	8004664 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <OSIntEnter+0x2c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2bff      	cmp	r3, #255	; 0xff
 8004656:	d005      	beq.n	8004664 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <OSIntEnter+0x2c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <OSIntEnter+0x2c>)
 8004662:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	200012d9 	.word	0x200012d9
 8004670:	20001ac8 	.word	0x20001ac8

08004674 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 800467e:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <OSIntExit+0x84>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d134      	bne.n	80046f0 <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8004686:	2040      	movs	r0, #64	; 0x40
 8004688:	f7fb fd8c 	bl	80001a4 <OS_CPU_SR_Save>
 800468c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <OSIntExit+0x88>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <OSIntExit+0x2e>
            OSIntNesting--;
 8004696:	4b19      	ldr	r3, [pc, #100]	; (80046fc <OSIntExit+0x88>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	3b01      	subs	r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4b17      	ldr	r3, [pc, #92]	; (80046fc <OSIntExit+0x88>)
 80046a0:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 80046a2:	4b16      	ldr	r3, [pc, #88]	; (80046fc <OSIntExit+0x88>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11f      	bne.n	80046ea <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <OSIntExit+0x8c>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11b      	bne.n	80046ea <OSIntExit+0x76>
                OS_SchedNew();
 80046b2:	f000 fc95 	bl	8004fe0 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <OSIntExit+0x90>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <OSIntExit+0x94>)
 80046be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <OSIntExit+0x98>)
 80046c4:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <OSIntExit+0x90>)
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <OSIntExit+0x9c>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d00b      	beq.n	80046ea <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 80046d2:	4b0e      	ldr	r3, [pc, #56]	; (800470c <OSIntExit+0x98>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d8:	3201      	adds	r2, #1
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <OSIntExit+0xa0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <OSIntExit+0xa0>)
 80046e4:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 80046e6:	f7fb fdb4 	bl	8000252 <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fb fd68 	bl	80001c0 <OS_CPU_SR_Restore>
    }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	200012d9 	.word	0x200012d9
 80046fc:	20001ac8 	.word	0x20001ac8
 8004700:	200012d0 	.word	0x200012d0
 8004704:	200012e2 	.word	0x200012e2
 8004708:	20002564 	.word	0x20002564
 800470c:	200018b0 	.word	0x200018b0
 8004710:	200015b4 	.word	0x200015b4
 8004714:	20001838 	.word	0x20001838

08004718 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <OSSchedLock+0x44>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d114      	bne.n	8004754 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 800472a:	2040      	movs	r0, #64	; 0x40
 800472c:	f7fb fd3a 	bl	80001a4 <OS_CPU_SR_Save>
 8004730:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <OSSchedLock+0x48>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <OSSchedLock+0x4c>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2bff      	cmp	r3, #255	; 0xff
 8004740:	d005      	beq.n	800474e <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <OSSchedLock+0x4c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	b2da      	uxtb	r2, r3
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <OSSchedLock+0x4c>)
 800474c:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fb fd36 	bl	80001c0 <OS_CPU_SR_Restore>
    }
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200012d9 	.word	0x200012d9
 8004760:	20001ac8 	.word	0x20001ac8
 8004764:	200012d0 	.word	0x200012d0

08004768 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <OSSchedUnlock+0x68>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d126      	bne.n	80047c8 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 800477a:	2040      	movs	r0, #64	; 0x40
 800477c:	f7fb fd12 	bl	80001a4 <OS_CPU_SR_Save>
 8004780:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <OSSchedUnlock+0x6c>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11b      	bne.n	80047c2 <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <OSSchedUnlock+0x70>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <OSSchedUnlock+0x70>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	3b01      	subs	r3, #1
 8004798:	b2da      	uxtb	r2, r3
 800479a:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <OSSchedUnlock+0x70>)
 800479c:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <OSSchedUnlock+0x70>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fb fd0a 	bl	80001c0 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 80047ac:	f000 fbd6 	bl	8004f5c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 80047b0:	e00a      	b.n	80047c8 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fb fd04 	bl	80001c0 <OS_CPU_SR_Restore>
}
 80047b8:	e006      	b.n	80047c8 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fb fd00 	bl	80001c0 <OS_CPU_SR_Restore>
}
 80047c0:	e002      	b.n	80047c8 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fb fcfc 	bl	80001c0 <OS_CPU_SR_Restore>
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	200012d9 	.word	0x200012d9
 80047d4:	20001ac8 	.word	0x20001ac8
 80047d8:	200012d0 	.word	0x200012d0

080047dc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <OSStart+0x38>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d113      	bne.n	8004810 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 80047e8:	f000 fbfa 	bl	8004fe0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <OSStart+0x3c>)
 80047ee:	781a      	ldrb	r2, [r3, #0]
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <OSStart+0x40>)
 80047f2:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <OSStart+0x3c>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <OSStart+0x44>)
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <OSStart+0x48>)
 8004802:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <OSStart+0x48>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <OSStart+0x4c>)
 800480a:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 800480c:	f7fb fce1 	bl	80001d2 <OSStartHighRdy>
    }
}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	200012d9 	.word	0x200012d9
 8004818:	200012e2 	.word	0x200012e2
 800481c:	200015b4 	.word	0x200015b4
 8004820:	20002564 	.word	0x20002564
 8004824:	200018b0 	.word	0x200018b0
 8004828:	20001acc 	.word	0x20001acc

0800482c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8004836:	2002      	movs	r0, #2
 8004838:	f001 fb0a 	bl	8005e50 <OSTimeDly>
    OS_ENTER_CRITICAL();
 800483c:	2040      	movs	r0, #64	; 0x40
 800483e:	f7fb fcb1 	bl	80001a4 <OS_CPU_SR_Save>
 8004842:	6078      	str	r0, [r7, #4]
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <OSStatInit+0x50>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fb fcb8 	bl	80001c0 <OS_CPU_SR_Restore>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 8004850:	2064      	movs	r0, #100	; 0x64
 8004852:	f001 fafd 	bl	8005e50 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8004856:	2040      	movs	r0, #64	; 0x40
 8004858:	f7fb fca4 	bl	80001a4 <OS_CPU_SR_Save>
 800485c:	6078      	str	r0, [r7, #4]
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <OSStatInit+0x50>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a07      	ldr	r2, [pc, #28]	; (8004880 <OSStatInit+0x54>)
 8004864:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <OSStatInit+0x58>)
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fb fca7 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200012dc 	.word	0x200012dc
 8004880:	20001840 	.word	0x20001840
 8004884:	20002560 	.word	0x20002560

08004888 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8004892:	f7ff fe0f 	bl	80044b4 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8004896:	2040      	movs	r0, #64	; 0x40
 8004898:	f7fb fc84 	bl	80001a4 <OS_CPU_SR_Save>
 800489c:	6078      	str	r0, [r7, #4]
    OSTime++;
 800489e:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <OSTimeTick+0x12c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a43      	ldr	r2, [pc, #268]	; (80049b4 <OSTimeTick+0x12c>)
 80048a6:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fb fc89 	bl	80001c0 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 80048ae:	4b42      	ldr	r3, [pc, #264]	; (80049b8 <OSTimeTick+0x130>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d17a      	bne.n	80049ac <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <OSTimeTick+0x134>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d00c      	beq.n	80048d8 <OSTimeTick+0x50>
 80048be:	2b02      	cmp	r3, #2
 80048c0:	dc10      	bgt.n	80048e4 <OSTimeTick+0x5c>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <OSTimeTick+0x44>
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d003      	beq.n	80048d2 <OSTimeTick+0x4a>
 80048ca:	e00b      	b.n	80048e4 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	72fb      	strb	r3, [r7, #11]
                 break;
 80048d0:	e00e      	b.n	80048f0 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 80048d2:	2300      	movs	r3, #0
 80048d4:	72fb      	strb	r3, [r7, #11]
                 break;
 80048d6:	e00b      	b.n	80048f0 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 80048d8:	2301      	movs	r3, #1
 80048da:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 80048dc:	4b37      	ldr	r3, [pc, #220]	; (80049bc <OSTimeTick+0x134>)
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
                 break;
 80048e2:	e005      	b.n	80048f0 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 80048e8:	4b34      	ldr	r3, [pc, #208]	; (80049bc <OSTimeTick+0x134>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
                 break;
 80048ee:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d059      	beq.n	80049aa <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 80048f6:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <OSTimeTick+0x138>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 80048fc:	e04f      	b.n	800499e <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 80048fe:	2040      	movs	r0, #64	; 0x40
 8004900:	f7fb fc50 	bl	80001a4 <OS_CPU_SR_Save>
 8004904:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d041      	beq.n	8004992 <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	2b00      	cmp	r3, #0
 800491e:	d138      	bne.n	8004992 <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004926:	f003 0337 	and.w	r3, r3, #55	; 0x37
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004934:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004948:	e003      	b.n	8004952 <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d118      	bne.n	8004992 <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8004966:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <OSTimeTick+0x13c>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <OSTimeTick+0x13c>)
 8004970:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004978:	461a      	mov	r2, r3
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <OSTimeTick+0x140>)
 800497c:	5c9a      	ldrb	r2, [r3, r2]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800498a:	4313      	orrs	r3, r2
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <OSTimeTick+0x140>)
 8004990:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fb fc11 	bl	80001c0 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80049a4:	2b3f      	cmp	r3, #63	; 0x3f
 80049a6:	d1aa      	bne.n	80048fe <OSTimeTick+0x76>
 80049a8:	e000      	b.n	80049ac <OSTimeTick+0x124>
            return;
 80049aa:	bf00      	nop
        }
    }
}
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20001ad4 	.word	0x20001ad4
 80049b8:	200012d9 	.word	0x200012d9
 80049bc:	20001634 	.word	0x20001634
 80049c0:	200015b8 	.word	0x200015b8
 80049c4:	200018b8 	.word	0x200018b8
 80049c8:	200018bc 	.word	0x200018bc

080049cc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	460b      	mov	r3, r1
 80049e8:	71fb      	strb	r3, [r7, #7]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	7a9b      	ldrb	r3, [r3, #10]
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <OS_EventTaskRdy+0xd4>)
 80049f6:	5c9b      	ldrb	r3, [r3, r2]
 80049f8:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	7adb      	ldrb	r3, [r3, #11]
 8004a02:	461a      	mov	r2, r3
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <OS_EventTaskRdy+0xd4>)
 8004a06:	5c9b      	ldrb	r3, [r3, r2]
 8004a08:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	7dbb      	ldrb	r3, [r7, #22]
 8004a12:	4413      	add	r3, r2
 8004a14:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8004a16:	7d7b      	ldrb	r3, [r7, #21]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <OS_EventTaskRdy+0xd8>)
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1e:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	79ba      	ldrb	r2, [r7, #6]
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d113      	bne.n	8004a80 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8004a5e:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <OS_EventTaskRdy+0xdc>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <OS_EventTaskRdy+0xdc>)
 8004a68:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <OS_EventTaskRdy+0xe0>)
 8004a6e:	5cd1      	ldrb	r1, [r2, r3]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	b2d1      	uxtb	r1, r2
 8004a7c:	4a0e      	ldr	r2, [pc, #56]	; (8004ab8 <OS_EventTaskRdy+0xe0>)
 8004a7e:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8004a80:	68f9      	ldr	r1, [r7, #12]
 8004a82:	6938      	ldr	r0, [r7, #16]
 8004a84:	f000 f870 	bl	8004b68 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	4619      	mov	r1, r3
 8004a96:	6938      	ldr	r0, [r7, #16]
 8004a98:	f000 f898 	bl	8004bcc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 8004aa2:	7d7b      	ldrb	r3, [r7, #21]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	080094d0 	.word	0x080094d0
 8004ab0:	20002564 	.word	0x20002564
 8004ab4:	200018b8 	.word	0x200018b8
 8004ab8:	200018bc 	.word	0x200018bc

08004abc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8004ac4:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	7ada      	ldrb	r2, [r3, #11]
 8004adc:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ae4:	491d      	ldr	r1, [pc, #116]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004ae6:	6809      	ldr	r1, [r1, #0]
 8004ae8:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8004aec:	4313      	orrs	r3, r2
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	440b      	add	r3, r1
 8004af4:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7a9a      	ldrb	r2, [r3, #10]
 8004afa:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b12:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <OS_EventTaskWait+0xa4>)
 8004b18:	5cd1      	ldrb	r1, [r2, r3]
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b22:	43db      	mvns	r3, r3
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	400a      	ands	r2, r1
 8004b2a:	b2d1      	uxtb	r1, r2
 8004b2c:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <OS_EventTaskWait+0xa4>)
 8004b2e:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <OS_EventTaskWait+0xa4>)
 8004b34:	5cd3      	ldrb	r3, [r2, r3]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <OS_EventTaskWait+0xa0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b42:	43db      	mvns	r3, r3
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <OS_EventTaskWait+0xa8>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <OS_EventTaskWait+0xa8>)
 8004b50:	701a      	strb	r2, [r3, #0]
    }
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	20001acc 	.word	0x20001acc
 8004b60:	200018bc 	.word	0x200018bc
 8004b64:	200018b8 	.word	0x200018b8

08004b68 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b78:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	7ad9      	ldrb	r1, [r3, #11]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	400a      	ands	r2, r1
 8004b90:	b2d1      	uxtb	r1, r2
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	4413      	add	r3, r2
 8004b96:	460a      	mov	r2, r1
 8004b98:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	7adb      	ldrb	r3, [r3, #11]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	7a9a      	ldrb	r2, [r3, #10]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	61da      	str	r2, [r3, #28]
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bdc:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004be4:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bec:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8004bf8:	e022      	b.n	8004c40 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	7ad9      	ldrb	r1, [r3, #11]
 8004c02:	7b7b      	ldrb	r3, [r7, #13]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	b2d1      	uxtb	r1, r2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	460a      	mov	r2, r1
 8004c14:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	7adb      	ldrb	r3, [r3, #11]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	7a9a      	ldrb	r2, [r3, #10]
 8004c26:	7bbb      	ldrb	r3, [r7, #14]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3304      	adds	r3, #4
 8004c38:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1d9      	bne.n	8004bfa <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e007      	b.n	8004c76 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	3301      	adds	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b07      	cmp	r3, #7
 8004c7a:	d9f4      	bls.n	8004c66 <OS_EventWaitListInit+0x14>
    }
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8004c8e:	21f0      	movs	r1, #240	; 0xf0
 8004c90:	481f      	ldr	r0, [pc, #124]	; (8004d10 <OS_InitEventList+0x88>)
 8004c92:	f000 f94b 	bl	8004f2c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8004c96:	2300      	movs	r3, #0
 8004c98:	81fb      	strh	r3, [r7, #14]
 8004c9a:	e01e      	b.n	8004cda <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8004c9c:	89fb      	ldrh	r3, [r7, #14]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8004ca2:	89fa      	ldrh	r2, [r7, #14]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <OS_InitEventList+0x88>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8004cb2:	88fa      	ldrh	r2, [r7, #6]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <OS_InitEventList+0x88>)
 8004cbe:	4413      	add	r3, r2
 8004cc0:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a10      	ldr	r2, [pc, #64]	; (8004d14 <OS_InitEventList+0x8c>)
 8004cd2:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	81fb      	strh	r3, [r7, #14]
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d9dd      	bls.n	8004c9c <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8004ce0:	89fa      	ldrh	r2, [r7, #14]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <OS_InitEventList+0x88>)
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <OS_InitEventList+0x8c>)
 8004d00:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <OS_InitEventList+0x90>)
 8004d04:	4a02      	ldr	r2, [pc, #8]	; (8004d10 <OS_InitEventList+0x88>)
 8004d06:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20001cdc 	.word	0x20001cdc
 8004d14:	080093b4 	.word	0x080093b4
 8004d18:	20001ac4 	.word	0x20001ac4

08004d1c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <OS_InitMisc+0x50>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <OS_InitMisc+0x54>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <OS_InitMisc+0x58>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <OS_InitMisc+0x5c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <OS_InitMisc+0x60>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <OS_InitMisc+0x64>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <OS_InitMisc+0x68>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <OS_InitMisc+0x6c>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <OS_InitMisc+0x70>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <OS_InitMisc+0x74>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <OS_InitMisc+0x78>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
#endif
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20001ad4 	.word	0x20001ad4
 8004d70:	20001ac8 	.word	0x20001ac8
 8004d74:	200012d0 	.word	0x200012d0
 8004d78:	20001849 	.word	0x20001849
 8004d7c:	200012d9 	.word	0x200012d9
 8004d80:	20001838 	.word	0x20001838
 8004d84:	200012dc 	.word	0x200012dc
 8004d88:	20002664 	.word	0x20002664
 8004d8c:	20001840 	.word	0x20001840
 8004d90:	20002560 	.word	0x20002560
 8004d94:	200012d8 	.word	0x200012d8

08004d98 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <OS_InitRdyList+0x48>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8004da4:	2300      	movs	r3, #0
 8004da6:	71fb      	strb	r3, [r7, #7]
 8004da8:	e006      	b.n	8004db8 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <OS_InitRdyList+0x4c>)
 8004dae:	2100      	movs	r1, #0
 8004db0:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	3301      	adds	r3, #1
 8004db6:	71fb      	strb	r3, [r7, #7]
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	d9f5      	bls.n	8004daa <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <OS_InitRdyList+0x50>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <OS_InitRdyList+0x54>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <OS_InitRdyList+0x58>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <OS_InitRdyList+0x5c>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	200018b8 	.word	0x200018b8
 8004de4:	200018bc 	.word	0x200018bc
 8004de8:	200015b4 	.word	0x200015b4
 8004dec:	200012e2 	.word	0x200012e2
 8004df0:	200018b0 	.word	0x200018b0
 8004df4:	20001acc 	.word	0x20001acc

08004df8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 8004dfe:	2303      	movs	r3, #3
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <OS_InitTaskIdle+0x3c>)
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	233f      	movs	r3, #63	; 0x3f
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <OS_InitTaskIdle+0x40>)
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4808      	ldr	r0, [pc, #32]	; (8004e3c <OS_InitTaskIdle+0x44>)
 8004e1c:	f000 fcbc 	bl	8005798 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8004e20:	1dfb      	adds	r3, r7, #7
 8004e22:	461a      	mov	r2, r3
 8004e24:	4906      	ldr	r1, [pc, #24]	; (8004e40 <OS_InitTaskIdle+0x48>)
 8004e26:	203f      	movs	r0, #63	; 0x3f
 8004e28:	f000 fe1a 	bl	8005a60 <OSTaskNameSet>
#endif
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20001adc 	.word	0x20001adc
 8004e38:	20001cd8 	.word	0x20001cd8
 8004e3c:	08005029 	.word	0x08005029
 8004e40:	080093b8 	.word	0x080093b8

08004e44 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	9304      	str	r3, [sp, #16]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9303      	str	r3, [sp, #12]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	9302      	str	r3, [sp, #8]
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <OS_InitTaskStat+0x3c>)
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	233e      	movs	r3, #62	; 0x3e
 8004e62:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <OS_InitTaskStat+0x40>)
 8004e64:	2100      	movs	r1, #0
 8004e66:	4808      	ldr	r0, [pc, #32]	; (8004e88 <OS_InitTaskStat+0x44>)
 8004e68:	f000 fc96 	bl	8005798 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4906      	ldr	r1, [pc, #24]	; (8004e8c <OS_InitTaskStat+0x48>)
 8004e72:	203e      	movs	r0, #62	; 0x3e
 8004e74:	f000 fdf4 	bl	8005a60 <OSTaskNameSet>
#endif
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20001638 	.word	0x20001638
 8004e84:	20001834 	.word	0x20001834
 8004e88:	08005059 	.word	0x08005059
 8004e8c:	080093c8 	.word	0x080093c8

08004e90 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8004e96:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8004e9a:	481f      	ldr	r0, [pc, #124]	; (8004f18 <OS_InitTCBList+0x88>)
 8004e9c:	f000 f846 	bl	8004f2c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8004ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ea4:	481d      	ldr	r0, [pc, #116]	; (8004f1c <OS_InitTCBList+0x8c>)
 8004ea6:	f000 f841 	bl	8004f2c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
 8004eae:	e019      	b.n	8004ee4 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2258      	movs	r2, #88	; 0x58
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <OS_InitTCBList+0x88>)
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2258      	movs	r2, #88	; 0x58
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <OS_InitTCBList+0x88>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <OS_InitTCBList+0x90>)
 8004edc:	651a      	str	r2, [r3, #80]	; 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	2b14      	cmp	r3, #20
 8004ee8:	d9e2      	bls.n	8004eb0 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2258      	movs	r2, #88	; 0x58
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <OS_InitTCBList+0x88>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2200      	movs	r2, #0
 8004efc:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <OS_InitTCBList+0x90>)
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <OS_InitTCBList+0x94>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <OS_InitTCBList+0x98>)
 8004f0c:	4a02      	ldr	r2, [pc, #8]	; (8004f18 <OS_InitTCBList+0x88>)
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20001dcc 	.word	0x20001dcc
 8004f1c:	20002564 	.word	0x20002564
 8004f20:	080093b4 	.word	0x080093b4
 8004f24:	200015b8 	.word	0x200015b8
 8004f28:	20001844 	.word	0x20001844

08004f2c <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8004f38:	e007      	b.n	8004f4a <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
        size--;
 8004f44:	887b      	ldrh	r3, [r7, #2]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f4      	bne.n	8004f3a <OS_MemClr+0xe>
    }
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8004f62:	2300      	movs	r3, #0
 8004f64:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8004f66:	2040      	movs	r0, #64	; 0x40
 8004f68:	f7fb f91c 	bl	80001a4 <OS_CPU_SR_Save>
 8004f6c:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <OS_Sched+0x68>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d11f      	bne.n	8004fb6 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <OS_Sched+0x6c>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d11b      	bne.n	8004fb6 <OS_Sched+0x5a>
            OS_SchedNew();
 8004f7e:	f000 f82f 	bl	8004fe0 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <OS_Sched+0x70>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <OS_Sched+0x74>)
 8004f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8e:	4a11      	ldr	r2, [pc, #68]	; (8004fd4 <OS_Sched+0x78>)
 8004f90:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8004f92:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <OS_Sched+0x70>)
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <OS_Sched+0x7c>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d00b      	beq.n	8004fb6 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <OS_Sched+0x78>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa4:	3201      	adds	r2, #1
 8004fa6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <OS_Sched+0x80>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <OS_Sched+0x80>)
 8004fb0:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 8004fb2:	f7fb f94e 	bl	8000252 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb f902 	bl	80001c0 <OS_CPU_SR_Restore>
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20001ac8 	.word	0x20001ac8
 8004fc8:	200012d0 	.word	0x200012d0
 8004fcc:	200012e2 	.word	0x200012e2
 8004fd0:	20002564 	.word	0x20002564
 8004fd4:	200018b0 	.word	0x200018b0
 8004fd8:	200015b4 	.word	0x200015b4
 8004fdc:	20001838 	.word	0x20001838

08004fe0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <OS_SchedNew+0x38>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <OS_SchedNew+0x3c>)
 8004fee:	5c9b      	ldrb	r3, [r3, r2]
 8004ff0:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	4909      	ldr	r1, [pc, #36]	; (8005020 <OS_SchedNew+0x40>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	4619      	mov	r1, r3
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <OS_SchedNew+0x3c>)
 8005002:	5c5b      	ldrb	r3, [r3, r1]
 8005004:	4413      	add	r3, r2
 8005006:	b2da      	uxtb	r2, r3
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <OS_SchedNew+0x44>)
 800500a:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200018b8 	.word	0x200018b8
 800501c:	080094d0 	.word	0x080094d0
 8005020:	200018bc 	.word	0x200018bc
 8005024:	200012e2 	.word	0x200012e2

08005028 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8005034:	2040      	movs	r0, #64	; 0x40
 8005036:	f7fb f8b5 	bl	80001a4 <OS_CPU_SR_Save>
 800503a:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <OS_TaskIdle+0x2c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	4a04      	ldr	r2, [pc, #16]	; (8005054 <OS_TaskIdle+0x2c>)
 8005044:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7fb f8ba 	bl	80001c0 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800504c:	f7ff f97e 	bl	800434c <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 8005050:	e7f0      	b.n	8005034 <OS_TaskIdle+0xc>
 8005052:	bf00      	nop
 8005054:	200012dc 	.word	0x200012dc

08005058 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8005064:	e002      	b.n	800506c <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 8005066:	20c8      	movs	r0, #200	; 0xc8
 8005068:	f000 fef2 	bl	8005e50 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 800506c:	4b30      	ldr	r3, [pc, #192]	; (8005130 <OS_TaskStat+0xd8>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f8      	beq.n	8005066 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 8005074:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <OS_TaskStat+0xdc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <OS_TaskStat+0xe0>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	4a2c      	ldr	r2, [pc, #176]	; (8005134 <OS_TaskStat+0xdc>)
 8005082:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 8005084:	4b2b      	ldr	r3, [pc, #172]	; (8005134 <OS_TaskStat+0xdc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 800508c:	4b2b      	ldr	r3, [pc, #172]	; (800513c <OS_TaskStat+0xe4>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8005092:	20ff      	movs	r0, #255	; 0xff
 8005094:	f000 fe28 	bl	8005ce8 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8005098:	2040      	movs	r0, #64	; 0x40
 800509a:	f7fb f883 	bl	80001a4 <OS_CPU_SR_Save>
 800509e:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <OS_TaskStat+0xdc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2264      	movs	r2, #100	; 0x64
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	4a25      	ldr	r2, [pc, #148]	; (8005140 <OS_TaskStat+0xe8>)
 80050ac:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7fb f886 	bl	80001c0 <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80050b4:	2001      	movs	r0, #1
 80050b6:	f000 fecb 	bl	8005e50 <OSTimeDly>

        OS_ENTER_CRITICAL();
 80050ba:	2040      	movs	r0, #64	; 0x40
 80050bc:	f7fb f872 	bl	80001a4 <OS_CPU_SR_Save>
 80050c0:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 80050c2:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <OS_TaskStat+0xe8>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7fb f879 	bl	80001c0 <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 80050ce:	2064      	movs	r0, #100	; 0x64
 80050d0:	f000 febe 	bl	8005e50 <OSTimeDly>

        OS_ENTER_CRITICAL();
 80050d4:	2040      	movs	r0, #64	; 0x40
 80050d6:	f7fb f865 	bl	80001a4 <OS_CPU_SR_Save>
 80050da:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 80050dc:	4b18      	ldr	r3, [pc, #96]	; (8005140 <OS_TaskStat+0xe8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <OS_TaskStat+0xec>)
 80050e2:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7fb f86b 	bl	80001c0 <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <OS_TaskStat+0xec>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b11      	ldr	r3, [pc, #68]	; (8005134 <OS_TaskStat+0xdc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 8005100:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005104:	2b00      	cmp	r3, #0
 8005106:	db03      	blt.n	8005110 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 8005108:	7afa      	ldrb	r2, [r7, #11]
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <OS_TaskStat+0xe4>)
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e00a      	b.n	8005126 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <OS_TaskStat+0xe4>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <OS_TaskStat+0xec>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a07      	ldr	r2, [pc, #28]	; (8005138 <OS_TaskStat+0xe0>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	4a04      	ldr	r2, [pc, #16]	; (8005134 <OS_TaskStat+0xdc>)
 8005124:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8005126:	f7ff f922 	bl	800436e <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800512a:	f000 f80d 	bl	8005148 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 800512e:	e7c1      	b.n	80050b4 <OS_TaskStat+0x5c>
 8005130:	20002560 	.word	0x20002560
 8005134:	20001840 	.word	0x20001840
 8005138:	51eb851f 	.word	0x51eb851f
 800513c:	20001848 	.word	0x20001848
 8005140:	200012dc 	.word	0x200012dc
 8005144:	20002664 	.word	0x20002664

08005148 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]
 8005152:	e023      	b.n	800519c <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8005154:	463a      	mov	r2, r7
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fd56 	bl	8005c0c <OSTaskStkChk>
 8005160:	4603      	mov	r3, r0
 8005162:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d115      	bne.n	8005196 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <OS_TaskStatStkChk+0x64>)
 800516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005172:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d00a      	beq.n	8005196 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	64da      	str	r2, [r3, #76]	; 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	3301      	adds	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b3f      	cmp	r3, #63	; 0x3f
 80051a0:	d9d8      	bls.n	8005154 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20002564 	.word	0x20002564

080051b0 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	4613      	mov	r3, r2
 80051c2:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 80051c8:	2040      	movs	r0, #64	; 0x40
 80051ca:	f7fa ffeb 	bl	80001a4 <OS_CPU_SR_Save>
 80051ce:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <OS_TCBInit+0x1cc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80c7 	beq.w	800536c <OS_TCBInit+0x1bc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	4a66      	ldr	r2, [pc, #408]	; (800537c <OS_TCBInit+0x1cc>)
 80051e4:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80051e6:	69b8      	ldr	r0, [r7, #24]
 80051e8:	f7fa ffea 	bl	80001c0 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	7bfa      	ldrb	r2, [r7, #15]
 80051f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521a:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005226:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	89ba      	ldrh	r2, [r7, #12]
 800522c:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	b2da      	uxtb	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	b2da      	uxtb	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005256:	461a      	mov	r2, r3
 8005258:	2301      	movs	r3, #1
 800525a:	4093      	lsls	r3, r2
 800525c:	b2da      	uxtb	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800526a:	461a      	mov	r2, r3
 800526c:	2301      	movs	r3, #1
 800526e:	4093      	lsls	r3, r2
 8005270:	b2da      	uxtb	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2200      	movs	r2, #0
 8005282:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	649a      	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4a33      	ldr	r2, [pc, #204]	; (8005380 <OS_TCBInit+0x1d0>)
 80052b2:	651a      	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80052b4:	2300      	movs	r3, #0
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e009      	b.n	80052ce <OS_TCBInit+0x11e>
            ptcb->OSTCBRegTbl[i] = 0u;
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	3314      	adds	r3, #20
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80052c8:	7ffb      	ldrb	r3, [r7, #31]
 80052ca:	3301      	adds	r3, #1
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	7ffb      	ldrb	r3, [r7, #31]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f2      	beq.n	80052ba <OS_TCBInit+0x10a>
        }
#endif

        OSTCBInitHook(ptcb);
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	f7ff f8e1 	bl	800449c <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 80052da:	2040      	movs	r0, #64	; 0x40
 80052dc:	f7fa ff62 	bl	80001a4 <OS_CPU_SR_Save>
 80052e0:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	4927      	ldr	r1, [pc, #156]	; (8005384 <OS_TCBInit+0x1d4>)
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 80052ec:	69b8      	ldr	r0, [r7, #24]
 80052ee:	f7fa ff67 	bl	80001c0 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff f814 	bl	8004320 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 80052f8:	2040      	movs	r0, #64	; 0x40
 80052fa:	f7fa ff53 	bl	80001a4 <OS_CPU_SR_Save>
 80052fe:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8005300:	4b21      	ldr	r3, [pc, #132]	; (8005388 <OS_TCBInit+0x1d8>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2200      	movs	r2, #0
 800530c:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <OS_TCBInit+0x1d8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <OS_TCBInit+0x16e>
            OSTCBList->OSTCBPrev = ptcb;
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <OS_TCBInit+0x1d8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <OS_TCBInit+0x1d8>)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800532a:	4b18      	ldr	r3, [pc, #96]	; (800538c <OS_TCBInit+0x1dc>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b16      	ldr	r3, [pc, #88]	; (800538c <OS_TCBInit+0x1dc>)
 8005334:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800533c:	461a      	mov	r2, r3
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <OS_TCBInit+0x1e0>)
 8005340:	5c9a      	ldrb	r2, [r3, r2]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800534e:	4313      	orrs	r3, r2
 8005350:	b2da      	uxtb	r2, r3
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <OS_TCBInit+0x1e0>)
 8005354:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <OS_TCBInit+0x1e4>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	3301      	adds	r3, #1
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <OS_TCBInit+0x1e4>)
 8005360:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8005362:	69b8      	ldr	r0, [r7, #24]
 8005364:	f7fa ff2c 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8005368:	2300      	movs	r3, #0
 800536a:	e003      	b.n	8005374 <OS_TCBInit+0x1c4>
    }
    OS_EXIT_CRITICAL();
 800536c:	69b8      	ldr	r0, [r7, #24]
 800536e:	f7fa ff27 	bl	80001c0 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8005372:	2342      	movs	r3, #66	; 0x42
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20001844 	.word	0x20001844
 8005380:	080093b4 	.word	0x080093b4
 8005384:	20002564 	.word	0x20002564
 8005388:	200015b8 	.word	0x200015b8
 800538c:	200018b8 	.word	0x200018b8
 8005390:	200018bc 	.word	0x200018bc
 8005394:	20001849 	.word	0x20001849

08005398 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 800539e:	2150      	movs	r1, #80	; 0x50
 80053a0:	481b      	ldr	r0, [pc, #108]	; (8005410 <OS_FlagInit+0x78>)
 80053a2:	f7ff fdc3 	bl	8004f2c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80053a6:	2300      	movs	r3, #0
 80053a8:	81fb      	strh	r3, [r7, #14]
 80053aa:	e018      	b.n	80053de <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 80053ac:	89fb      	ldrh	r3, [r7, #14]
 80053ae:	3301      	adds	r3, #1
 80053b0:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 80053b2:	89fb      	ldrh	r3, [r7, #14]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	4a16      	ldr	r2, [pc, #88]	; (8005410 <OS_FlagInit+0x78>)
 80053b8:	4413      	add	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	4a13      	ldr	r2, [pc, #76]	; (8005410 <OS_FlagInit+0x78>)
 80053c2:	4413      	add	r3, r2
 80053c4:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <OS_FlagInit+0x7c>)
 80053d6:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	3301      	adds	r3, #1
 80053dc:	81fb      	strh	r3, [r7, #14]
 80053de:	89fb      	ldrh	r3, [r7, #14]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d9e3      	bls.n	80053ac <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <OS_FlagInit+0x78>)
 80053ea:	4413      	add	r3, r2
 80053ec:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4a05      	ldr	r2, [pc, #20]	; (8005414 <OS_FlagInit+0x7c>)
 80053fe:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <OS_FlagInit+0x80>)
 8005402:	4a03      	ldr	r2, [pc, #12]	; (8005410 <OS_FlagInit+0x78>)
 8005404:	601a      	str	r2, [r3, #0]
#endif
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200012e4 	.word	0x200012e4
 8005414:	080093d8 	.word	0x080093d8
 8005418:	2000255c 	.word	0x2000255c

0800541c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10c      	bne.n	8005450 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	e008      	b.n	8005462 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2200      	movs	r2, #0
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 800547e:	2178      	movs	r1, #120	; 0x78
 8005480:	481a      	ldr	r0, [pc, #104]	; (80054ec <OS_MemInit+0x74>)
 8005482:	f7ff fd53 	bl	8004f2c <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8005486:	2300      	movs	r3, #0
 8005488:	80fb      	strh	r3, [r7, #6]
 800548a:	e017      	b.n	80054bc <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4a15      	ldr	r2, [pc, #84]	; (80054ec <OS_MemInit+0x74>)
 8005498:	4413      	add	r3, r2
 800549a:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4a10      	ldr	r2, [pc, #64]	; (80054ec <OS_MemInit+0x74>)
 80054aa:	441a      	add	r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4a0f      	ldr	r2, [pc, #60]	; (80054f0 <OS_MemInit+0x78>)
 80054b4:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	3301      	adds	r3, #1
 80054ba:	80fb      	strh	r3, [r7, #6]
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d9e4      	bls.n	800548c <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4a07      	ldr	r2, [pc, #28]	; (80054ec <OS_MemInit+0x74>)
 80054ce:	4413      	add	r3, r2
 80054d0:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <OS_MemInit+0x78>)
 80054dc:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <OS_MemInit+0x7c>)
 80054e0:	4a02      	ldr	r2, [pc, #8]	; (80054ec <OS_MemInit+0x74>)
 80054e2:	601a      	str	r2, [r3, #0]
#endif
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	200015bc 	.word	0x200015bc
 80054f0:	080093dc 	.word	0x080093dc
 80054f4:	2000184c 	.word	0x2000184c

080054f8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80054fe:	2160      	movs	r1, #96	; 0x60
 8005500:	4819      	ldr	r0, [pc, #100]	; (8005568 <OS_QInit+0x70>)
 8005502:	f7ff fd13 	bl	8004f2c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8005506:	2300      	movs	r3, #0
 8005508:	81fb      	strh	r3, [r7, #14]
 800550a:	e018      	b.n	800553e <OS_QInit+0x46>
        ix_next = ix + 1u;
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	3301      	adds	r3, #1
 8005510:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 8005512:	89fa      	ldrh	r2, [r7, #14]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4a12      	ldr	r2, [pc, #72]	; (8005568 <OS_QInit+0x70>)
 800551e:	4413      	add	r3, r2
 8005520:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	4613      	mov	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4a0e      	ldr	r2, [pc, #56]	; (8005568 <OS_QInit+0x70>)
 800552e:	4413      	add	r3, r2
 8005530:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	3301      	adds	r3, #1
 800553c:	81fb      	strh	r3, [r7, #14]
 800553e:	89fb      	ldrh	r3, [r7, #14]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d9e3      	bls.n	800550c <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 8005544:	89fa      	ldrh	r2, [r7, #14]
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4a06      	ldr	r2, [pc, #24]	; (8005568 <OS_QInit+0x70>)
 8005550:	4413      	add	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <OS_QInit+0x74>)
 800555c:	4a02      	ldr	r2, [pc, #8]	; (8005568 <OS_QInit+0x70>)
 800555e:	601a      	str	r2, [r3, #0]
#endif
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20001850 	.word	0x20001850
 800556c:	200018b4 	.word	0x200018b4

08005570 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 800557e:	4b18      	ldr	r3, [pc, #96]	; (80055e0 <OSSemCreate+0x70>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8005586:	2300      	movs	r3, #0
 8005588:	e025      	b.n	80055d6 <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 800558a:	2040      	movs	r0, #64	; 0x40
 800558c:	f7fa fe0a 	bl	80001a4 <OS_CPU_SR_Save>
 8005590:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <OSSemCreate+0x74>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <OSSemCreate+0x74>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <OSSemCreate+0x74>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a0f      	ldr	r2, [pc, #60]	; (80055e4 <OSSemCreate+0x74>)
 80055a8:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7fa fe08 	bl	80001c0 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00e      	beq.n	80055d4 <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2203      	movs	r2, #3
 80055ba:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a07      	ldr	r2, [pc, #28]	; (80055e8 <OSSemCreate+0x78>)
 80055cc:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 80055ce:	68b8      	ldr	r0, [r7, #8]
 80055d0:	f7ff fb3f 	bl	8004c52 <OS_EventWaitListInit>
        
        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 80055d4:	68bb      	ldr	r3, [r7, #8]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20001ac8 	.word	0x20001ac8
 80055e4:	20001ac4 	.word	0x20001ac4
 80055e8:	080093e0 	.word	0x080093e0

080055ec <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2204      	movs	r2, #4
 8005606:	701a      	strb	r2, [r3, #0]
        return;
 8005608:	e07c      	b.n	8005704 <OSSemPend+0x118>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d003      	beq.n	800561a <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005618:	e074      	b.n	8005704 <OSSemPend+0x118>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 800561a:	4b3c      	ldr	r3, [pc, #240]	; (800570c <OSSemPend+0x120>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005628:	e06c      	b.n	8005704 <OSSemPend+0x118>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 800562a:	4b39      	ldr	r3, [pc, #228]	; (8005710 <OSSemPend+0x124>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	220d      	movs	r2, #13
 8005636:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005638:	e064      	b.n	8005704 <OSSemPend+0x118>
    }
    OS_ENTER_CRITICAL();
 800563a:	2040      	movs	r0, #64	; 0x40
 800563c:	f7fa fdb2 	bl	80001a4 <OS_CPU_SR_Save>
 8005640:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	891b      	ldrh	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	891b      	ldrh	r3, [r3, #8]
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f7fa fdb2 	bl	80001c0 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8005662:	e04f      	b.n	8005704 <OSSemPend+0x118>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <OSSemPend+0x128>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800566c:	4b29      	ldr	r3, [pc, #164]	; (8005714 <OSSemPend+0x128>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <OSSemPend+0x128>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8005684:	4b23      	ldr	r3, [pc, #140]	; (8005714 <OSSemPend+0x128>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff fa15 	bl	8004abc <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7fa fd94 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8005698:	f7ff fc60 	bl	8004f5c <OS_Sched>
    OS_ENTER_CRITICAL();
 800569c:	2040      	movs	r0, #64	; 0x40
 800569e:	f7fa fd81 	bl	80001a4 <OS_CPU_SR_Save>
 80056a2:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <OSSemPend+0x128>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <OSSemPend+0xca>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d004      	beq.n	80056be <OSSemPend+0xd2>
 80056b4:	e007      	b.n	80056c6 <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
             break;
 80056bc:	e00d      	b.n	80056da <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	220e      	movs	r2, #14
 80056c2:	701a      	strb	r2, [r3, #0]
             break;
 80056c4:	e009      	b.n	80056da <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <OSSemPend+0x128>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fa4b 	bl	8004b68 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	220a      	movs	r2, #10
 80056d6:	701a      	strb	r2, [r3, #0]
             break;
 80056d8:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <OSSemPend+0x128>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <OSSemPend+0x128>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <OSSemPend+0x128>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <OSSemPend+0x128>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7fa fd5e 	bl	80001c0 <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20001ac8 	.word	0x20001ac8
 8005710:	200012d0 	.word	0x200012d0
 8005714:	20001acc 	.word	0x20001acc

08005718 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 800572a:	2304      	movs	r3, #4
 800572c:	e02f      	b.n	800578e <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d001      	beq.n	800573a <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8005736:	2301      	movs	r3, #1
 8005738:	e029      	b.n	800578e <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 800573a:	2040      	movs	r0, #64	; 0x40
 800573c:	f7fa fd32 	bl	80001a4 <OS_CPU_SR_Save>
 8005740:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7a9b      	ldrb	r3, [r3, #10]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 800574a:	2300      	movs	r3, #0
 800574c:	2201      	movs	r2, #1
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff f941 	bl	80049d8 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7fa fd32 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 800575c:	f7ff fbfe 	bl	8004f5c <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8005760:	2300      	movs	r3, #0
 8005762:	e014      	b.n	800578e <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	891b      	ldrh	r3, [r3, #8]
 8005768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576c:	4293      	cmp	r3, r2
 800576e:	d00a      	beq.n	8005786 <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	891b      	ldrh	r3, [r3, #8]
 8005774:	3301      	adds	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7fa fd1f 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8005782:	2300      	movs	r3, #0
 8005784:	e003      	b.n	800578e <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f7fa fd1a 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 800578c:	2333      	movs	r3, #51	; 0x33
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	; 0x30
 800579c:	af04      	add	r7, sp, #16
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b3f      	cmp	r3, #63	; 0x3f
 80057ae:	d901      	bls.n	80057b4 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 80057b0:	232a      	movs	r3, #42	; 0x2a
 80057b2:	e052      	b.n	800585a <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 80057b4:	2040      	movs	r0, #64	; 0x40
 80057b6:	f7fa fcf5 	bl	80001a4 <OS_CPU_SR_Save>
 80057ba:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 80057bc:	4b29      	ldr	r3, [pc, #164]	; (8005864 <OSTaskCreateExt+0xcc>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 80057c4:	69f8      	ldr	r0, [r7, #28]
 80057c6:	f7fa fcfb 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 80057ca:	233c      	movs	r3, #60	; 0x3c
 80057cc:	e045      	b.n	800585a <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <OSTaskCreateExt+0xd0>)
 80057d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d13b      	bne.n	8005852 <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	4a22      	ldr	r2, [pc, #136]	; (8005868 <OSTaskCreateExt+0xd0>)
 80057de:	2101      	movs	r1, #1
 80057e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 80057e4:	69f8      	ldr	r0, [r7, #28]
 80057e6:	f7fa fceb 	bl	80001c0 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80057ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ec:	461a      	mov	r2, r3
 80057ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f2:	f000 fb0b 	bl	8005e0c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80057f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7fe fdbd 	bl	800437c <OSTaskStkInit>
 8005802:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8005804:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005806:	78f8      	ldrb	r0, [r7, #3]
 8005808:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	f7ff fcc9 	bl	80051b0 <OS_TCBInit>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <OSTaskCreateExt+0xd4>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10e      	bne.n	800584e <OSTaskCreateExt+0xb6>
                OS_Sched();
 8005830:	f7ff fb94 	bl	8004f5c <OS_Sched>
 8005834:	e00b      	b.n	800584e <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 8005836:	2040      	movs	r0, #64	; 0x40
 8005838:	f7fa fcb4 	bl	80001a4 <OS_CPU_SR_Save>
 800583c:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <OSTaskCreateExt+0xd0>)
 8005842:	2100      	movs	r1, #0
 8005844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8005848:	69f8      	ldr	r0, [r7, #28]
 800584a:	f7fa fcb9 	bl	80001c0 <OS_CPU_SR_Restore>
        }
        return (err);
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	e003      	b.n	800585a <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 8005852:	69f8      	ldr	r0, [r7, #28]
 8005854:	f7fa fcb4 	bl	80001c0 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8005858:	2328      	movs	r3, #40	; 0x28
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20001ac8 	.word	0x20001ac8
 8005868:	20002564 	.word	0x20002564
 800586c:	200012d9 	.word	0x200012d9

08005870 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 800587e:	4b6d      	ldr	r3, [pc, #436]	; (8005a34 <OSTaskDel+0x1c4>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	e0d0      	b.n	8005a2c <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b3f      	cmp	r3, #63	; 0x3f
 800588e:	d101      	bne.n	8005894 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8005890:	233e      	movs	r3, #62	; 0x3e
 8005892:	e0cb      	b.n	8005a2c <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b3e      	cmp	r3, #62	; 0x3e
 8005898:	d904      	bls.n	80058a4 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	2bff      	cmp	r3, #255	; 0xff
 800589e:	d001      	beq.n	80058a4 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 80058a0:	232a      	movs	r3, #42	; 0x2a
 80058a2:	e0c3      	b.n	8005a2c <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 80058a4:	2040      	movs	r0, #64	; 0x40
 80058a6:	f7fa fc7d 	bl	80001a4 <OS_CPU_SR_Save>
 80058aa:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	2bff      	cmp	r3, #255	; 0xff
 80058b0:	d104      	bne.n	80058bc <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 80058b2:	4b61      	ldr	r3, [pc, #388]	; (8005a38 <OSTaskDel+0x1c8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80058ba:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	4a5f      	ldr	r2, [pc, #380]	; (8005a3c <OSTaskDel+0x1cc>)
 80058c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c4:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	f7fa fc77 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80058d2:	2343      	movs	r3, #67	; 0x43
 80058d4:	e0aa      	b.n	8005a2c <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d104      	bne.n	80058e6 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 80058dc:	6978      	ldr	r0, [r7, #20]
 80058de:	f7fa fc6f 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 80058e2:	233d      	movs	r3, #61	; 0x3d
 80058e4:	e0a2      	b.n	8005a2c <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b54      	ldr	r3, [pc, #336]	; (8005a40 <OSTaskDel+0x1d0>)
 80058f0:	5c9a      	ldrb	r2, [r3, r2]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058f8:	43db      	mvns	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	6939      	ldr	r1, [r7, #16]
 80058fe:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8005902:	4013      	ands	r3, r2
 8005904:	b2da      	uxtb	r2, r3
 8005906:	4b4e      	ldr	r3, [pc, #312]	; (8005a40 <OSTaskDel+0x1d0>)
 8005908:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005910:	461a      	mov	r2, r3
 8005912:	4b4b      	ldr	r3, [pc, #300]	; (8005a40 <OSTaskDel+0x1d0>)
 8005914:	5c9b      	ldrb	r3, [r3, r2]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005920:	43db      	mvns	r3, r3
 8005922:	b2da      	uxtb	r2, r3
 8005924:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <OSTaskDel+0x1d4>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4013      	ands	r3, r2
 800592a:	b2da      	uxtb	r2, r3
 800592c:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <OSTaskDel+0x1d4>)
 800592e:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	4619      	mov	r1, r3
 800593e:	6938      	ldr	r0, [r7, #16]
 8005940:	f7ff f912 	bl	8004b68 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	4619      	mov	r1, r3
 8005952:	6938      	ldr	r0, [r7, #16]
 8005954:	f7ff f93a 	bl	8004bcc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fd59 	bl	800541c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <OSTaskDel+0x1d8>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d005      	beq.n	8005994 <OSTaskDel+0x124>
        OSLockNesting++;
 8005988:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <OSTaskDel+0x1d8>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <OSTaskDel+0x1d8>)
 8005992:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	f7fa fc13 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 800599a:	f7ff f817 	bl	80049cc <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 800599e:	2040      	movs	r0, #64	; 0x40
 80059a0:	f7fa fc00 	bl	80001a4 <OS_CPU_SR_Save>
 80059a4:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 80059a6:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <OSTaskDel+0x1d8>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <OSTaskDel+0x14a>
        OSLockNesting--;
 80059ae:	4b26      	ldr	r3, [pc, #152]	; (8005a48 <OSTaskDel+0x1d8>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <OSTaskDel+0x1d8>)
 80059b8:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 80059ba:	6938      	ldr	r0, [r7, #16]
 80059bc:	f7fe fcbb 	bl	8004336 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 80059c0:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <OSTaskDel+0x1dc>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <OSTaskDel+0x1dc>)
 80059ca:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <OSTaskDel+0x1cc>)
 80059d0:	2100      	movs	r1, #0
 80059d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <OSTaskDel+0x1e0>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e009      	b.n	8005a04 <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	6952      	ldr	r2, [r2, #20]
 80059f8:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	6992      	ldr	r2, [r2, #24]
 8005a02:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8005a04:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <OSTaskDel+0x1e4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8005a0c:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <OSTaskDel+0x1e4>)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <OSTaskDel+0x1e8>)
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	f7fa fbd1 	bl	80001c0 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <OSTaskDel+0x1ec>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8005a26:	f7ff fa99 	bl	8004f5c <OS_Sched>
    }
    return (OS_ERR_NONE);
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20001ac8 	.word	0x20001ac8
 8005a38:	20001acc 	.word	0x20001acc
 8005a3c:	20002564 	.word	0x20002564
 8005a40:	200018bc 	.word	0x200018bc
 8005a44:	200018b8 	.word	0x200018b8
 8005a48:	200012d0 	.word	0x200012d0
 8005a4c:	20001849 	.word	0x20001849
 8005a50:	200015b8 	.word	0x200015b8
 8005a54:	20001844 	.word	0x20001844
 8005a58:	080093e4 	.word	0x080093e4
 8005a5c:	200012d9 	.word	0x200012d9

08005a60 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b3f      	cmp	r3, #63	; 0x3f
 8005a76:	d906      	bls.n	8005a86 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2bff      	cmp	r3, #255	; 0xff
 8005a7c:	d003      	beq.n	8005a86 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	222a      	movs	r2, #42	; 0x2a
 8005a82:	701a      	strb	r2, [r3, #0]
            return;
 8005a84:	e03c      	b.n	8005b00 <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	220c      	movs	r2, #12
 8005a90:	701a      	strb	r2, [r3, #0]
        return;
 8005a92:	e035      	b.n	8005b00 <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <OSTaskNameSet+0xa8>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2212      	movs	r2, #18
 8005aa0:	701a      	strb	r2, [r3, #0]
        return;
 8005aa2:	e02d      	b.n	8005b00 <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8005aa4:	2040      	movs	r0, #64	; 0x40
 8005aa6:	f7fa fb7d 	bl	80001a4 <OS_CPU_SR_Save>
 8005aaa:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2bff      	cmp	r3, #255	; 0xff
 8005ab0:	d104      	bne.n	8005abc <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 8005ab2:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <OSTaskNameSet+0xac>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005aba:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <OSTaskNameSet+0xb0>)
 8005ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac4:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8005acc:	6978      	ldr	r0, [r7, #20]
 8005ace:	f7fa fb77 	bl	80001c0 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2243      	movs	r2, #67	; 0x43
 8005ad6:	701a      	strb	r2, [r3, #0]
        return;
 8005ad8:	e012      	b.n	8005b00 <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d106      	bne.n	8005aee <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8005ae0:	6978      	ldr	r0, [r7, #20]
 8005ae2:	f7fa fb6d 	bl	80001c0 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2243      	movs	r2, #67	; 0x43
 8005aea:	701a      	strb	r2, [r3, #0]
        return;
 8005aec:	e008      	b.n	8005b00 <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	651a      	str	r2, [r3, #80]	; 0x50
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f7fa fb63 	bl	80001c0 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
}
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20001ac8 	.word	0x20001ac8
 8005b0c:	20001acc 	.word	0x20001acc
 8005b10:	20002564 	.word	0x20002564

08005b14 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b3e      	cmp	r3, #62	; 0x3e
 8005b26:	d901      	bls.n	8005b2c <OSTaskResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8005b28:	232a      	movs	r3, #42	; 0x2a
 8005b2a:	e063      	b.n	8005bf4 <OSTaskResume+0xe0>
    }
#endif
    OS_ENTER_CRITICAL();
 8005b2c:	2040      	movs	r0, #64	; 0x40
 8005b2e:	f7fa fb39 	bl	80001a4 <OS_CPU_SR_Save>
 8005b32:	60f8      	str	r0, [r7, #12]
    ptcb = OSTCBPrioTbl[prio];
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	4a31      	ldr	r2, [pc, #196]	; (8005bfc <OSTaskResume+0xe8>)
 8005b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3c:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <OSTaskResume+0x3a>
        OS_EXIT_CRITICAL();
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7fa fb3b 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
 8005b4a:	2346      	movs	r3, #70	; 0x46
 8005b4c:	e052      	b.n	8005bf4 <OSTaskResume+0xe0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d104      	bne.n	8005b5e <OSTaskResume+0x4a>
        OS_EXIT_CRITICAL();
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7fa fb33 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005b5a:	2343      	movs	r3, #67	; 0x43
 8005b5c:	e04a      	b.n	8005bf4 <OSTaskResume+0xe0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d03f      	beq.n	8005bec <OSTaskResume+0xd8>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b72:	f023 0308 	bic.w	r3, r3, #8
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b84:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d12a      	bne.n	8005be2 <OSTaskResume+0xce>
            if (ptcb->OSTCBDly == 0u) {
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d122      	bne.n	8005bda <OSTaskResume+0xc6>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <OSTaskResume+0xec>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <OSTaskResume+0xec>)
 8005ba4:	701a      	strb	r2, [r3, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bac:	461a      	mov	r2, r3
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <OSTaskResume+0xf0>)
 8005bb0:	5c9a      	ldrb	r2, [r3, r2]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <OSTaskResume+0xf0>)
 8005bc4:	545a      	strb	r2, [r3, r1]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7fa fafa 	bl	80001c0 <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <OSTaskResume+0xf4>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d109      	bne.n	8005be8 <OSTaskResume+0xd4>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
 8005bd4:	f7ff f9c2 	bl	8004f5c <OS_Sched>
 8005bd8:	e006      	b.n	8005be8 <OSTaskResume+0xd4>
                }
            } else {
                OS_EXIT_CRITICAL();
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7fa faf0 	bl	80001c0 <OS_CPU_SR_Restore>
 8005be0:	e002      	b.n	8005be8 <OSTaskResume+0xd4>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7fa faec 	bl	80001c0 <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
 8005be8:	2300      	movs	r3, #0
 8005bea:	e003      	b.n	8005bf4 <OSTaskResume+0xe0>
    }
    OS_EXIT_CRITICAL();
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7fa fae7 	bl	80001c0 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8005bf2:	2344      	movs	r3, #68	; 0x44
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20002564 	.word	0x20002564
 8005c00:	200018b8 	.word	0x200018b8
 8005c04:	200018bc 	.word	0x200018bc
 8005c08:	200012d9 	.word	0x200012d9

08005c0c <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	2b3f      	cmp	r3, #63	; 0x3f
 8005c20:	d904      	bls.n	8005c2c <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	2bff      	cmp	r3, #255	; 0xff
 8005c26:	d001      	beq.n	8005c2c <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8005c28:	232a      	movs	r3, #42	; 0x2a
 8005c2a:	e054      	b.n	8005cd6 <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8005c32:	2309      	movs	r3, #9
 8005c34:	e04f      	b.n	8005cd6 <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8005c42:	2040      	movs	r0, #64	; 0x40
 8005c44:	f7fa faae 	bl	80001a4 <OS_CPU_SR_Save>
 8005c48:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	2bff      	cmp	r3, #255	; 0xff
 8005c4e:	d104      	bne.n	8005c5a <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8005c50:	4b23      	ldr	r3, [pc, #140]	; (8005ce0 <OSTaskStkChk+0xd4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c58:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <OSTaskStkChk+0xd8>)
 8005c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c62:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 8005c6a:	6978      	ldr	r0, [r7, #20]
 8005c6c:	f7fa faa8 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005c70:	2343      	movs	r3, #67	; 0x43
 8005c72:	e030      	b.n	8005cd6 <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d104      	bne.n	8005c84 <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 8005c7a:	6978      	ldr	r0, [r7, #20]
 8005c7c:	f7fa faa0 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005c80:	2343      	movs	r3, #67	; 0x43
 8005c82:	e028      	b.n	8005cd6 <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	8a1b      	ldrh	r3, [r3, #16]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8005c90:	6978      	ldr	r0, [r7, #20]
 8005c92:	f7fa fa95 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8005c96:	2345      	movs	r3, #69	; 0x45
 8005c98:	e01d      	b.n	8005cd6 <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7fa fa88 	bl	80001c0 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8005cb0:	e002      	b.n	8005cb8 <OSTaskStkChk+0xac>
        nfree++;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	1d1a      	adds	r2, r3, #4
 8005cbc:	61fa      	str	r2, [r7, #28]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f6      	beq.n	8005cb2 <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20001acc 	.word	0x20001acc
 8005ce4:	20002564 	.word	0x20002564

08005ce8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b3f      	cmp	r3, #63	; 0x3f
 8005cfa:	d101      	bne.n	8005d00 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8005cfc:	2347      	movs	r3, #71	; 0x47
 8005cfe:	e06a      	b.n	8005dd6 <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	2b3e      	cmp	r3, #62	; 0x3e
 8005d04:	d904      	bls.n	8005d10 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	2bff      	cmp	r3, #255	; 0xff
 8005d0a:	d001      	beq.n	8005d10 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8005d0c:	232a      	movs	r3, #42	; 0x2a
 8005d0e:	e062      	b.n	8005dd6 <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8005d10:	2040      	movs	r0, #64	; 0x40
 8005d12:	f7fa fa47 	bl	80001a4 <OS_CPU_SR_Save>
 8005d16:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2bff      	cmp	r3, #255	; 0xff
 8005d1c:	d107      	bne.n	8005d2e <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8005d1e:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <OSTaskSuspend+0xf8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d26:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
 8005d2c:	e00b      	b.n	8005d46 <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8005d2e:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <OSTaskSuspend+0xf8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d36:	79fa      	ldrb	r2, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d102      	bne.n	8005d42 <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
 8005d40:	e001      	b.n	8005d46 <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <OSTaskSuspend+0xfc>)
 8005d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4e:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 8005d56:	6938      	ldr	r0, [r7, #16]
 8005d58:	f7fa fa32 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8005d5c:	2348      	movs	r3, #72	; 0x48
 8005d5e:	e03a      	b.n	8005dd6 <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d104      	bne.n	8005d70 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 8005d66:	6938      	ldr	r0, [r7, #16]
 8005d68:	f7fa fa2a 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8005d6c:	2343      	movs	r3, #67	; 0x43
 8005d6e:	e032      	b.n	8005dd6 <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d76:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <OSTaskSuspend+0x100>)
 8005d7c:	5cd1      	ldrb	r1, [r2, r3]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d84:	43db      	mvns	r3, r3
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	b2d1      	uxtb	r1, r2
 8005d8e:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <OSTaskSuspend+0x100>)
 8005d90:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <OSTaskSuspend+0x100>)
 8005d96:	5cd3      	ldrb	r3, [r2, r3]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005da2:	43db      	mvns	r3, r3
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <OSTaskSuspend+0x104>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	4013      	ands	r3, r2
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <OSTaskSuspend+0x104>)
 8005db0:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005db8:	f043 0308 	orr.w	r3, r3, #8
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 8005dc4:	6938      	ldr	r0, [r7, #16]
 8005dc6:	f7fa f9fb 	bl	80001c0 <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8005dd0:	f7ff f8c4 	bl	8004f5c <OS_Sched>
    }
    return (OS_ERR_NONE);
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20001acc 	.word	0x20001acc
 8005de4:	20002564 	.word	0x20002564
 8005de8:	200018bc 	.word	0x200018bc
 8005dec:	200018b8 	.word	0x200018b8

08005df0 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <OS_TaskReturn+0x18>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe faad 	bl	8004358 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8005dfe:	20ff      	movs	r0, #255	; 0xff
 8005e00:	f7ff fd36 	bl	8005870 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8005e04:	bf00      	nop
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20001acc 	.word	0x20001acc

08005e0c <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d010      	beq.n	8005e46 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8005e2e:	e007      	b.n	8005e40 <OS_TaskStkClr+0x34>
                size--;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	60fa      	str	r2, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f4      	bne.n	8005e30 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8005e5c:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <OSTimeDly+0x94>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d138      	bne.n	8005ed6 <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8005e64:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <OSTimeDly+0x98>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d136      	bne.n	8005eda <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d034      	beq.n	8005edc <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 8005e72:	2040      	movs	r0, #64	; 0x40
 8005e74:	f7fa f996 	bl	80001a4 <OS_CPU_SR_Save>
 8005e78:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8005e7a:	4b1c      	ldr	r3, [pc, #112]	; (8005eec <OSTimeDly+0x9c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e82:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	4a1a      	ldr	r2, [pc, #104]	; (8005ef0 <OSTimeDly+0xa0>)
 8005e88:	5cd1      	ldrb	r1, [r2, r3]
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <OSTimeDly+0x9c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e92:	43db      	mvns	r3, r3
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	400a      	ands	r2, r1
 8005e9a:	b2d1      	uxtb	r1, r2
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <OSTimeDly+0xa0>)
 8005e9e:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <OSTimeDly+0xa0>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <OSTimeDly+0x9c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <OSTimeDly+0xa4>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <OSTimeDly+0xa4>)
 8005ec0:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <OSTimeDly+0x9c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7fa f978 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8005ed0:	f7ff f844 	bl	8004f5c <OS_Sched>
 8005ed4:	e002      	b.n	8005edc <OSTimeDly+0x8c>
        return;
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <OSTimeDly+0x8c>
        return;
 8005eda:	bf00      	nop
    }
}
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20001ac8 	.word	0x20001ac8
 8005ee8:	200012d0 	.word	0x200012d0
 8005eec:	20001acc 	.word	0x20001acc
 8005ef0:	200018bc 	.word	0x200018bc
 8005ef4:	200018b8 	.word	0x200018b8

08005ef8 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4623      	mov	r3, r4
 8005f08:	71fb      	strb	r3, [r7, #7]
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71bb      	strb	r3, [r7, #6]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	717b      	strb	r3, [r7, #5]
 8005f12:	4613      	mov	r3, r2
 8005f14:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8005f16:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <OSTimeDlyHMSM+0xbc>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 8005f1e:	2355      	movs	r3, #85	; 0x55
 8005f20:	e043      	b.n	8005faa <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8005f22:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <OSTimeDlyHMSM+0xc0>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8005f2a:	2332      	movs	r3, #50	; 0x32
 8005f2c:	e03d      	b.n	8005faa <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 8005f34:	79bb      	ldrb	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 8005f3a:	797b      	ldrb	r3, [r7, #5]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 8005f40:	887b      	ldrh	r3, [r7, #2]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 8005f46:	2354      	movs	r3, #84	; 0x54
 8005f48:	e02f      	b.n	8005faa <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 8005f4a:	79bb      	ldrb	r3, [r7, #6]
 8005f4c:	2b3b      	cmp	r3, #59	; 0x3b
 8005f4e:	d901      	bls.n	8005f54 <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8005f50:	2351      	movs	r3, #81	; 0x51
 8005f52:	e02a      	b.n	8005faa <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 8005f54:	797b      	ldrb	r3, [r7, #5]
 8005f56:	2b3b      	cmp	r3, #59	; 0x3b
 8005f58:	d901      	bls.n	8005f5e <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 8005f5a:	2352      	movs	r3, #82	; 0x52
 8005f5c:	e025      	b.n	8005faa <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 8005f5e:	887b      	ldrh	r3, [r7, #2]
 8005f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f64:	d301      	bcc.n	8005f6a <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 8005f66:	2353      	movs	r3, #83	; 0x53
 8005f68:	e01f      	b.n	8005faa <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005f70:	fb02 f103 	mul.w	r1, r2, r3
 8005f74:	79ba      	ldrb	r2, [r7, #6]
 8005f76:	4613      	mov	r3, r2
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	18ca      	adds	r2, r1, r3
 8005f80:	797b      	ldrb	r3, [r7, #5]
 8005f82:	4413      	add	r3, r2
 8005f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f88:	fb02 f203 	mul.w	r2, r2, r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 8005f8c:	887b      	ldrh	r3, [r7, #2]
 8005f8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	4909      	ldr	r1, [pc, #36]	; (8005fbc <OSTimeDlyHMSM+0xc4>)
 8005f98:	fba1 1303 	umull	r1, r3, r1, r3
 8005f9c:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8005f9e:	4413      	add	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff ff54 	bl	8005e50 <OSTimeDly>
    return (OS_ERR_NONE);
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd90      	pop	{r4, r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20001ac8 	.word	0x20001ac8
 8005fb8:	200012d0 	.word	0x200012d0
 8005fbc:	10624dd3 	.word	0x10624dd3

08005fc0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0u
INT8U  OSTimeDlyResume (INT8U prio)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
#endif



    if (prio >= OS_LOWEST_PRIO) {
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd2:	d901      	bls.n	8005fd8 <OSTimeDlyResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8005fd4:	232a      	movs	r3, #42	; 0x2a
 8005fd6:	e067      	b.n	80060a8 <OSTimeDlyResume+0xe8>
    }
    OS_ENTER_CRITICAL();
 8005fd8:	2040      	movs	r0, #64	; 0x40
 8005fda:	f7fa f8e3 	bl	80001a4 <OS_CPU_SR_Save>
 8005fde:	60f8      	str	r0, [r7, #12]
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	4a33      	ldr	r2, [pc, #204]	; (80060b0 <OSTimeDlyResume+0xf0>)
 8005fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe8:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <OSTimeDlyResume+0x3a>
        OS_EXIT_CRITICAL();
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7fa f8e5 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8005ff6:	2343      	movs	r3, #67	; 0x43
 8005ff8:	e056      	b.n	80060a8 <OSTimeDlyResume+0xe8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d104      	bne.n	800600a <OSTimeDlyResume+0x4a>
        OS_EXIT_CRITICAL();
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7fa f8dd 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8006006:	2343      	movs	r3, #67	; 0x43
 8006008:	e04e      	b.n	80060a8 <OSTimeDlyResume+0xe8>
    }
    if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <OSTimeDlyResume+0x5c>
        OS_EXIT_CRITICAL();
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7fa f8d4 	bl	80001c0 <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 8006018:	2350      	movs	r3, #80	; 0x50
 800601a:	e045      	b.n	80060a8 <OSTimeDlyResume+0xe8>
    }

    ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006028:	f003 0337 	and.w	r3, r3, #55	; 0x37
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <OSTimeDlyResume+0x8c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006036:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800604a:	e003      	b.n	8006054 <OSTimeDlyResume+0x94>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11e      	bne.n	80060a0 <OSTimeDlyResume+0xe0>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8006068:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <OSTimeDlyResume+0xf4>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4313      	orrs	r3, r2
 800606e:	b2da      	uxtb	r2, r3
 8006070:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <OSTimeDlyResume+0xf4>)
 8006072:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800607a:	461a      	mov	r2, r3
 800607c:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <OSTimeDlyResume+0xf8>)
 800607e:	5c9a      	ldrb	r2, [r3, r2]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800608c:	4313      	orrs	r3, r2
 800608e:	b2da      	uxtb	r2, r3
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <OSTimeDlyResume+0xf8>)
 8006092:	545a      	strb	r2, [r3, r1]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7fa f893 	bl	80001c0 <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
 800609a:	f7fe ff5f 	bl	8004f5c <OS_Sched>
 800609e:	e002      	b.n	80060a6 <OSTimeDlyResume+0xe6>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7fa f88d 	bl	80001c0 <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20002564 	.word	0x20002564
 80060b4:	200018b8 	.word	0x200018b8
 80060b8:	200018bc 	.word	0x200018bc

080060bc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80060c2:	2300      	movs	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80060c6:	2040      	movs	r0, #64	; 0x40
 80060c8:	f7fa f86c 	bl	80001a4 <OS_CPU_SR_Save>
 80060cc:	6078      	str	r0, [r7, #4]
    ticks = OSTime;
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <OSTimeGet+0x28>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fa f873 	bl	80001c0 <OS_CPU_SR_Restore>
    return (ticks);
 80060da:	683b      	ldr	r3, [r7, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20001ad4 	.word	0x20001ad4

080060e8 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <OSTmrSignal+0x20>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fb10 	bl	8005718 <OSSemPost>
 80060f8:	4603      	mov	r3, r0
 80060fa:	71fb      	strb	r3, [r7, #7]
    return (err);
 80060fc:	79fb      	ldrb	r3, [r7, #7]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200012d4 	.word	0x200012d4

0800610c <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8006112:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006116:	4838      	ldr	r0, [pc, #224]	; (80061f8 <OSTmr_Init+0xec>)
 8006118:	f7fe ff08 	bl	8004f2c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 800611c:	2138      	movs	r1, #56	; 0x38
 800611e:	4837      	ldr	r0, [pc, #220]	; (80061fc <OSTmr_Init+0xf0>)
 8006120:	f7fe ff04 	bl	8004f2c <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8006124:	2300      	movs	r3, #0
 8006126:	82fb      	strh	r3, [r7, #22]
 8006128:	e022      	b.n	8006170 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 800612a:	8afb      	ldrh	r3, [r7, #22]
 800612c:	3301      	adds	r3, #1
 800612e:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8006130:	8afa      	ldrh	r2, [r7, #22]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4a2f      	ldr	r2, [pc, #188]	; (80061f8 <OSTmr_Init+0xec>)
 800613c:	4413      	add	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8006140:	89fa      	ldrh	r2, [r7, #14]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4a2b      	ldr	r2, [pc, #172]	; (80061f8 <OSTmr_Init+0xec>)
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2264      	movs	r2, #100	; 0x64
 8006154:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4a26      	ldr	r2, [pc, #152]	; (8006200 <OSTmr_Init+0xf4>)
 8006168:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800616a:	8afb      	ldrh	r3, [r7, #22]
 800616c:	3301      	adds	r3, #1
 800616e:	82fb      	strh	r3, [r7, #22]
 8006170:	8afb      	ldrh	r3, [r7, #22]
 8006172:	2b0e      	cmp	r3, #14
 8006174:	d9d9      	bls.n	800612a <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 8006176:	8afa      	ldrh	r2, [r7, #22]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <OSTmr_Init+0xec>)
 8006182:	4413      	add	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2264      	movs	r2, #100	; 0x64
 800618a:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2200      	movs	r2, #0
 8006198:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4a18      	ldr	r2, [pc, #96]	; (8006200 <OSTmr_Init+0xf4>)
 800619e:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 80061a0:	4b18      	ldr	r3, [pc, #96]	; (8006204 <OSTmr_Init+0xf8>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 80061a6:	4b18      	ldr	r3, [pc, #96]	; (8006208 <OSTmr_Init+0xfc>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 80061ac:	4b17      	ldr	r3, [pc, #92]	; (800620c <OSTmr_Init+0x100>)
 80061ae:	2210      	movs	r2, #16
 80061b0:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <OSTmr_Init+0x104>)
 80061b4:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <OSTmr_Init+0xec>)
 80061b6:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80061b8:	2001      	movs	r0, #1
 80061ba:	f7ff f9d9 	bl	8005570 <OSSemCreate>
 80061be:	4603      	mov	r3, r0
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <OSTmr_Init+0x108>)
 80061c2:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80061c4:	2000      	movs	r0, #0
 80061c6:	f7ff f9d3 	bl	8005570 <OSSemCreate>
 80061ca:	4603      	mov	r3, r0
 80061cc:	4a12      	ldr	r2, [pc, #72]	; (8006218 <OSTmr_Init+0x10c>)
 80061ce:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80061d0:	4b10      	ldr	r3, [pc, #64]	; (8006214 <OSTmr_Init+0x108>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	1dfa      	adds	r2, r7, #7
 80061d6:	4911      	ldr	r1, [pc, #68]	; (800621c <OSTmr_Init+0x110>)
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe f9db 	bl	8004594 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80061de:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <OSTmr_Init+0x10c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1dfa      	adds	r2, r7, #7
 80061e4:	490e      	ldr	r1, [pc, #56]	; (8006220 <OSTmr_Init+0x114>)
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe f9d4 	bl	8004594 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 80061ec:	f000 f81a 	bl	8006224 <OSTmr_InitTask>
}
 80061f0:	bf00      	nop
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20001334 	.word	0x20001334
 80061fc:	20001298 	.word	0x20001298
 8006200:	080093e8 	.word	0x080093e8
 8006204:	20001ad0 	.word	0x20001ad0
 8006208:	200012e0 	.word	0x200012e0
 800620c:	2000183c 	.word	0x2000183c
 8006210:	20001294 	.word	0x20001294
 8006214:	20001ad8 	.word	0x20001ad8
 8006218:	200012d4 	.word	0x200012d4
 800621c:	080093ec 	.word	0x080093ec
 8006220:	08009400 	.word	0x08009400

08006224 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 800622a:	2303      	movs	r3, #3
 800622c:	9304      	str	r3, [sp, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	9303      	str	r3, [sp, #12]
 8006232:	2380      	movs	r3, #128	; 0x80
 8006234:	9302      	str	r3, [sp, #8]
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <OSTmr_InitTask+0x3c>)
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	233d      	movs	r3, #61	; 0x3d
 8006242:	4a08      	ldr	r2, [pc, #32]	; (8006264 <OSTmr_InitTask+0x40>)
 8006244:	2100      	movs	r1, #0
 8006246:	4808      	ldr	r0, [pc, #32]	; (8006268 <OSTmr_InitTask+0x44>)
 8006248:	f7ff faa6 	bl	8005798 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 800624c:	1dfb      	adds	r3, r7, #7
 800624e:	461a      	mov	r2, r3
 8006250:	4906      	ldr	r1, [pc, #24]	; (800626c <OSTmr_InitTask+0x48>)
 8006252:	203d      	movs	r0, #61	; 0x3d
 8006254:	f7ff fc04 	bl	8005a60 <OSTaskNameSet>
#endif
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	200018c4 	.word	0x200018c4
 8006264:	20001ac0 	.word	0x20001ac0
 8006268:	080063e9 	.word	0x080063e9
 800626c:	08009414 	.word	0x08009414

08006270 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2203      	movs	r2, #3
 8006280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <OSTmr_Link+0xc8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	441a      	add	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	615a      	str	r2, [r3, #20]
 8006298:	e012      	b.n	80062c0 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	4b24      	ldr	r3, [pc, #144]	; (8006338 <OSTmr_Link+0xc8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	615a      	str	r2, [r3, #20]
 80062b0:	e006      	b.n	80062c0 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	4b20      	ldr	r3, [pc, #128]	; (8006338 <OSTmr_Link+0xc8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	441a      	add	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	4b1d      	ldr	r3, [pc, #116]	; (800633c <OSTmr_Link+0xcc>)
 80062c6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ca:	1ad1      	subs	r1, r2, r3
 80062cc:	0849      	lsrs	r1, r1, #1
 80062ce:	440b      	add	r3, r1
 80062d0:	0899      	lsrs	r1, r3, #2
 80062d2:	460b      	mov	r3, r1
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	1a5b      	subs	r3, r3, r1
 80062d8:	1ad1      	subs	r1, r2, r3
 80062da:	460b      	mov	r3, r1
 80062dc:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80062de:	8afb      	ldrh	r3, [r7, #22]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4a17      	ldr	r2, [pc, #92]	; (8006340 <OSTmr_Link+0xd0>)
 80062e4:	4413      	add	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2201      	movs	r2, #1
 8006300:	809a      	strh	r2, [r3, #4]
 8006302:	e011      	b.n	8006328 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	889b      	ldrh	r3, [r3, #4]
 8006320:	3301      	adds	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	611a      	str	r2, [r3, #16]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	20001ad0 	.word	0x20001ad0
 800633c:	24924925 	.word	0x24924925
 8006340:	20001298 	.word	0x20001298

08006344 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	4b23      	ldr	r3, [pc, #140]	; (80063e0 <OSTmr_Unlink+0x9c>)
 8006352:	fba3 1302 	umull	r1, r3, r3, r2
 8006356:	1ad1      	subs	r1, r2, r3
 8006358:	0849      	lsrs	r1, r1, #1
 800635a:	440b      	add	r3, r1
 800635c:	0899      	lsrs	r1, r3, #2
 800635e:	460b      	mov	r3, r1
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	1a5b      	subs	r3, r3, r1
 8006364:	1ad1      	subs	r1, r2, r3
 8006366:	460b      	mov	r3, r1
 8006368:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800636a:	8afb      	ldrh	r3, [r7, #22]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <OSTmr_Unlink+0xa0>)
 8006370:	4413      	add	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d10c      	bne.n	8006398 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	611a      	str	r2, [r3, #16]
 8006396:	e00e      	b.n	80063b6 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	889b      	ldrh	r3, [r3, #4]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	809a      	strh	r2, [r3, #4]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	24924925 	.word	0x24924925
 80063e4:	20001298 	.word	0x20001298

080063e8 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <OSTmr_Task+0xb4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f107 020b 	add.w	r2, r7, #11
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f8f6 	bl	80055ec <OSSemPend>
        OSSchedLock();
 8006400:	f7fe f98a 	bl	8004718 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <OSTmr_Task+0xb8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <OSTmr_Task+0xb8>)
 800640c:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 800640e:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <OSTmr_Task+0xb8>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <OSTmr_Task+0xbc>)
 8006414:	fba3 1302 	umull	r1, r3, r3, r2
 8006418:	1ad1      	subs	r1, r2, r3
 800641a:	0849      	lsrs	r1, r1, #1
 800641c:	440b      	add	r3, r1
 800641e:	0899      	lsrs	r1, r3, #2
 8006420:	460b      	mov	r3, r1
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	1a5b      	subs	r3, r3, r1
 8006426:	1ad1      	subs	r1, r2, r3
 8006428:	460b      	mov	r3, r1
 800642a:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 800642c:	8b7b      	ldrh	r3, [r7, #26]
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <OSTmr_Task+0xc0>)
 8006432:	4413      	add	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800643c:	e027      	b.n	800648e <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <OSTmr_Task+0xb8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d11c      	bne.n	800648a <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8006450:	69f8      	ldr	r0, [r7, #28]
 8006452:	f7ff ff77 	bl	8006344 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800645c:	2b02      	cmp	r3, #2
 800645e:	d104      	bne.n	800646a <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8006460:	2101      	movs	r1, #1
 8006462:	69f8      	ldr	r0, [r7, #28]
 8006464:	f7ff ff04 	bl	8006270 <OSTmr_Link>
 8006468:	e003      	b.n	8006472 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4611      	mov	r1, r2
 8006486:	69f8      	ldr	r0, [r7, #28]
 8006488:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1d4      	bne.n	800643e <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8006494:	f7fe f968 	bl	8004768 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8006498:	e7aa      	b.n	80063f0 <OSTmr_Task+0x8>
 800649a:	bf00      	nop
 800649c:	200012d4 	.word	0x200012d4
 80064a0:	20001ad0 	.word	0x20001ad0
 80064a4:	24924925 	.word	0x24924925
 80064a8:	20001298 	.word	0x20001298

080064ac <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 80064fe:	bf00      	nop
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <__errno>:
 8006524:	4b01      	ldr	r3, [pc, #4]	; (800652c <__errno+0x8>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000014 	.word	0x20000014

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	2600      	movs	r6, #0
 8006534:	4d0c      	ldr	r5, [pc, #48]	; (8006568 <__libc_init_array+0x38>)
 8006536:	4c0d      	ldr	r4, [pc, #52]	; (800656c <__libc_init_array+0x3c>)
 8006538:	1b64      	subs	r4, r4, r5
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	f002 febc 	bl	80092bc <_init>
 8006544:	2600      	movs	r6, #0
 8006546:	4d0a      	ldr	r5, [pc, #40]	; (8006570 <__libc_init_array+0x40>)
 8006548:	4c0a      	ldr	r4, [pc, #40]	; (8006574 <__libc_init_array+0x44>)
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	4798      	blx	r3
 800655a:	3601      	adds	r6, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	4798      	blx	r3
 8006564:	3601      	adds	r6, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	080099b4 	.word	0x080099b4
 800656c:	080099b4 	.word	0x080099b4
 8006570:	080099b4 	.word	0x080099b4
 8006574:	080099b8 	.word	0x080099b8

08006578 <memset>:
 8006578:	4603      	mov	r3, r0
 800657a:	4402      	add	r2, r0
 800657c:	4293      	cmp	r3, r2
 800657e:	d100      	bne.n	8006582 <memset+0xa>
 8006580:	4770      	bx	lr
 8006582:	f803 1b01 	strb.w	r1, [r3], #1
 8006586:	e7f9      	b.n	800657c <memset+0x4>

08006588 <__cvt>:
 8006588:	2b00      	cmp	r3, #0
 800658a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658e:	461f      	mov	r7, r3
 8006590:	bfbb      	ittet	lt
 8006592:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006596:	461f      	movlt	r7, r3
 8006598:	2300      	movge	r3, #0
 800659a:	232d      	movlt	r3, #45	; 0x2d
 800659c:	b088      	sub	sp, #32
 800659e:	4614      	mov	r4, r2
 80065a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80065a4:	7013      	strb	r3, [r2, #0]
 80065a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80065ac:	f023 0820 	bic.w	r8, r3, #32
 80065b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065b4:	d005      	beq.n	80065c2 <__cvt+0x3a>
 80065b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065ba:	d100      	bne.n	80065be <__cvt+0x36>
 80065bc:	3501      	adds	r5, #1
 80065be:	2302      	movs	r3, #2
 80065c0:	e000      	b.n	80065c4 <__cvt+0x3c>
 80065c2:	2303      	movs	r3, #3
 80065c4:	aa07      	add	r2, sp, #28
 80065c6:	9204      	str	r2, [sp, #16]
 80065c8:	aa06      	add	r2, sp, #24
 80065ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065ce:	e9cd 3500 	strd	r3, r5, [sp]
 80065d2:	4622      	mov	r2, r4
 80065d4:	463b      	mov	r3, r7
 80065d6:	f000 fce7 	bl	8006fa8 <_dtoa_r>
 80065da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065de:	4606      	mov	r6, r0
 80065e0:	d102      	bne.n	80065e8 <__cvt+0x60>
 80065e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065e4:	07db      	lsls	r3, r3, #31
 80065e6:	d522      	bpl.n	800662e <__cvt+0xa6>
 80065e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065ec:	eb06 0905 	add.w	r9, r6, r5
 80065f0:	d110      	bne.n	8006614 <__cvt+0x8c>
 80065f2:	7833      	ldrb	r3, [r6, #0]
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d10a      	bne.n	800660e <__cvt+0x86>
 80065f8:	2200      	movs	r2, #0
 80065fa:	2300      	movs	r3, #0
 80065fc:	4620      	mov	r0, r4
 80065fe:	4639      	mov	r1, r7
 8006600:	f7fa fa92 	bl	8000b28 <__aeabi_dcmpeq>
 8006604:	b918      	cbnz	r0, 800660e <__cvt+0x86>
 8006606:	f1c5 0501 	rsb	r5, r5, #1
 800660a:	f8ca 5000 	str.w	r5, [sl]
 800660e:	f8da 3000 	ldr.w	r3, [sl]
 8006612:	4499      	add	r9, r3
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	4620      	mov	r0, r4
 800661a:	4639      	mov	r1, r7
 800661c:	f7fa fa84 	bl	8000b28 <__aeabi_dcmpeq>
 8006620:	b108      	cbz	r0, 8006626 <__cvt+0x9e>
 8006622:	f8cd 901c 	str.w	r9, [sp, #28]
 8006626:	2230      	movs	r2, #48	; 0x30
 8006628:	9b07      	ldr	r3, [sp, #28]
 800662a:	454b      	cmp	r3, r9
 800662c:	d307      	bcc.n	800663e <__cvt+0xb6>
 800662e:	4630      	mov	r0, r6
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006634:	1b9b      	subs	r3, r3, r6
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	b008      	add	sp, #32
 800663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	9107      	str	r1, [sp, #28]
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e7f0      	b.n	8006628 <__cvt+0xa0>

08006646 <__exponent>:
 8006646:	4603      	mov	r3, r0
 8006648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800664a:	2900      	cmp	r1, #0
 800664c:	f803 2b02 	strb.w	r2, [r3], #2
 8006650:	bfb6      	itet	lt
 8006652:	222d      	movlt	r2, #45	; 0x2d
 8006654:	222b      	movge	r2, #43	; 0x2b
 8006656:	4249      	neglt	r1, r1
 8006658:	2909      	cmp	r1, #9
 800665a:	7042      	strb	r2, [r0, #1]
 800665c:	dd2b      	ble.n	80066b6 <__exponent+0x70>
 800665e:	f10d 0407 	add.w	r4, sp, #7
 8006662:	46a4      	mov	ip, r4
 8006664:	270a      	movs	r7, #10
 8006666:	fb91 f6f7 	sdiv	r6, r1, r7
 800666a:	460a      	mov	r2, r1
 800666c:	46a6      	mov	lr, r4
 800666e:	fb07 1516 	mls	r5, r7, r6, r1
 8006672:	2a63      	cmp	r2, #99	; 0x63
 8006674:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006678:	4631      	mov	r1, r6
 800667a:	f104 34ff 	add.w	r4, r4, #4294967295
 800667e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006682:	dcf0      	bgt.n	8006666 <__exponent+0x20>
 8006684:	3130      	adds	r1, #48	; 0x30
 8006686:	f1ae 0502 	sub.w	r5, lr, #2
 800668a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800668e:	4629      	mov	r1, r5
 8006690:	1c44      	adds	r4, r0, #1
 8006692:	4561      	cmp	r1, ip
 8006694:	d30a      	bcc.n	80066ac <__exponent+0x66>
 8006696:	f10d 0209 	add.w	r2, sp, #9
 800669a:	eba2 020e 	sub.w	r2, r2, lr
 800669e:	4565      	cmp	r5, ip
 80066a0:	bf88      	it	hi
 80066a2:	2200      	movhi	r2, #0
 80066a4:	4413      	add	r3, r2
 80066a6:	1a18      	subs	r0, r3, r0
 80066a8:	b003      	add	sp, #12
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066b4:	e7ed      	b.n	8006692 <__exponent+0x4c>
 80066b6:	2330      	movs	r3, #48	; 0x30
 80066b8:	3130      	adds	r1, #48	; 0x30
 80066ba:	7083      	strb	r3, [r0, #2]
 80066bc:	70c1      	strb	r1, [r0, #3]
 80066be:	1d03      	adds	r3, r0, #4
 80066c0:	e7f1      	b.n	80066a6 <__exponent+0x60>
	...

080066c4 <_printf_float>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	b091      	sub	sp, #68	; 0x44
 80066ca:	460c      	mov	r4, r1
 80066cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80066d0:	4616      	mov	r6, r2
 80066d2:	461f      	mov	r7, r3
 80066d4:	4605      	mov	r5, r0
 80066d6:	f001 fa55 	bl	8007b84 <_localeconv_r>
 80066da:	6803      	ldr	r3, [r0, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	9309      	str	r3, [sp, #36]	; 0x24
 80066e0:	f7f9 fdf6 	bl	80002d0 <strlen>
 80066e4:	2300      	movs	r3, #0
 80066e6:	930e      	str	r3, [sp, #56]	; 0x38
 80066e8:	f8d8 3000 	ldr.w	r3, [r8]
 80066ec:	900a      	str	r0, [sp, #40]	; 0x28
 80066ee:	3307      	adds	r3, #7
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	f103 0208 	add.w	r2, r3, #8
 80066f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066fc:	f8d4 b000 	ldr.w	fp, [r4]
 8006700:	f8c8 2000 	str.w	r2, [r8]
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800670c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006710:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006714:	930b      	str	r3, [sp, #44]	; 0x2c
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	4640      	mov	r0, r8
 800671c:	4b9c      	ldr	r3, [pc, #624]	; (8006990 <_printf_float+0x2cc>)
 800671e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006720:	f7fa fa34 	bl	8000b8c <__aeabi_dcmpun>
 8006724:	bb70      	cbnz	r0, 8006784 <_printf_float+0xc0>
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	4640      	mov	r0, r8
 800672c:	4b98      	ldr	r3, [pc, #608]	; (8006990 <_printf_float+0x2cc>)
 800672e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006730:	f7fa fa0e 	bl	8000b50 <__aeabi_dcmple>
 8006734:	bb30      	cbnz	r0, 8006784 <_printf_float+0xc0>
 8006736:	2200      	movs	r2, #0
 8006738:	2300      	movs	r3, #0
 800673a:	4640      	mov	r0, r8
 800673c:	4651      	mov	r1, sl
 800673e:	f7fa f9fd 	bl	8000b3c <__aeabi_dcmplt>
 8006742:	b110      	cbz	r0, 800674a <_printf_float+0x86>
 8006744:	232d      	movs	r3, #45	; 0x2d
 8006746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674a:	4b92      	ldr	r3, [pc, #584]	; (8006994 <_printf_float+0x2d0>)
 800674c:	4892      	ldr	r0, [pc, #584]	; (8006998 <_printf_float+0x2d4>)
 800674e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006752:	bf94      	ite	ls
 8006754:	4698      	movls	r8, r3
 8006756:	4680      	movhi	r8, r0
 8006758:	2303      	movs	r3, #3
 800675a:	f04f 0a00 	mov.w	sl, #0
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	f02b 0304 	bic.w	r3, fp, #4
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	4633      	mov	r3, r6
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	9700      	str	r7, [sp, #0]
 800676e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006770:	f000 f9d4 	bl	8006b1c <_printf_common>
 8006774:	3001      	adds	r0, #1
 8006776:	f040 8090 	bne.w	800689a <_printf_float+0x1d6>
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	b011      	add	sp, #68	; 0x44
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	4642      	mov	r2, r8
 8006786:	4653      	mov	r3, sl
 8006788:	4640      	mov	r0, r8
 800678a:	4651      	mov	r1, sl
 800678c:	f7fa f9fe 	bl	8000b8c <__aeabi_dcmpun>
 8006790:	b148      	cbz	r0, 80067a6 <_printf_float+0xe2>
 8006792:	f1ba 0f00 	cmp.w	sl, #0
 8006796:	bfb8      	it	lt
 8006798:	232d      	movlt	r3, #45	; 0x2d
 800679a:	4880      	ldr	r0, [pc, #512]	; (800699c <_printf_float+0x2d8>)
 800679c:	bfb8      	it	lt
 800679e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067a2:	4b7f      	ldr	r3, [pc, #508]	; (80069a0 <_printf_float+0x2dc>)
 80067a4:	e7d3      	b.n	800674e <_printf_float+0x8a>
 80067a6:	6863      	ldr	r3, [r4, #4]
 80067a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	d142      	bne.n	8006836 <_printf_float+0x172>
 80067b0:	2306      	movs	r3, #6
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	9206      	str	r2, [sp, #24]
 80067b8:	aa0e      	add	r2, sp, #56	; 0x38
 80067ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80067be:	aa0d      	add	r2, sp, #52	; 0x34
 80067c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80067c4:	9203      	str	r2, [sp, #12]
 80067c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80067ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	4642      	mov	r2, r8
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4628      	mov	r0, r5
 80067d8:	4653      	mov	r3, sl
 80067da:	910b      	str	r1, [sp, #44]	; 0x2c
 80067dc:	f7ff fed4 	bl	8006588 <__cvt>
 80067e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067e2:	4680      	mov	r8, r0
 80067e4:	2947      	cmp	r1, #71	; 0x47
 80067e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067e8:	d108      	bne.n	80067fc <_printf_float+0x138>
 80067ea:	1cc8      	adds	r0, r1, #3
 80067ec:	db02      	blt.n	80067f4 <_printf_float+0x130>
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	4299      	cmp	r1, r3
 80067f2:	dd40      	ble.n	8006876 <_printf_float+0x1b2>
 80067f4:	f1a9 0902 	sub.w	r9, r9, #2
 80067f8:	fa5f f989 	uxtb.w	r9, r9
 80067fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006800:	d81f      	bhi.n	8006842 <_printf_float+0x17e>
 8006802:	464a      	mov	r2, r9
 8006804:	3901      	subs	r1, #1
 8006806:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800680a:	910d      	str	r1, [sp, #52]	; 0x34
 800680c:	f7ff ff1b 	bl	8006646 <__exponent>
 8006810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006812:	4682      	mov	sl, r0
 8006814:	1813      	adds	r3, r2, r0
 8006816:	2a01      	cmp	r2, #1
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	dc02      	bgt.n	8006822 <_printf_float+0x15e>
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	07d2      	lsls	r2, r2, #31
 8006820:	d501      	bpl.n	8006826 <_printf_float+0x162>
 8006822:	3301      	adds	r3, #1
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800682a:	2b00      	cmp	r3, #0
 800682c:	d09b      	beq.n	8006766 <_printf_float+0xa2>
 800682e:	232d      	movs	r3, #45	; 0x2d
 8006830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006834:	e797      	b.n	8006766 <_printf_float+0xa2>
 8006836:	2947      	cmp	r1, #71	; 0x47
 8006838:	d1bc      	bne.n	80067b4 <_printf_float+0xf0>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1ba      	bne.n	80067b4 <_printf_float+0xf0>
 800683e:	2301      	movs	r3, #1
 8006840:	e7b7      	b.n	80067b2 <_printf_float+0xee>
 8006842:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006846:	d118      	bne.n	800687a <_printf_float+0x1b6>
 8006848:	2900      	cmp	r1, #0
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	dd0b      	ble.n	8006866 <_printf_float+0x1a2>
 800684e:	6121      	str	r1, [r4, #16]
 8006850:	b913      	cbnz	r3, 8006858 <_printf_float+0x194>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	07d0      	lsls	r0, r2, #31
 8006856:	d502      	bpl.n	800685e <_printf_float+0x19a>
 8006858:	3301      	adds	r3, #1
 800685a:	440b      	add	r3, r1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	f04f 0a00 	mov.w	sl, #0
 8006862:	65a1      	str	r1, [r4, #88]	; 0x58
 8006864:	e7df      	b.n	8006826 <_printf_float+0x162>
 8006866:	b913      	cbnz	r3, 800686e <_printf_float+0x1aa>
 8006868:	6822      	ldr	r2, [r4, #0]
 800686a:	07d2      	lsls	r2, r2, #31
 800686c:	d501      	bpl.n	8006872 <_printf_float+0x1ae>
 800686e:	3302      	adds	r3, #2
 8006870:	e7f4      	b.n	800685c <_printf_float+0x198>
 8006872:	2301      	movs	r3, #1
 8006874:	e7f2      	b.n	800685c <_printf_float+0x198>
 8006876:	f04f 0967 	mov.w	r9, #103	; 0x67
 800687a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687c:	4299      	cmp	r1, r3
 800687e:	db05      	blt.n	800688c <_printf_float+0x1c8>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	6121      	str	r1, [r4, #16]
 8006884:	07d8      	lsls	r0, r3, #31
 8006886:	d5ea      	bpl.n	800685e <_printf_float+0x19a>
 8006888:	1c4b      	adds	r3, r1, #1
 800688a:	e7e7      	b.n	800685c <_printf_float+0x198>
 800688c:	2900      	cmp	r1, #0
 800688e:	bfcc      	ite	gt
 8006890:	2201      	movgt	r2, #1
 8006892:	f1c1 0202 	rsble	r2, r1, #2
 8006896:	4413      	add	r3, r2
 8006898:	e7e0      	b.n	800685c <_printf_float+0x198>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	055a      	lsls	r2, r3, #21
 800689e:	d407      	bmi.n	80068b0 <_printf_float+0x1ec>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	4642      	mov	r2, r8
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	d12b      	bne.n	8006906 <_printf_float+0x242>
 80068ae:	e764      	b.n	800677a <_printf_float+0xb6>
 80068b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068b4:	f240 80dd 	bls.w	8006a72 <_printf_float+0x3ae>
 80068b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	f7fa f932 	bl	8000b28 <__aeabi_dcmpeq>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d033      	beq.n	8006930 <_printf_float+0x26c>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	4a35      	ldr	r2, [pc, #212]	; (80069a4 <_printf_float+0x2e0>)
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af51 	beq.w	800677a <_printf_float+0xb6>
 80068d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068dc:	429a      	cmp	r2, r3
 80068de:	db02      	blt.n	80068e6 <_printf_float+0x222>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07d8      	lsls	r0, r3, #31
 80068e4:	d50f      	bpl.n	8006906 <_printf_float+0x242>
 80068e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f af42 	beq.w	800677a <_printf_float+0xb6>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	f104 091a 	add.w	r9, r4, #26
 80068fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006900:	3b01      	subs	r3, #1
 8006902:	4543      	cmp	r3, r8
 8006904:	dc09      	bgt.n	800691a <_printf_float+0x256>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	079b      	lsls	r3, r3, #30
 800690a:	f100 8102 	bmi.w	8006b12 <_printf_float+0x44e>
 800690e:	68e0      	ldr	r0, [r4, #12]
 8006910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006912:	4298      	cmp	r0, r3
 8006914:	bfb8      	it	lt
 8006916:	4618      	movlt	r0, r3
 8006918:	e731      	b.n	800677e <_printf_float+0xba>
 800691a:	2301      	movs	r3, #1
 800691c:	464a      	mov	r2, r9
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47b8      	blx	r7
 8006924:	3001      	adds	r0, #1
 8006926:	f43f af28 	beq.w	800677a <_printf_float+0xb6>
 800692a:	f108 0801 	add.w	r8, r8, #1
 800692e:	e7e6      	b.n	80068fe <_printf_float+0x23a>
 8006930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	dc38      	bgt.n	80069a8 <_printf_float+0x2e4>
 8006936:	2301      	movs	r3, #1
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	4a19      	ldr	r2, [pc, #100]	; (80069a4 <_printf_float+0x2e0>)
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f af1a 	beq.w	800677a <_printf_float+0xb6>
 8006946:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800694a:	4313      	orrs	r3, r2
 800694c:	d102      	bne.n	8006954 <_printf_float+0x290>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	07d9      	lsls	r1, r3, #31
 8006952:	d5d8      	bpl.n	8006906 <_printf_float+0x242>
 8006954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f43f af0b 	beq.w	800677a <_printf_float+0xb6>
 8006964:	f04f 0900 	mov.w	r9, #0
 8006968:	f104 0a1a 	add.w	sl, r4, #26
 800696c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696e:	425b      	negs	r3, r3
 8006970:	454b      	cmp	r3, r9
 8006972:	dc01      	bgt.n	8006978 <_printf_float+0x2b4>
 8006974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006976:	e794      	b.n	80068a2 <_printf_float+0x1de>
 8006978:	2301      	movs	r3, #1
 800697a:	4652      	mov	r2, sl
 800697c:	4631      	mov	r1, r6
 800697e:	4628      	mov	r0, r5
 8006980:	47b8      	blx	r7
 8006982:	3001      	adds	r0, #1
 8006984:	f43f aef9 	beq.w	800677a <_printf_float+0xb6>
 8006988:	f109 0901 	add.w	r9, r9, #1
 800698c:	e7ee      	b.n	800696c <_printf_float+0x2a8>
 800698e:	bf00      	nop
 8006990:	7fefffff 	.word	0x7fefffff
 8006994:	080095d4 	.word	0x080095d4
 8006998:	080095d8 	.word	0x080095d8
 800699c:	080095e0 	.word	0x080095e0
 80069a0:	080095dc 	.word	0x080095dc
 80069a4:	080095e4 	.word	0x080095e4
 80069a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ac:	429a      	cmp	r2, r3
 80069ae:	bfa8      	it	ge
 80069b0:	461a      	movge	r2, r3
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	4691      	mov	r9, r2
 80069b6:	dc37      	bgt.n	8006a28 <_printf_float+0x364>
 80069b8:	f04f 0b00 	mov.w	fp, #0
 80069bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069c0:	f104 021a 	add.w	r2, r4, #26
 80069c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80069c8:	ebaa 0309 	sub.w	r3, sl, r9
 80069cc:	455b      	cmp	r3, fp
 80069ce:	dc33      	bgt.n	8006a38 <_printf_float+0x374>
 80069d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069d4:	429a      	cmp	r2, r3
 80069d6:	db3b      	blt.n	8006a50 <_printf_float+0x38c>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	07da      	lsls	r2, r3, #31
 80069dc:	d438      	bmi.n	8006a50 <_printf_float+0x38c>
 80069de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069e2:	eba2 030a 	sub.w	r3, r2, sl
 80069e6:	eba2 0901 	sub.w	r9, r2, r1
 80069ea:	4599      	cmp	r9, r3
 80069ec:	bfa8      	it	ge
 80069ee:	4699      	movge	r9, r3
 80069f0:	f1b9 0f00 	cmp.w	r9, #0
 80069f4:	dc34      	bgt.n	8006a60 <_printf_float+0x39c>
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fe:	f104 0a1a 	add.w	sl, r4, #26
 8006a02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	eba3 0309 	sub.w	r3, r3, r9
 8006a0c:	4543      	cmp	r3, r8
 8006a0e:	f77f af7a 	ble.w	8006906 <_printf_float+0x242>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4652      	mov	r2, sl
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	f43f aeac 	beq.w	800677a <_printf_float+0xb6>
 8006a22:	f108 0801 	add.w	r8, r8, #1
 8006a26:	e7ec      	b.n	8006a02 <_printf_float+0x33e>
 8006a28:	4613      	mov	r3, r2
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	d1c0      	bne.n	80069b8 <_printf_float+0x2f4>
 8006a36:	e6a0      	b.n	800677a <_printf_float+0xb6>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f ae99 	beq.w	800677a <_printf_float+0xb6>
 8006a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a4a:	f10b 0b01 	add.w	fp, fp, #1
 8006a4e:	e7b9      	b.n	80069c4 <_printf_float+0x300>
 8006a50:	4631      	mov	r1, r6
 8006a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d1bf      	bne.n	80069de <_printf_float+0x31a>
 8006a5e:	e68c      	b.n	800677a <_printf_float+0xb6>
 8006a60:	464b      	mov	r3, r9
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	eb08 020a 	add.w	r2, r8, sl
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d1c2      	bne.n	80069f6 <_printf_float+0x332>
 8006a70:	e683      	b.n	800677a <_printf_float+0xb6>
 8006a72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a74:	2a01      	cmp	r2, #1
 8006a76:	dc01      	bgt.n	8006a7c <_printf_float+0x3b8>
 8006a78:	07db      	lsls	r3, r3, #31
 8006a7a:	d537      	bpl.n	8006aec <_printf_float+0x428>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4642      	mov	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f ae77 	beq.w	800677a <_printf_float+0xb6>
 8006a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae6f 	beq.w	800677a <_printf_float+0xb6>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f840 	bl	8000b28 <__aeabi_dcmpeq>
 8006aa8:	b9d8      	cbnz	r0, 8006ae2 <_printf_float+0x41e>
 8006aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aac:	f108 0201 	add.w	r2, r8, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d10e      	bne.n	8006ada <_printf_float+0x416>
 8006abc:	e65d      	b.n	800677a <_printf_float+0xb6>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae56 	beq.w	800677a <_printf_float+0xb6>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4543      	cmp	r3, r8
 8006ad8:	dcf1      	bgt.n	8006abe <_printf_float+0x3fa>
 8006ada:	4653      	mov	r3, sl
 8006adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ae0:	e6e0      	b.n	80068a4 <_printf_float+0x1e0>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 091a 	add.w	r9, r4, #26
 8006aea:	e7f2      	b.n	8006ad2 <_printf_float+0x40e>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4642      	mov	r2, r8
 8006af0:	e7df      	b.n	8006ab2 <_printf_float+0x3ee>
 8006af2:	2301      	movs	r3, #1
 8006af4:	464a      	mov	r2, r9
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae3c 	beq.w	800677a <_printf_float+0xb6>
 8006b02:	f108 0801 	add.w	r8, r8, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	4543      	cmp	r3, r8
 8006b0e:	dcf0      	bgt.n	8006af2 <_printf_float+0x42e>
 8006b10:	e6fd      	b.n	800690e <_printf_float+0x24a>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	f104 0919 	add.w	r9, r4, #25
 8006b1a:	e7f4      	b.n	8006b06 <_printf_float+0x442>

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfb8      	it	lt
 8006b2e:	4613      	movlt	r3, r2
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b36:	460c      	mov	r4, r1
 8006b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc28      	bgt.n	8006bb6 <_printf_common+0x9a>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42d      	bmi.n	8006bd0 <_printf_common+0xb4>
 8006b74:	4649      	mov	r1, r9
 8006b76:	4638      	mov	r0, r7
 8006b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d020      	beq.n	8006bc4 <_printf_common+0xa8>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	f003 0306 	and.w	r3, r3, #6
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	bf18      	it	ne
 8006b8e:	2500      	movne	r5, #0
 8006b90:	6832      	ldr	r2, [r6, #0]
 8006b92:	f04f 0600 	mov.w	r6, #0
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	bf08      	it	eq
 8006b9a:	1aad      	subeq	r5, r5, r2
 8006b9c:	6922      	ldr	r2, [r4, #16]
 8006b9e:	bf08      	it	eq
 8006ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	bfc4      	itt	gt
 8006ba8:	1a9b      	subgt	r3, r3, r2
 8006baa:	18ed      	addgt	r5, r5, r3
 8006bac:	341a      	adds	r4, #26
 8006bae:	42b5      	cmp	r5, r6
 8006bb0:	d11a      	bne.n	8006be8 <_printf_common+0xcc>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e008      	b.n	8006bc8 <_printf_common+0xac>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4652      	mov	r2, sl
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	47c0      	blx	r8
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d103      	bne.n	8006bcc <_printf_common+0xb0>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bcc:	3501      	adds	r5, #1
 8006bce:	e7c4      	b.n	8006b5a <_printf_common+0x3e>
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	18e1      	adds	r1, r4, r3
 8006bd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bde:	4422      	add	r2, r4
 8006be0:	3302      	adds	r3, #2
 8006be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be6:	e7c5      	b.n	8006b74 <_printf_common+0x58>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4622      	mov	r2, r4
 8006bec:	4649      	mov	r1, r9
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c0      	blx	r8
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d0e6      	beq.n	8006bc4 <_printf_common+0xa8>
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7d9      	b.n	8006bae <_printf_common+0x92>
	...

08006bfc <_printf_i>:
 8006bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	460c      	mov	r4, r1
 8006c02:	7e27      	ldrb	r7, [r4, #24]
 8006c04:	4691      	mov	r9, r2
 8006c06:	2f78      	cmp	r7, #120	; 0x78
 8006c08:	4680      	mov	r8, r0
 8006c0a:	469a      	mov	sl, r3
 8006c0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c12:	d807      	bhi.n	8006c24 <_printf_i+0x28>
 8006c14:	2f62      	cmp	r7, #98	; 0x62
 8006c16:	d80a      	bhi.n	8006c2e <_printf_i+0x32>
 8006c18:	2f00      	cmp	r7, #0
 8006c1a:	f000 80d9 	beq.w	8006dd0 <_printf_i+0x1d4>
 8006c1e:	2f58      	cmp	r7, #88	; 0x58
 8006c20:	f000 80a4 	beq.w	8006d6c <_printf_i+0x170>
 8006c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c2c:	e03a      	b.n	8006ca4 <_printf_i+0xa8>
 8006c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c32:	2b15      	cmp	r3, #21
 8006c34:	d8f6      	bhi.n	8006c24 <_printf_i+0x28>
 8006c36:	a001      	add	r0, pc, #4	; (adr r0, 8006c3c <_printf_i+0x40>)
 8006c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c3c:	08006c95 	.word	0x08006c95
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006c25 	.word	0x08006c25
 8006c48:	08006c25 	.word	0x08006c25
 8006c4c:	08006c25 	.word	0x08006c25
 8006c50:	08006c25 	.word	0x08006c25
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006c25 	.word	0x08006c25
 8006c5c:	08006c25 	.word	0x08006c25
 8006c60:	08006c25 	.word	0x08006c25
 8006c64:	08006c25 	.word	0x08006c25
 8006c68:	08006db7 	.word	0x08006db7
 8006c6c:	08006cd9 	.word	0x08006cd9
 8006c70:	08006d99 	.word	0x08006d99
 8006c74:	08006c25 	.word	0x08006c25
 8006c78:	08006c25 	.word	0x08006c25
 8006c7c:	08006dd9 	.word	0x08006dd9
 8006c80:	08006c25 	.word	0x08006c25
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006c25 	.word	0x08006c25
 8006c8c:	08006c25 	.word	0x08006c25
 8006c90:	08006da1 	.word	0x08006da1
 8006c94:	680b      	ldr	r3, [r1, #0]
 8006c96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	600a      	str	r2, [r1, #0]
 8006ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0a4      	b.n	8006df2 <_printf_i+0x1f6>
 8006ca8:	6825      	ldr	r5, [r4, #0]
 8006caa:	6808      	ldr	r0, [r1, #0]
 8006cac:	062e      	lsls	r6, r5, #24
 8006cae:	f100 0304 	add.w	r3, r0, #4
 8006cb2:	d50a      	bpl.n	8006cca <_printf_i+0xce>
 8006cb4:	6805      	ldr	r5, [r0, #0]
 8006cb6:	600b      	str	r3, [r1, #0]
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	da03      	bge.n	8006cc4 <_printf_i+0xc8>
 8006cbc:	232d      	movs	r3, #45	; 0x2d
 8006cbe:	426d      	negs	r5, r5
 8006cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc4:	230a      	movs	r3, #10
 8006cc6:	485e      	ldr	r0, [pc, #376]	; (8006e40 <_printf_i+0x244>)
 8006cc8:	e019      	b.n	8006cfe <_printf_i+0x102>
 8006cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cce:	6805      	ldr	r5, [r0, #0]
 8006cd0:	600b      	str	r3, [r1, #0]
 8006cd2:	bf18      	it	ne
 8006cd4:	b22d      	sxthne	r5, r5
 8006cd6:	e7ef      	b.n	8006cb8 <_printf_i+0xbc>
 8006cd8:	680b      	ldr	r3, [r1, #0]
 8006cda:	6825      	ldr	r5, [r4, #0]
 8006cdc:	1d18      	adds	r0, r3, #4
 8006cde:	6008      	str	r0, [r1, #0]
 8006ce0:	0628      	lsls	r0, r5, #24
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0xec>
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <_printf_i+0xf2>
 8006ce8:	0669      	lsls	r1, r5, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0xe8>
 8006cec:	881d      	ldrh	r5, [r3, #0]
 8006cee:	2f6f      	cmp	r7, #111	; 0x6f
 8006cf0:	bf0c      	ite	eq
 8006cf2:	2308      	moveq	r3, #8
 8006cf4:	230a      	movne	r3, #10
 8006cf6:	4852      	ldr	r0, [pc, #328]	; (8006e40 <_printf_i+0x244>)
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfe:	6866      	ldr	r6, [r4, #4]
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	bfa8      	it	ge
 8006d04:	6821      	ldrge	r1, [r4, #0]
 8006d06:	60a6      	str	r6, [r4, #8]
 8006d08:	bfa4      	itt	ge
 8006d0a:	f021 0104 	bicge.w	r1, r1, #4
 8006d0e:	6021      	strge	r1, [r4, #0]
 8006d10:	b90d      	cbnz	r5, 8006d16 <_printf_i+0x11a>
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d04d      	beq.n	8006db2 <_printf_i+0x1b6>
 8006d16:	4616      	mov	r6, r2
 8006d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d20:	5dc7      	ldrb	r7, [r0, r7]
 8006d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d26:	462f      	mov	r7, r5
 8006d28:	42bb      	cmp	r3, r7
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	d9f4      	bls.n	8006d18 <_printf_i+0x11c>
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d10b      	bne.n	8006d4a <_printf_i+0x14e>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	07df      	lsls	r7, r3, #31
 8006d36:	d508      	bpl.n	8006d4a <_printf_i+0x14e>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	bfde      	ittt	le
 8006d40:	2330      	movle	r3, #48	; 0x30
 8006d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d4a:	1b92      	subs	r2, r2, r6
 8006d4c:	6122      	str	r2, [r4, #16]
 8006d4e:	464b      	mov	r3, r9
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f8cd a000 	str.w	sl, [sp]
 8006d58:	aa03      	add	r2, sp, #12
 8006d5a:	f7ff fedf 	bl	8006b1c <_printf_common>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d14c      	bne.n	8006dfc <_printf_i+0x200>
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	b004      	add	sp, #16
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	4834      	ldr	r0, [pc, #208]	; (8006e40 <_printf_i+0x244>)
 8006d6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d72:	680e      	ldr	r6, [r1, #0]
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d7a:	061f      	lsls	r7, r3, #24
 8006d7c:	600e      	str	r6, [r1, #0]
 8006d7e:	d514      	bpl.n	8006daa <_printf_i+0x1ae>
 8006d80:	07d9      	lsls	r1, r3, #31
 8006d82:	bf44      	itt	mi
 8006d84:	f043 0320 	orrmi.w	r3, r3, #32
 8006d88:	6023      	strmi	r3, [r4, #0]
 8006d8a:	b91d      	cbnz	r5, 8006d94 <_printf_i+0x198>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	2310      	movs	r3, #16
 8006d96:	e7af      	b.n	8006cf8 <_printf_i+0xfc>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	f043 0320 	orr.w	r3, r3, #32
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	2378      	movs	r3, #120	; 0x78
 8006da2:	4828      	ldr	r0, [pc, #160]	; (8006e44 <_printf_i+0x248>)
 8006da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da8:	e7e3      	b.n	8006d72 <_printf_i+0x176>
 8006daa:	065e      	lsls	r6, r3, #25
 8006dac:	bf48      	it	mi
 8006dae:	b2ad      	uxthmi	r5, r5
 8006db0:	e7e6      	b.n	8006d80 <_printf_i+0x184>
 8006db2:	4616      	mov	r6, r2
 8006db4:	e7bb      	b.n	8006d2e <_printf_i+0x132>
 8006db6:	680b      	ldr	r3, [r1, #0]
 8006db8:	6826      	ldr	r6, [r4, #0]
 8006dba:	1d1d      	adds	r5, r3, #4
 8006dbc:	6960      	ldr	r0, [r4, #20]
 8006dbe:	600d      	str	r5, [r1, #0]
 8006dc0:	0635      	lsls	r5, r6, #24
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	d501      	bpl.n	8006dca <_printf_i+0x1ce>
 8006dc6:	6018      	str	r0, [r3, #0]
 8006dc8:	e002      	b.n	8006dd0 <_printf_i+0x1d4>
 8006dca:	0671      	lsls	r1, r6, #25
 8006dcc:	d5fb      	bpl.n	8006dc6 <_printf_i+0x1ca>
 8006dce:	8018      	strh	r0, [r3, #0]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4616      	mov	r6, r2
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	e7ba      	b.n	8006d4e <_printf_i+0x152>
 8006dd8:	680b      	ldr	r3, [r1, #0]
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	600a      	str	r2, [r1, #0]
 8006dde:	681e      	ldr	r6, [r3, #0]
 8006de0:	2100      	movs	r1, #0
 8006de2:	4630      	mov	r0, r6
 8006de4:	6862      	ldr	r2, [r4, #4]
 8006de6:	f000 fed9 	bl	8007b9c <memchr>
 8006dea:	b108      	cbz	r0, 8006df0 <_printf_i+0x1f4>
 8006dec:	1b80      	subs	r0, r0, r6
 8006dee:	6060      	str	r0, [r4, #4]
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	6123      	str	r3, [r4, #16]
 8006df4:	2300      	movs	r3, #0
 8006df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dfa:	e7a8      	b.n	8006d4e <_printf_i+0x152>
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	4649      	mov	r1, r9
 8006e00:	4640      	mov	r0, r8
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	47d0      	blx	sl
 8006e06:	3001      	adds	r0, #1
 8006e08:	d0ab      	beq.n	8006d62 <_printf_i+0x166>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	079b      	lsls	r3, r3, #30
 8006e0e:	d413      	bmi.n	8006e38 <_printf_i+0x23c>
 8006e10:	68e0      	ldr	r0, [r4, #12]
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	4298      	cmp	r0, r3
 8006e16:	bfb8      	it	lt
 8006e18:	4618      	movlt	r0, r3
 8006e1a:	e7a4      	b.n	8006d66 <_printf_i+0x16a>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4649      	mov	r1, r9
 8006e22:	4640      	mov	r0, r8
 8006e24:	47d0      	blx	sl
 8006e26:	3001      	adds	r0, #1
 8006e28:	d09b      	beq.n	8006d62 <_printf_i+0x166>
 8006e2a:	3501      	adds	r5, #1
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	9903      	ldr	r1, [sp, #12]
 8006e30:	1a5b      	subs	r3, r3, r1
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	dcf2      	bgt.n	8006e1c <_printf_i+0x220>
 8006e36:	e7eb      	b.n	8006e10 <_printf_i+0x214>
 8006e38:	2500      	movs	r5, #0
 8006e3a:	f104 0619 	add.w	r6, r4, #25
 8006e3e:	e7f5      	b.n	8006e2c <_printf_i+0x230>
 8006e40:	080095e6 	.word	0x080095e6
 8006e44:	080095f7 	.word	0x080095f7

08006e48 <siprintf>:
 8006e48:	b40e      	push	{r1, r2, r3}
 8006e4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e4e:	b500      	push	{lr}
 8006e50:	b09c      	sub	sp, #112	; 0x70
 8006e52:	ab1d      	add	r3, sp, #116	; 0x74
 8006e54:	9002      	str	r0, [sp, #8]
 8006e56:	9006      	str	r0, [sp, #24]
 8006e58:	9107      	str	r1, [sp, #28]
 8006e5a:	9104      	str	r1, [sp, #16]
 8006e5c:	4808      	ldr	r0, [pc, #32]	; (8006e80 <siprintf+0x38>)
 8006e5e:	4909      	ldr	r1, [pc, #36]	; (8006e84 <siprintf+0x3c>)
 8006e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e64:	9105      	str	r1, [sp, #20]
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	a902      	add	r1, sp, #8
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	f001 fb44 	bl	80084f8 <_svfiprintf_r>
 8006e70:	2200      	movs	r2, #0
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	b01c      	add	sp, #112	; 0x70
 8006e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e7c:	b003      	add	sp, #12
 8006e7e:	4770      	bx	lr
 8006e80:	20000014 	.word	0x20000014
 8006e84:	ffff0208 	.word	0xffff0208

08006e88 <quorem>:
 8006e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	6903      	ldr	r3, [r0, #16]
 8006e8e:	690c      	ldr	r4, [r1, #16]
 8006e90:	4607      	mov	r7, r0
 8006e92:	42a3      	cmp	r3, r4
 8006e94:	f2c0 8083 	blt.w	8006f9e <quorem+0x116>
 8006e98:	3c01      	subs	r4, #1
 8006e9a:	f100 0514 	add.w	r5, r0, #20
 8006e9e:	f101 0814 	add.w	r8, r1, #20
 8006ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ec0:	d332      	bcc.n	8006f28 <quorem+0xa0>
 8006ec2:	f04f 0e00 	mov.w	lr, #0
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	46ac      	mov	ip, r5
 8006eca:	46f2      	mov	sl, lr
 8006ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ed0:	b293      	uxth	r3, r2
 8006ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ed6:	0c12      	lsrs	r2, r2, #16
 8006ed8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006edc:	fb06 e202 	mla	r2, r6, r2, lr
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ee6:	f8dc a000 	ldr.w	sl, [ip]
 8006eea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eee:	fa1f fa8a 	uxth.w	sl, sl
 8006ef2:	4453      	add	r3, sl
 8006ef4:	fa1f fa82 	uxth.w	sl, r2
 8006ef8:	f8dc 2000 	ldr.w	r2, [ip]
 8006efc:	4581      	cmp	r9, r0
 8006efe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f10:	f84c 3b04 	str.w	r3, [ip], #4
 8006f14:	d2da      	bcs.n	8006ecc <quorem+0x44>
 8006f16:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f1a:	b92b      	cbnz	r3, 8006f28 <quorem+0xa0>
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	429d      	cmp	r5, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	d32f      	bcc.n	8006f86 <quorem+0xfe>
 8006f26:	613c      	str	r4, [r7, #16]
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f001 f8cd 	bl	80080c8 <__mcmp>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	db25      	blt.n	8006f7e <quorem+0xf6>
 8006f32:	4628      	mov	r0, r5
 8006f34:	f04f 0c00 	mov.w	ip, #0
 8006f38:	3601      	adds	r6, #1
 8006f3a:	f858 1b04 	ldr.w	r1, [r8], #4
 8006f3e:	f8d0 e000 	ldr.w	lr, [r0]
 8006f42:	b28b      	uxth	r3, r1
 8006f44:	ebac 0303 	sub.w	r3, ip, r3
 8006f48:	fa1f f28e 	uxth.w	r2, lr
 8006f4c:	4413      	add	r3, r2
 8006f4e:	0c0a      	lsrs	r2, r1, #16
 8006f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5e:	45c1      	cmp	r9, r8
 8006f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f64:	f840 3b04 	str.w	r3, [r0], #4
 8006f68:	d2e7      	bcs.n	8006f3a <quorem+0xb2>
 8006f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f72:	b922      	cbnz	r2, 8006f7e <quorem+0xf6>
 8006f74:	3b04      	subs	r3, #4
 8006f76:	429d      	cmp	r5, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	d30a      	bcc.n	8006f92 <quorem+0x10a>
 8006f7c:	613c      	str	r4, [r7, #16]
 8006f7e:	4630      	mov	r0, r6
 8006f80:	b003      	add	sp, #12
 8006f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1cb      	bne.n	8006f26 <quorem+0x9e>
 8006f8e:	3c01      	subs	r4, #1
 8006f90:	e7c6      	b.n	8006f20 <quorem+0x98>
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	3b04      	subs	r3, #4
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d1f0      	bne.n	8006f7c <quorem+0xf4>
 8006f9a:	3c01      	subs	r4, #1
 8006f9c:	e7eb      	b.n	8006f76 <quorem+0xee>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e7ee      	b.n	8006f80 <quorem+0xf8>
 8006fa2:	0000      	movs	r0, r0
 8006fa4:	0000      	movs	r0, r0
	...

08006fa8 <_dtoa_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	4616      	mov	r6, r2
 8006fae:	461f      	mov	r7, r3
 8006fb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fb2:	b099      	sub	sp, #100	; 0x64
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006fba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006fbe:	b974      	cbnz	r4, 8006fde <_dtoa_r+0x36>
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f000 fde3 	bl	8007b8c <malloc>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6268      	str	r0, [r5, #36]	; 0x24
 8006fca:	b920      	cbnz	r0, 8006fd6 <_dtoa_r+0x2e>
 8006fcc:	21ea      	movs	r1, #234	; 0xea
 8006fce:	4bae      	ldr	r3, [pc, #696]	; (8007288 <_dtoa_r+0x2e0>)
 8006fd0:	48ae      	ldr	r0, [pc, #696]	; (800728c <_dtoa_r+0x2e4>)
 8006fd2:	f001 fba1 	bl	8008718 <__assert_func>
 8006fd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fda:	6004      	str	r4, [r0, #0]
 8006fdc:	60c4      	str	r4, [r0, #12]
 8006fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	b151      	cbz	r1, 8006ffa <_dtoa_r+0x52>
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4093      	lsls	r3, r2
 8006fea:	604a      	str	r2, [r1, #4]
 8006fec:	608b      	str	r3, [r1, #8]
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 fe30 	bl	8007c54 <_Bfree>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	1e3b      	subs	r3, r7, #0
 8006ffc:	bfaf      	iteee	ge
 8006ffe:	2300      	movge	r3, #0
 8007000:	2201      	movlt	r2, #1
 8007002:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007006:	9305      	strlt	r3, [sp, #20]
 8007008:	bfa8      	it	ge
 800700a:	f8c8 3000 	strge.w	r3, [r8]
 800700e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007012:	4b9f      	ldr	r3, [pc, #636]	; (8007290 <_dtoa_r+0x2e8>)
 8007014:	bfb8      	it	lt
 8007016:	f8c8 2000 	strlt.w	r2, [r8]
 800701a:	ea33 0309 	bics.w	r3, r3, r9
 800701e:	d119      	bne.n	8007054 <_dtoa_r+0xac>
 8007020:	f242 730f 	movw	r3, #9999	; 0x270f
 8007024:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800702c:	4333      	orrs	r3, r6
 800702e:	f000 8580 	beq.w	8007b32 <_dtoa_r+0xb8a>
 8007032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007034:	b953      	cbnz	r3, 800704c <_dtoa_r+0xa4>
 8007036:	4b97      	ldr	r3, [pc, #604]	; (8007294 <_dtoa_r+0x2ec>)
 8007038:	e022      	b.n	8007080 <_dtoa_r+0xd8>
 800703a:	4b97      	ldr	r3, [pc, #604]	; (8007298 <_dtoa_r+0x2f0>)
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	3308      	adds	r3, #8
 8007040:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	9808      	ldr	r0, [sp, #32]
 8007046:	b019      	add	sp, #100	; 0x64
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	4b91      	ldr	r3, [pc, #580]	; (8007294 <_dtoa_r+0x2ec>)
 800704e:	9308      	str	r3, [sp, #32]
 8007050:	3303      	adds	r3, #3
 8007052:	e7f5      	b.n	8007040 <_dtoa_r+0x98>
 8007054:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007058:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800705c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	f7f9 fd60 	bl	8000b28 <__aeabi_dcmpeq>
 8007068:	4680      	mov	r8, r0
 800706a:	b158      	cbz	r0, 8007084 <_dtoa_r+0xdc>
 800706c:	2301      	movs	r3, #1
 800706e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8559 	beq.w	8007b2c <_dtoa_r+0xb84>
 800707a:	4888      	ldr	r0, [pc, #544]	; (800729c <_dtoa_r+0x2f4>)
 800707c:	6018      	str	r0, [r3, #0]
 800707e:	1e43      	subs	r3, r0, #1
 8007080:	9308      	str	r3, [sp, #32]
 8007082:	e7df      	b.n	8007044 <_dtoa_r+0x9c>
 8007084:	ab16      	add	r3, sp, #88	; 0x58
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	ab17      	add	r3, sp, #92	; 0x5c
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4628      	mov	r0, r5
 800708e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007092:	f001 f8c5 	bl	8008220 <__d2b>
 8007096:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800709a:	4682      	mov	sl, r0
 800709c:	2c00      	cmp	r4, #0
 800709e:	d07e      	beq.n	800719e <_dtoa_r+0x1f6>
 80070a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80070aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80070b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80070ba:	2200      	movs	r2, #0
 80070bc:	4b78      	ldr	r3, [pc, #480]	; (80072a0 <_dtoa_r+0x2f8>)
 80070be:	f7f9 f913 	bl	80002e8 <__aeabi_dsub>
 80070c2:	a36b      	add	r3, pc, #428	; (adr r3, 8007270 <_dtoa_r+0x2c8>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 fac6 	bl	8000658 <__aeabi_dmul>
 80070cc:	a36a      	add	r3, pc, #424	; (adr r3, 8007278 <_dtoa_r+0x2d0>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f90b 	bl	80002ec <__adddf3>
 80070d6:	4606      	mov	r6, r0
 80070d8:	4620      	mov	r0, r4
 80070da:	460f      	mov	r7, r1
 80070dc:	f7f9 fa52 	bl	8000584 <__aeabi_i2d>
 80070e0:	a367      	add	r3, pc, #412	; (adr r3, 8007280 <_dtoa_r+0x2d8>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 fab7 	bl	8000658 <__aeabi_dmul>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 f8fb 	bl	80002ec <__adddf3>
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	f7f9 fd5d 	bl	8000bb8 <__aeabi_d2iz>
 80070fe:	2200      	movs	r2, #0
 8007100:	4681      	mov	r9, r0
 8007102:	2300      	movs	r3, #0
 8007104:	4630      	mov	r0, r6
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fd18 	bl	8000b3c <__aeabi_dcmplt>
 800710c:	b148      	cbz	r0, 8007122 <_dtoa_r+0x17a>
 800710e:	4648      	mov	r0, r9
 8007110:	f7f9 fa38 	bl	8000584 <__aeabi_i2d>
 8007114:	4632      	mov	r2, r6
 8007116:	463b      	mov	r3, r7
 8007118:	f7f9 fd06 	bl	8000b28 <__aeabi_dcmpeq>
 800711c:	b908      	cbnz	r0, 8007122 <_dtoa_r+0x17a>
 800711e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007122:	f1b9 0f16 	cmp.w	r9, #22
 8007126:	d857      	bhi.n	80071d8 <_dtoa_r+0x230>
 8007128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800712c:	4b5d      	ldr	r3, [pc, #372]	; (80072a4 <_dtoa_r+0x2fc>)
 800712e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 fd01 	bl	8000b3c <__aeabi_dcmplt>
 800713a:	2800      	cmp	r0, #0
 800713c:	d04e      	beq.n	80071dc <_dtoa_r+0x234>
 800713e:	2300      	movs	r3, #0
 8007140:	f109 39ff 	add.w	r9, r9, #4294967295
 8007144:	930f      	str	r3, [sp, #60]	; 0x3c
 8007146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007148:	1b1c      	subs	r4, r3, r4
 800714a:	1e63      	subs	r3, r4, #1
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	bf49      	itett	mi
 8007150:	f1c4 0301 	rsbmi	r3, r4, #1
 8007154:	2300      	movpl	r3, #0
 8007156:	9306      	strmi	r3, [sp, #24]
 8007158:	2300      	movmi	r3, #0
 800715a:	bf54      	ite	pl
 800715c:	9306      	strpl	r3, [sp, #24]
 800715e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	db3c      	blt.n	80071e0 <_dtoa_r+0x238>
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800716c:	444b      	add	r3, r9
 800716e:	9309      	str	r3, [sp, #36]	; 0x24
 8007170:	2300      	movs	r3, #0
 8007172:	930a      	str	r3, [sp, #40]	; 0x28
 8007174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007176:	2b09      	cmp	r3, #9
 8007178:	d86c      	bhi.n	8007254 <_dtoa_r+0x2ac>
 800717a:	2b05      	cmp	r3, #5
 800717c:	bfc4      	itt	gt
 800717e:	3b04      	subgt	r3, #4
 8007180:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007184:	bfc8      	it	gt
 8007186:	2400      	movgt	r4, #0
 8007188:	f1a3 0302 	sub.w	r3, r3, #2
 800718c:	bfd8      	it	le
 800718e:	2401      	movle	r4, #1
 8007190:	2b03      	cmp	r3, #3
 8007192:	f200 808b 	bhi.w	80072ac <_dtoa_r+0x304>
 8007196:	e8df f003 	tbb	[pc, r3]
 800719a:	4f2d      	.short	0x4f2d
 800719c:	5b4d      	.short	0x5b4d
 800719e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80071a2:	441c      	add	r4, r3
 80071a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	bfc3      	ittte	gt
 80071ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80071b4:	fa09 f303 	lslgt.w	r3, r9, r3
 80071b8:	f1c3 0320 	rsble	r3, r3, #32
 80071bc:	bfc6      	itte	gt
 80071be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071c2:	4318      	orrgt	r0, r3
 80071c4:	fa06 f003 	lslle.w	r0, r6, r3
 80071c8:	f7f9 f9cc 	bl	8000564 <__aeabi_ui2d>
 80071cc:	2301      	movs	r3, #1
 80071ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80071d2:	3c01      	subs	r4, #1
 80071d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80071d6:	e770      	b.n	80070ba <_dtoa_r+0x112>
 80071d8:	2301      	movs	r3, #1
 80071da:	e7b3      	b.n	8007144 <_dtoa_r+0x19c>
 80071dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80071de:	e7b2      	b.n	8007146 <_dtoa_r+0x19e>
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	eba3 0309 	sub.w	r3, r3, r9
 80071e6:	9306      	str	r3, [sp, #24]
 80071e8:	f1c9 0300 	rsb	r3, r9, #0
 80071ec:	930a      	str	r3, [sp, #40]	; 0x28
 80071ee:	2300      	movs	r3, #0
 80071f0:	930e      	str	r3, [sp, #56]	; 0x38
 80071f2:	e7bf      	b.n	8007174 <_dtoa_r+0x1cc>
 80071f4:	2300      	movs	r3, #0
 80071f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dc59      	bgt.n	80072b2 <_dtoa_r+0x30a>
 80071fe:	f04f 0b01 	mov.w	fp, #1
 8007202:	465b      	mov	r3, fp
 8007204:	f8cd b008 	str.w	fp, [sp, #8]
 8007208:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800720c:	2200      	movs	r2, #0
 800720e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007210:	6042      	str	r2, [r0, #4]
 8007212:	2204      	movs	r2, #4
 8007214:	f102 0614 	add.w	r6, r2, #20
 8007218:	429e      	cmp	r6, r3
 800721a:	6841      	ldr	r1, [r0, #4]
 800721c:	d94f      	bls.n	80072be <_dtoa_r+0x316>
 800721e:	4628      	mov	r0, r5
 8007220:	f000 fcd8 	bl	8007bd4 <_Balloc>
 8007224:	9008      	str	r0, [sp, #32]
 8007226:	2800      	cmp	r0, #0
 8007228:	d14d      	bne.n	80072c6 <_dtoa_r+0x31e>
 800722a:	4602      	mov	r2, r0
 800722c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007230:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <_dtoa_r+0x300>)
 8007232:	e6cd      	b.n	8006fd0 <_dtoa_r+0x28>
 8007234:	2301      	movs	r3, #1
 8007236:	e7de      	b.n	80071f6 <_dtoa_r+0x24e>
 8007238:	2300      	movs	r3, #0
 800723a:	930b      	str	r3, [sp, #44]	; 0x2c
 800723c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800723e:	eb09 0b03 	add.w	fp, r9, r3
 8007242:	f10b 0301 	add.w	r3, fp, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	9302      	str	r3, [sp, #8]
 800724a:	bfb8      	it	lt
 800724c:	2301      	movlt	r3, #1
 800724e:	e7dd      	b.n	800720c <_dtoa_r+0x264>
 8007250:	2301      	movs	r3, #1
 8007252:	e7f2      	b.n	800723a <_dtoa_r+0x292>
 8007254:	2401      	movs	r4, #1
 8007256:	2300      	movs	r3, #0
 8007258:	940b      	str	r4, [sp, #44]	; 0x2c
 800725a:	9322      	str	r3, [sp, #136]	; 0x88
 800725c:	f04f 3bff 	mov.w	fp, #4294967295
 8007260:	2200      	movs	r2, #0
 8007262:	2312      	movs	r3, #18
 8007264:	f8cd b008 	str.w	fp, [sp, #8]
 8007268:	9223      	str	r2, [sp, #140]	; 0x8c
 800726a:	e7cf      	b.n	800720c <_dtoa_r+0x264>
 800726c:	f3af 8000 	nop.w
 8007270:	636f4361 	.word	0x636f4361
 8007274:	3fd287a7 	.word	0x3fd287a7
 8007278:	8b60c8b3 	.word	0x8b60c8b3
 800727c:	3fc68a28 	.word	0x3fc68a28
 8007280:	509f79fb 	.word	0x509f79fb
 8007284:	3fd34413 	.word	0x3fd34413
 8007288:	08009615 	.word	0x08009615
 800728c:	0800962c 	.word	0x0800962c
 8007290:	7ff00000 	.word	0x7ff00000
 8007294:	08009611 	.word	0x08009611
 8007298:	08009608 	.word	0x08009608
 800729c:	080095e5 	.word	0x080095e5
 80072a0:	3ff80000 	.word	0x3ff80000
 80072a4:	08009728 	.word	0x08009728
 80072a8:	0800968b 	.word	0x0800968b
 80072ac:	2301      	movs	r3, #1
 80072ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80072b0:	e7d4      	b.n	800725c <_dtoa_r+0x2b4>
 80072b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80072b6:	465b      	mov	r3, fp
 80072b8:	f8cd b008 	str.w	fp, [sp, #8]
 80072bc:	e7a6      	b.n	800720c <_dtoa_r+0x264>
 80072be:	3101      	adds	r1, #1
 80072c0:	6041      	str	r1, [r0, #4]
 80072c2:	0052      	lsls	r2, r2, #1
 80072c4:	e7a6      	b.n	8007214 <_dtoa_r+0x26c>
 80072c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072c8:	9a08      	ldr	r2, [sp, #32]
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	9b02      	ldr	r3, [sp, #8]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	f200 80a8 	bhi.w	8007424 <_dtoa_r+0x47c>
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	f000 80a5 	beq.w	8007424 <_dtoa_r+0x47c>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	dd34      	ble.n	800734a <_dtoa_r+0x3a2>
 80072e0:	4a9a      	ldr	r2, [pc, #616]	; (800754c <_dtoa_r+0x5a4>)
 80072e2:	f009 030f 	and.w	r3, r9, #15
 80072e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 80072ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80072f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80072fa:	d016      	beq.n	800732a <_dtoa_r+0x382>
 80072fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007300:	4b93      	ldr	r3, [pc, #588]	; (8007550 <_dtoa_r+0x5a8>)
 8007302:	2703      	movs	r7, #3
 8007304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007308:	f7f9 fad0 	bl	80008ac <__aeabi_ddiv>
 800730c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007310:	f004 040f 	and.w	r4, r4, #15
 8007314:	4e8e      	ldr	r6, [pc, #568]	; (8007550 <_dtoa_r+0x5a8>)
 8007316:	b954      	cbnz	r4, 800732e <_dtoa_r+0x386>
 8007318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800731c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007320:	f7f9 fac4 	bl	80008ac <__aeabi_ddiv>
 8007324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007328:	e029      	b.n	800737e <_dtoa_r+0x3d6>
 800732a:	2702      	movs	r7, #2
 800732c:	e7f2      	b.n	8007314 <_dtoa_r+0x36c>
 800732e:	07e1      	lsls	r1, r4, #31
 8007330:	d508      	bpl.n	8007344 <_dtoa_r+0x39c>
 8007332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007336:	e9d6 2300 	ldrd	r2, r3, [r6]
 800733a:	f7f9 f98d 	bl	8000658 <__aeabi_dmul>
 800733e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007342:	3701      	adds	r7, #1
 8007344:	1064      	asrs	r4, r4, #1
 8007346:	3608      	adds	r6, #8
 8007348:	e7e5      	b.n	8007316 <_dtoa_r+0x36e>
 800734a:	f000 80a5 	beq.w	8007498 <_dtoa_r+0x4f0>
 800734e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007352:	f1c9 0400 	rsb	r4, r9, #0
 8007356:	4b7d      	ldr	r3, [pc, #500]	; (800754c <_dtoa_r+0x5a4>)
 8007358:	f004 020f 	and.w	r2, r4, #15
 800735c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f7f9 f978 	bl	8000658 <__aeabi_dmul>
 8007368:	2702      	movs	r7, #2
 800736a:	2300      	movs	r3, #0
 800736c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007370:	4e77      	ldr	r6, [pc, #476]	; (8007550 <_dtoa_r+0x5a8>)
 8007372:	1124      	asrs	r4, r4, #4
 8007374:	2c00      	cmp	r4, #0
 8007376:	f040 8084 	bne.w	8007482 <_dtoa_r+0x4da>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1d2      	bne.n	8007324 <_dtoa_r+0x37c>
 800737e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 808b 	beq.w	800749c <_dtoa_r+0x4f4>
 8007386:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800738a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800738e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007392:	2200      	movs	r2, #0
 8007394:	4b6f      	ldr	r3, [pc, #444]	; (8007554 <_dtoa_r+0x5ac>)
 8007396:	f7f9 fbd1 	bl	8000b3c <__aeabi_dcmplt>
 800739a:	2800      	cmp	r0, #0
 800739c:	d07e      	beq.n	800749c <_dtoa_r+0x4f4>
 800739e:	9b02      	ldr	r3, [sp, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d07b      	beq.n	800749c <_dtoa_r+0x4f4>
 80073a4:	f1bb 0f00 	cmp.w	fp, #0
 80073a8:	dd38      	ble.n	800741c <_dtoa_r+0x474>
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ae:	2200      	movs	r2, #0
 80073b0:	4b69      	ldr	r3, [pc, #420]	; (8007558 <_dtoa_r+0x5b0>)
 80073b2:	f7f9 f951 	bl	8000658 <__aeabi_dmul>
 80073b6:	465c      	mov	r4, fp
 80073b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073bc:	f109 38ff 	add.w	r8, r9, #4294967295
 80073c0:	3701      	adds	r7, #1
 80073c2:	4638      	mov	r0, r7
 80073c4:	f7f9 f8de 	bl	8000584 <__aeabi_i2d>
 80073c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073cc:	f7f9 f944 	bl	8000658 <__aeabi_dmul>
 80073d0:	2200      	movs	r2, #0
 80073d2:	4b62      	ldr	r3, [pc, #392]	; (800755c <_dtoa_r+0x5b4>)
 80073d4:	f7f8 ff8a 	bl	80002ec <__adddf3>
 80073d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80073dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073e0:	9611      	str	r6, [sp, #68]	; 0x44
 80073e2:	2c00      	cmp	r4, #0
 80073e4:	d15d      	bne.n	80074a2 <_dtoa_r+0x4fa>
 80073e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b5c      	ldr	r3, [pc, #368]	; (8007560 <_dtoa_r+0x5b8>)
 80073ee:	f7f8 ff7b 	bl	80002e8 <__aeabi_dsub>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073fa:	4633      	mov	r3, r6
 80073fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073fe:	f7f9 fbbb 	bl	8000b78 <__aeabi_dcmpgt>
 8007402:	2800      	cmp	r0, #0
 8007404:	f040 829e 	bne.w	8007944 <_dtoa_r+0x99c>
 8007408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800740e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007412:	f7f9 fb93 	bl	8000b3c <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8292 	bne.w	8007940 <_dtoa_r+0x998>
 800741c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007420:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007426:	2b00      	cmp	r3, #0
 8007428:	f2c0 8153 	blt.w	80076d2 <_dtoa_r+0x72a>
 800742c:	f1b9 0f0e 	cmp.w	r9, #14
 8007430:	f300 814f 	bgt.w	80076d2 <_dtoa_r+0x72a>
 8007434:	4b45      	ldr	r3, [pc, #276]	; (800754c <_dtoa_r+0x5a4>)
 8007436:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800743a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800743e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007444:	2b00      	cmp	r3, #0
 8007446:	f280 80db 	bge.w	8007600 <_dtoa_r+0x658>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f300 80d7 	bgt.w	8007600 <_dtoa_r+0x658>
 8007452:	f040 8274 	bne.w	800793e <_dtoa_r+0x996>
 8007456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800745a:	2200      	movs	r2, #0
 800745c:	4b40      	ldr	r3, [pc, #256]	; (8007560 <_dtoa_r+0x5b8>)
 800745e:	f7f9 f8fb 	bl	8000658 <__aeabi_dmul>
 8007462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007466:	f7f9 fb7d 	bl	8000b64 <__aeabi_dcmpge>
 800746a:	9c02      	ldr	r4, [sp, #8]
 800746c:	4626      	mov	r6, r4
 800746e:	2800      	cmp	r0, #0
 8007470:	f040 824a 	bne.w	8007908 <_dtoa_r+0x960>
 8007474:	2331      	movs	r3, #49	; 0x31
 8007476:	9f08      	ldr	r7, [sp, #32]
 8007478:	f109 0901 	add.w	r9, r9, #1
 800747c:	f807 3b01 	strb.w	r3, [r7], #1
 8007480:	e246      	b.n	8007910 <_dtoa_r+0x968>
 8007482:	07e2      	lsls	r2, r4, #31
 8007484:	d505      	bpl.n	8007492 <_dtoa_r+0x4ea>
 8007486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800748a:	f7f9 f8e5 	bl	8000658 <__aeabi_dmul>
 800748e:	2301      	movs	r3, #1
 8007490:	3701      	adds	r7, #1
 8007492:	1064      	asrs	r4, r4, #1
 8007494:	3608      	adds	r6, #8
 8007496:	e76d      	b.n	8007374 <_dtoa_r+0x3cc>
 8007498:	2702      	movs	r7, #2
 800749a:	e770      	b.n	800737e <_dtoa_r+0x3d6>
 800749c:	46c8      	mov	r8, r9
 800749e:	9c02      	ldr	r4, [sp, #8]
 80074a0:	e78f      	b.n	80073c2 <_dtoa_r+0x41a>
 80074a2:	9908      	ldr	r1, [sp, #32]
 80074a4:	4b29      	ldr	r3, [pc, #164]	; (800754c <_dtoa_r+0x5a4>)
 80074a6:	4421      	add	r1, r4
 80074a8:	9112      	str	r1, [sp, #72]	; 0x48
 80074aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80074b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	d055      	beq.n	8007568 <_dtoa_r+0x5c0>
 80074bc:	2000      	movs	r0, #0
 80074be:	4929      	ldr	r1, [pc, #164]	; (8007564 <_dtoa_r+0x5bc>)
 80074c0:	f7f9 f9f4 	bl	80008ac <__aeabi_ddiv>
 80074c4:	463b      	mov	r3, r7
 80074c6:	4632      	mov	r2, r6
 80074c8:	f7f8 ff0e 	bl	80002e8 <__aeabi_dsub>
 80074cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074d0:	9f08      	ldr	r7, [sp, #32]
 80074d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d6:	f7f9 fb6f 	bl	8000bb8 <__aeabi_d2iz>
 80074da:	4604      	mov	r4, r0
 80074dc:	f7f9 f852 	bl	8000584 <__aeabi_i2d>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e8:	f7f8 fefe 	bl	80002e8 <__aeabi_dsub>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	3430      	adds	r4, #48	; 0x30
 80074f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074fa:	f807 4b01 	strb.w	r4, [r7], #1
 80074fe:	f7f9 fb1d 	bl	8000b3c <__aeabi_dcmplt>
 8007502:	2800      	cmp	r0, #0
 8007504:	d174      	bne.n	80075f0 <_dtoa_r+0x648>
 8007506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750a:	2000      	movs	r0, #0
 800750c:	4911      	ldr	r1, [pc, #68]	; (8007554 <_dtoa_r+0x5ac>)
 800750e:	f7f8 feeb 	bl	80002e8 <__aeabi_dsub>
 8007512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007516:	f7f9 fb11 	bl	8000b3c <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f040 80b6 	bne.w	800768c <_dtoa_r+0x6e4>
 8007520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007522:	429f      	cmp	r7, r3
 8007524:	f43f af7a 	beq.w	800741c <_dtoa_r+0x474>
 8007528:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800752c:	2200      	movs	r2, #0
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <_dtoa_r+0x5b0>)
 8007530:	f7f9 f892 	bl	8000658 <__aeabi_dmul>
 8007534:	2200      	movs	r2, #0
 8007536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800753a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <_dtoa_r+0x5b0>)
 8007540:	f7f9 f88a 	bl	8000658 <__aeabi_dmul>
 8007544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007548:	e7c3      	b.n	80074d2 <_dtoa_r+0x52a>
 800754a:	bf00      	nop
 800754c:	08009728 	.word	0x08009728
 8007550:	08009700 	.word	0x08009700
 8007554:	3ff00000 	.word	0x3ff00000
 8007558:	40240000 	.word	0x40240000
 800755c:	401c0000 	.word	0x401c0000
 8007560:	40140000 	.word	0x40140000
 8007564:	3fe00000 	.word	0x3fe00000
 8007568:	4630      	mov	r0, r6
 800756a:	4639      	mov	r1, r7
 800756c:	f7f9 f874 	bl	8000658 <__aeabi_dmul>
 8007570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007572:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007576:	9c08      	ldr	r4, [sp, #32]
 8007578:	9314      	str	r3, [sp, #80]	; 0x50
 800757a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757e:	f7f9 fb1b 	bl	8000bb8 <__aeabi_d2iz>
 8007582:	9015      	str	r0, [sp, #84]	; 0x54
 8007584:	f7f8 fffe 	bl	8000584 <__aeabi_i2d>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007590:	f7f8 feaa 	bl	80002e8 <__aeabi_dsub>
 8007594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007596:	4606      	mov	r6, r0
 8007598:	3330      	adds	r3, #48	; 0x30
 800759a:	f804 3b01 	strb.w	r3, [r4], #1
 800759e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075a0:	460f      	mov	r7, r1
 80075a2:	429c      	cmp	r4, r3
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	d124      	bne.n	80075f4 <_dtoa_r+0x64c>
 80075aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ae:	4bb3      	ldr	r3, [pc, #716]	; (800787c <_dtoa_r+0x8d4>)
 80075b0:	f7f8 fe9c 	bl	80002ec <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 fadc 	bl	8000b78 <__aeabi_dcmpgt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d162      	bne.n	800768a <_dtoa_r+0x6e2>
 80075c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075c8:	2000      	movs	r0, #0
 80075ca:	49ac      	ldr	r1, [pc, #688]	; (800787c <_dtoa_r+0x8d4>)
 80075cc:	f7f8 fe8c 	bl	80002e8 <__aeabi_dsub>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4630      	mov	r0, r6
 80075d6:	4639      	mov	r1, r7
 80075d8:	f7f9 fab0 	bl	8000b3c <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f af1d 	beq.w	800741c <_dtoa_r+0x474>
 80075e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80075e4:	1e7b      	subs	r3, r7, #1
 80075e6:	9314      	str	r3, [sp, #80]	; 0x50
 80075e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d0f8      	beq.n	80075e2 <_dtoa_r+0x63a>
 80075f0:	46c1      	mov	r9, r8
 80075f2:	e03a      	b.n	800766a <_dtoa_r+0x6c2>
 80075f4:	4ba2      	ldr	r3, [pc, #648]	; (8007880 <_dtoa_r+0x8d8>)
 80075f6:	f7f9 f82f 	bl	8000658 <__aeabi_dmul>
 80075fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075fe:	e7bc      	b.n	800757a <_dtoa_r+0x5d2>
 8007600:	9f08      	ldr	r7, [sp, #32]
 8007602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800760a:	f7f9 f94f 	bl	80008ac <__aeabi_ddiv>
 800760e:	f7f9 fad3 	bl	8000bb8 <__aeabi_d2iz>
 8007612:	4604      	mov	r4, r0
 8007614:	f7f8 ffb6 	bl	8000584 <__aeabi_i2d>
 8007618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800761c:	f7f9 f81c 	bl	8000658 <__aeabi_dmul>
 8007620:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007624:	460b      	mov	r3, r1
 8007626:	4602      	mov	r2, r0
 8007628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800762c:	f7f8 fe5c 	bl	80002e8 <__aeabi_dsub>
 8007630:	f807 6b01 	strb.w	r6, [r7], #1
 8007634:	9e08      	ldr	r6, [sp, #32]
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	1bbe      	subs	r6, r7, r6
 800763a:	42b3      	cmp	r3, r6
 800763c:	d13a      	bne.n	80076b4 <_dtoa_r+0x70c>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	f7f8 fe53 	bl	80002ec <__adddf3>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800764e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007652:	f7f9 fa91 	bl	8000b78 <__aeabi_dcmpgt>
 8007656:	bb58      	cbnz	r0, 80076b0 <_dtoa_r+0x708>
 8007658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800765c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007660:	f7f9 fa62 	bl	8000b28 <__aeabi_dcmpeq>
 8007664:	b108      	cbz	r0, 800766a <_dtoa_r+0x6c2>
 8007666:	07e1      	lsls	r1, r4, #31
 8007668:	d422      	bmi.n	80076b0 <_dtoa_r+0x708>
 800766a:	4628      	mov	r0, r5
 800766c:	4651      	mov	r1, sl
 800766e:	f000 faf1 	bl	8007c54 <_Bfree>
 8007672:	2300      	movs	r3, #0
 8007674:	703b      	strb	r3, [r7, #0]
 8007676:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007678:	f109 0001 	add.w	r0, r9, #1
 800767c:	6018      	str	r0, [r3, #0]
 800767e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007680:	2b00      	cmp	r3, #0
 8007682:	f43f acdf 	beq.w	8007044 <_dtoa_r+0x9c>
 8007686:	601f      	str	r7, [r3, #0]
 8007688:	e4dc      	b.n	8007044 <_dtoa_r+0x9c>
 800768a:	4627      	mov	r7, r4
 800768c:	463b      	mov	r3, r7
 800768e:	461f      	mov	r7, r3
 8007690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007694:	2a39      	cmp	r2, #57	; 0x39
 8007696:	d107      	bne.n	80076a8 <_dtoa_r+0x700>
 8007698:	9a08      	ldr	r2, [sp, #32]
 800769a:	429a      	cmp	r2, r3
 800769c:	d1f7      	bne.n	800768e <_dtoa_r+0x6e6>
 800769e:	2230      	movs	r2, #48	; 0x30
 80076a0:	9908      	ldr	r1, [sp, #32]
 80076a2:	f108 0801 	add.w	r8, r8, #1
 80076a6:	700a      	strb	r2, [r1, #0]
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	3201      	adds	r2, #1
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	e79f      	b.n	80075f0 <_dtoa_r+0x648>
 80076b0:	46c8      	mov	r8, r9
 80076b2:	e7eb      	b.n	800768c <_dtoa_r+0x6e4>
 80076b4:	2200      	movs	r2, #0
 80076b6:	4b72      	ldr	r3, [pc, #456]	; (8007880 <_dtoa_r+0x8d8>)
 80076b8:	f7f8 ffce 	bl	8000658 <__aeabi_dmul>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2300      	movs	r3, #0
 80076c8:	f7f9 fa2e 	bl	8000b28 <__aeabi_dcmpeq>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d098      	beq.n	8007602 <_dtoa_r+0x65a>
 80076d0:	e7cb      	b.n	800766a <_dtoa_r+0x6c2>
 80076d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	f000 80cd 	beq.w	8007874 <_dtoa_r+0x8cc>
 80076da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076dc:	2a01      	cmp	r2, #1
 80076de:	f300 80af 	bgt.w	8007840 <_dtoa_r+0x898>
 80076e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	f000 80a7 	beq.w	8007838 <_dtoa_r+0x890>
 80076ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076f0:	9f06      	ldr	r7, [sp, #24]
 80076f2:	9a06      	ldr	r2, [sp, #24]
 80076f4:	2101      	movs	r1, #1
 80076f6:	441a      	add	r2, r3
 80076f8:	9206      	str	r2, [sp, #24]
 80076fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076fc:	4628      	mov	r0, r5
 80076fe:	441a      	add	r2, r3
 8007700:	9209      	str	r2, [sp, #36]	; 0x24
 8007702:	f000 fb61 	bl	8007dc8 <__i2b>
 8007706:	4606      	mov	r6, r0
 8007708:	2f00      	cmp	r7, #0
 800770a:	dd0c      	ble.n	8007726 <_dtoa_r+0x77e>
 800770c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd09      	ble.n	8007726 <_dtoa_r+0x77e>
 8007712:	42bb      	cmp	r3, r7
 8007714:	bfa8      	it	ge
 8007716:	463b      	movge	r3, r7
 8007718:	9a06      	ldr	r2, [sp, #24]
 800771a:	1aff      	subs	r7, r7, r3
 800771c:	1ad2      	subs	r2, r2, r3
 800771e:	9206      	str	r2, [sp, #24]
 8007720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	b1f3      	cbz	r3, 8007768 <_dtoa_r+0x7c0>
 800772a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80a9 	beq.w	8007884 <_dtoa_r+0x8dc>
 8007732:	2c00      	cmp	r4, #0
 8007734:	dd10      	ble.n	8007758 <_dtoa_r+0x7b0>
 8007736:	4631      	mov	r1, r6
 8007738:	4622      	mov	r2, r4
 800773a:	4628      	mov	r0, r5
 800773c:	f000 fbfe 	bl	8007f3c <__pow5mult>
 8007740:	4652      	mov	r2, sl
 8007742:	4601      	mov	r1, r0
 8007744:	4606      	mov	r6, r0
 8007746:	4628      	mov	r0, r5
 8007748:	f000 fb54 	bl	8007df4 <__multiply>
 800774c:	4680      	mov	r8, r0
 800774e:	4651      	mov	r1, sl
 8007750:	4628      	mov	r0, r5
 8007752:	f000 fa7f 	bl	8007c54 <_Bfree>
 8007756:	46c2      	mov	sl, r8
 8007758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775a:	1b1a      	subs	r2, r3, r4
 800775c:	d004      	beq.n	8007768 <_dtoa_r+0x7c0>
 800775e:	4651      	mov	r1, sl
 8007760:	4628      	mov	r0, r5
 8007762:	f000 fbeb 	bl	8007f3c <__pow5mult>
 8007766:	4682      	mov	sl, r0
 8007768:	2101      	movs	r1, #1
 800776a:	4628      	mov	r0, r5
 800776c:	f000 fb2c 	bl	8007dc8 <__i2b>
 8007770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007772:	4604      	mov	r4, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	f340 8087 	ble.w	8007888 <_dtoa_r+0x8e0>
 800777a:	461a      	mov	r2, r3
 800777c:	4601      	mov	r1, r0
 800777e:	4628      	mov	r0, r5
 8007780:	f000 fbdc 	bl	8007f3c <__pow5mult>
 8007784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007786:	4604      	mov	r4, r0
 8007788:	2b01      	cmp	r3, #1
 800778a:	f340 8080 	ble.w	800788e <_dtoa_r+0x8e6>
 800778e:	f04f 0800 	mov.w	r8, #0
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007798:	6918      	ldr	r0, [r3, #16]
 800779a:	f000 fac7 	bl	8007d2c <__hi0bits>
 800779e:	f1c0 0020 	rsb	r0, r0, #32
 80077a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a4:	4418      	add	r0, r3
 80077a6:	f010 001f 	ands.w	r0, r0, #31
 80077aa:	f000 8092 	beq.w	80078d2 <_dtoa_r+0x92a>
 80077ae:	f1c0 0320 	rsb	r3, r0, #32
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	f340 808a 	ble.w	80078cc <_dtoa_r+0x924>
 80077b8:	f1c0 001c 	rsb	r0, r0, #28
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	4407      	add	r7, r0
 80077c0:	4403      	add	r3, r0
 80077c2:	9306      	str	r3, [sp, #24]
 80077c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c6:	4403      	add	r3, r0
 80077c8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ca:	9b06      	ldr	r3, [sp, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd05      	ble.n	80077dc <_dtoa_r+0x834>
 80077d0:	4651      	mov	r1, sl
 80077d2:	461a      	mov	r2, r3
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fc0b 	bl	8007ff0 <__lshift>
 80077da:	4682      	mov	sl, r0
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd05      	ble.n	80077ee <_dtoa_r+0x846>
 80077e2:	4621      	mov	r1, r4
 80077e4:	461a      	mov	r2, r3
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fc02 	bl	8007ff0 <__lshift>
 80077ec:	4604      	mov	r4, r0
 80077ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d070      	beq.n	80078d6 <_dtoa_r+0x92e>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4650      	mov	r0, sl
 80077f8:	f000 fc66 	bl	80080c8 <__mcmp>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	da6a      	bge.n	80078d6 <_dtoa_r+0x92e>
 8007800:	2300      	movs	r3, #0
 8007802:	4651      	mov	r1, sl
 8007804:	220a      	movs	r2, #10
 8007806:	4628      	mov	r0, r5
 8007808:	f000 fa46 	bl	8007c98 <__multadd>
 800780c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780e:	4682      	mov	sl, r0
 8007810:	f109 39ff 	add.w	r9, r9, #4294967295
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8193 	beq.w	8007b40 <_dtoa_r+0xb98>
 800781a:	4631      	mov	r1, r6
 800781c:	2300      	movs	r3, #0
 800781e:	220a      	movs	r2, #10
 8007820:	4628      	mov	r0, r5
 8007822:	f000 fa39 	bl	8007c98 <__multadd>
 8007826:	f1bb 0f00 	cmp.w	fp, #0
 800782a:	4606      	mov	r6, r0
 800782c:	f300 8093 	bgt.w	8007956 <_dtoa_r+0x9ae>
 8007830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007832:	2b02      	cmp	r3, #2
 8007834:	dc57      	bgt.n	80078e6 <_dtoa_r+0x93e>
 8007836:	e08e      	b.n	8007956 <_dtoa_r+0x9ae>
 8007838:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800783a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800783e:	e756      	b.n	80076ee <_dtoa_r+0x746>
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	1e5c      	subs	r4, r3, #1
 8007844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007846:	42a3      	cmp	r3, r4
 8007848:	bfb7      	itett	lt
 800784a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800784c:	1b1c      	subge	r4, r3, r4
 800784e:	1ae2      	sublt	r2, r4, r3
 8007850:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007852:	bfbe      	ittt	lt
 8007854:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007856:	189b      	addlt	r3, r3, r2
 8007858:	930e      	strlt	r3, [sp, #56]	; 0x38
 800785a:	9b02      	ldr	r3, [sp, #8]
 800785c:	bfb8      	it	lt
 800785e:	2400      	movlt	r4, #0
 8007860:	2b00      	cmp	r3, #0
 8007862:	bfbb      	ittet	lt
 8007864:	9b06      	ldrlt	r3, [sp, #24]
 8007866:	9a02      	ldrlt	r2, [sp, #8]
 8007868:	9f06      	ldrge	r7, [sp, #24]
 800786a:	1a9f      	sublt	r7, r3, r2
 800786c:	bfac      	ite	ge
 800786e:	9b02      	ldrge	r3, [sp, #8]
 8007870:	2300      	movlt	r3, #0
 8007872:	e73e      	b.n	80076f2 <_dtoa_r+0x74a>
 8007874:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007876:	9f06      	ldr	r7, [sp, #24]
 8007878:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800787a:	e745      	b.n	8007708 <_dtoa_r+0x760>
 800787c:	3fe00000 	.word	0x3fe00000
 8007880:	40240000 	.word	0x40240000
 8007884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007886:	e76a      	b.n	800775e <_dtoa_r+0x7b6>
 8007888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800788a:	2b01      	cmp	r3, #1
 800788c:	dc19      	bgt.n	80078c2 <_dtoa_r+0x91a>
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	b9bb      	cbnz	r3, 80078c2 <_dtoa_r+0x91a>
 8007892:	9b05      	ldr	r3, [sp, #20]
 8007894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007898:	b99b      	cbnz	r3, 80078c2 <_dtoa_r+0x91a>
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	0d1b      	lsrs	r3, r3, #20
 80078a2:	051b      	lsls	r3, r3, #20
 80078a4:	b183      	cbz	r3, 80078c8 <_dtoa_r+0x920>
 80078a6:	f04f 0801 	mov.w	r8, #1
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	3301      	adds	r3, #1
 80078ae:	9306      	str	r3, [sp, #24]
 80078b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b2:	3301      	adds	r3, #1
 80078b4:	9309      	str	r3, [sp, #36]	; 0x24
 80078b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f47f af6a 	bne.w	8007792 <_dtoa_r+0x7ea>
 80078be:	2001      	movs	r0, #1
 80078c0:	e76f      	b.n	80077a2 <_dtoa_r+0x7fa>
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	e7f6      	b.n	80078b6 <_dtoa_r+0x90e>
 80078c8:	4698      	mov	r8, r3
 80078ca:	e7f4      	b.n	80078b6 <_dtoa_r+0x90e>
 80078cc:	f43f af7d 	beq.w	80077ca <_dtoa_r+0x822>
 80078d0:	4618      	mov	r0, r3
 80078d2:	301c      	adds	r0, #28
 80078d4:	e772      	b.n	80077bc <_dtoa_r+0x814>
 80078d6:	9b02      	ldr	r3, [sp, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc36      	bgt.n	800794a <_dtoa_r+0x9a2>
 80078dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dd33      	ble.n	800794a <_dtoa_r+0x9a2>
 80078e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80078e6:	f1bb 0f00 	cmp.w	fp, #0
 80078ea:	d10d      	bne.n	8007908 <_dtoa_r+0x960>
 80078ec:	4621      	mov	r1, r4
 80078ee:	465b      	mov	r3, fp
 80078f0:	2205      	movs	r2, #5
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 f9d0 	bl	8007c98 <__multadd>
 80078f8:	4601      	mov	r1, r0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4650      	mov	r0, sl
 80078fe:	f000 fbe3 	bl	80080c8 <__mcmp>
 8007902:	2800      	cmp	r0, #0
 8007904:	f73f adb6 	bgt.w	8007474 <_dtoa_r+0x4cc>
 8007908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800790a:	9f08      	ldr	r7, [sp, #32]
 800790c:	ea6f 0903 	mvn.w	r9, r3
 8007910:	f04f 0800 	mov.w	r8, #0
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f99c 	bl	8007c54 <_Bfree>
 800791c:	2e00      	cmp	r6, #0
 800791e:	f43f aea4 	beq.w	800766a <_dtoa_r+0x6c2>
 8007922:	f1b8 0f00 	cmp.w	r8, #0
 8007926:	d005      	beq.n	8007934 <_dtoa_r+0x98c>
 8007928:	45b0      	cmp	r8, r6
 800792a:	d003      	beq.n	8007934 <_dtoa_r+0x98c>
 800792c:	4641      	mov	r1, r8
 800792e:	4628      	mov	r0, r5
 8007930:	f000 f990 	bl	8007c54 <_Bfree>
 8007934:	4631      	mov	r1, r6
 8007936:	4628      	mov	r0, r5
 8007938:	f000 f98c 	bl	8007c54 <_Bfree>
 800793c:	e695      	b.n	800766a <_dtoa_r+0x6c2>
 800793e:	2400      	movs	r4, #0
 8007940:	4626      	mov	r6, r4
 8007942:	e7e1      	b.n	8007908 <_dtoa_r+0x960>
 8007944:	46c1      	mov	r9, r8
 8007946:	4626      	mov	r6, r4
 8007948:	e594      	b.n	8007474 <_dtoa_r+0x4cc>
 800794a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80fc 	beq.w	8007b4e <_dtoa_r+0xba6>
 8007956:	2f00      	cmp	r7, #0
 8007958:	dd05      	ble.n	8007966 <_dtoa_r+0x9be>
 800795a:	4631      	mov	r1, r6
 800795c:	463a      	mov	r2, r7
 800795e:	4628      	mov	r0, r5
 8007960:	f000 fb46 	bl	8007ff0 <__lshift>
 8007964:	4606      	mov	r6, r0
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	d05c      	beq.n	8007a26 <_dtoa_r+0xa7e>
 800796c:	4628      	mov	r0, r5
 800796e:	6871      	ldr	r1, [r6, #4]
 8007970:	f000 f930 	bl	8007bd4 <_Balloc>
 8007974:	4607      	mov	r7, r0
 8007976:	b928      	cbnz	r0, 8007984 <_dtoa_r+0x9dc>
 8007978:	4602      	mov	r2, r0
 800797a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800797e:	4b7e      	ldr	r3, [pc, #504]	; (8007b78 <_dtoa_r+0xbd0>)
 8007980:	f7ff bb26 	b.w	8006fd0 <_dtoa_r+0x28>
 8007984:	6932      	ldr	r2, [r6, #16]
 8007986:	f106 010c 	add.w	r1, r6, #12
 800798a:	3202      	adds	r2, #2
 800798c:	0092      	lsls	r2, r2, #2
 800798e:	300c      	adds	r0, #12
 8007990:	f000 f912 	bl	8007bb8 <memcpy>
 8007994:	2201      	movs	r2, #1
 8007996:	4639      	mov	r1, r7
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fb29 	bl	8007ff0 <__lshift>
 800799e:	46b0      	mov	r8, r6
 80079a0:	4606      	mov	r6, r0
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	3301      	adds	r3, #1
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	9b08      	ldr	r3, [sp, #32]
 80079aa:	445b      	add	r3, fp
 80079ac:	930a      	str	r3, [sp, #40]	; 0x28
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	9309      	str	r3, [sp, #36]	; 0x24
 80079b6:	9b02      	ldr	r3, [sp, #8]
 80079b8:	4621      	mov	r1, r4
 80079ba:	4650      	mov	r0, sl
 80079bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80079c0:	f7ff fa62 	bl	8006e88 <quorem>
 80079c4:	4603      	mov	r3, r0
 80079c6:	4641      	mov	r1, r8
 80079c8:	3330      	adds	r3, #48	; 0x30
 80079ca:	9004      	str	r0, [sp, #16]
 80079cc:	4650      	mov	r0, sl
 80079ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d0:	f000 fb7a 	bl	80080c8 <__mcmp>
 80079d4:	4632      	mov	r2, r6
 80079d6:	9006      	str	r0, [sp, #24]
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 fb90 	bl	8008100 <__mdiff>
 80079e0:	68c2      	ldr	r2, [r0, #12]
 80079e2:	4607      	mov	r7, r0
 80079e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e6:	bb02      	cbnz	r2, 8007a2a <_dtoa_r+0xa82>
 80079e8:	4601      	mov	r1, r0
 80079ea:	4650      	mov	r0, sl
 80079ec:	f000 fb6c 	bl	80080c8 <__mcmp>
 80079f0:	4602      	mov	r2, r0
 80079f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f4:	4639      	mov	r1, r7
 80079f6:	4628      	mov	r0, r5
 80079f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80079fc:	f000 f92a 	bl	8007c54 <_Bfree>
 8007a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a04:	9f02      	ldr	r7, [sp, #8]
 8007a06:	ea43 0102 	orr.w	r1, r3, r2
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a10:	d10d      	bne.n	8007a2e <_dtoa_r+0xa86>
 8007a12:	2b39      	cmp	r3, #57	; 0x39
 8007a14:	d027      	beq.n	8007a66 <_dtoa_r+0xabe>
 8007a16:	9a06      	ldr	r2, [sp, #24]
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	dd01      	ble.n	8007a20 <_dtoa_r+0xa78>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	3331      	adds	r3, #49	; 0x31
 8007a20:	f88b 3000 	strb.w	r3, [fp]
 8007a24:	e776      	b.n	8007914 <_dtoa_r+0x96c>
 8007a26:	4630      	mov	r0, r6
 8007a28:	e7b9      	b.n	800799e <_dtoa_r+0x9f6>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	e7e2      	b.n	80079f4 <_dtoa_r+0xa4c>
 8007a2e:	9906      	ldr	r1, [sp, #24]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	db04      	blt.n	8007a3e <_dtoa_r+0xa96>
 8007a34:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007a36:	4301      	orrs	r1, r0
 8007a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a3a:	4301      	orrs	r1, r0
 8007a3c:	d120      	bne.n	8007a80 <_dtoa_r+0xad8>
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	ddee      	ble.n	8007a20 <_dtoa_r+0xa78>
 8007a42:	4651      	mov	r1, sl
 8007a44:	2201      	movs	r2, #1
 8007a46:	4628      	mov	r0, r5
 8007a48:	9302      	str	r3, [sp, #8]
 8007a4a:	f000 fad1 	bl	8007ff0 <__lshift>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4682      	mov	sl, r0
 8007a52:	f000 fb39 	bl	80080c8 <__mcmp>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	dc02      	bgt.n	8007a62 <_dtoa_r+0xaba>
 8007a5c:	d1e0      	bne.n	8007a20 <_dtoa_r+0xa78>
 8007a5e:	07da      	lsls	r2, r3, #31
 8007a60:	d5de      	bpl.n	8007a20 <_dtoa_r+0xa78>
 8007a62:	2b39      	cmp	r3, #57	; 0x39
 8007a64:	d1da      	bne.n	8007a1c <_dtoa_r+0xa74>
 8007a66:	2339      	movs	r3, #57	; 0x39
 8007a68:	f88b 3000 	strb.w	r3, [fp]
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	461f      	mov	r7, r3
 8007a70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	2a39      	cmp	r2, #57	; 0x39
 8007a78:	d050      	beq.n	8007b1c <_dtoa_r+0xb74>
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e749      	b.n	8007914 <_dtoa_r+0x96c>
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	dd03      	ble.n	8007a8c <_dtoa_r+0xae4>
 8007a84:	2b39      	cmp	r3, #57	; 0x39
 8007a86:	d0ee      	beq.n	8007a66 <_dtoa_r+0xabe>
 8007a88:	3301      	adds	r3, #1
 8007a8a:	e7c9      	b.n	8007a20 <_dtoa_r+0xa78>
 8007a8c:	9a02      	ldr	r2, [sp, #8]
 8007a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a94:	428a      	cmp	r2, r1
 8007a96:	d02a      	beq.n	8007aee <_dtoa_r+0xb46>
 8007a98:	4651      	mov	r1, sl
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 f8fa 	bl	8007c98 <__multadd>
 8007aa4:	45b0      	cmp	r8, r6
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	f04f 020a 	mov.w	r2, #10
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	d107      	bne.n	8007ac6 <_dtoa_r+0xb1e>
 8007ab6:	f000 f8ef 	bl	8007c98 <__multadd>
 8007aba:	4680      	mov	r8, r0
 8007abc:	4606      	mov	r6, r0
 8007abe:	9b02      	ldr	r3, [sp, #8]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	e777      	b.n	80079b6 <_dtoa_r+0xa0e>
 8007ac6:	f000 f8e7 	bl	8007c98 <__multadd>
 8007aca:	4631      	mov	r1, r6
 8007acc:	4680      	mov	r8, r0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f8e0 	bl	8007c98 <__multadd>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	e7f0      	b.n	8007abe <_dtoa_r+0xb16>
 8007adc:	f1bb 0f00 	cmp.w	fp, #0
 8007ae0:	bfcc      	ite	gt
 8007ae2:	465f      	movgt	r7, fp
 8007ae4:	2701      	movle	r7, #1
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	9a08      	ldr	r2, [sp, #32]
 8007aec:	4417      	add	r7, r2
 8007aee:	4651      	mov	r1, sl
 8007af0:	2201      	movs	r2, #1
 8007af2:	4628      	mov	r0, r5
 8007af4:	9302      	str	r3, [sp, #8]
 8007af6:	f000 fa7b 	bl	8007ff0 <__lshift>
 8007afa:	4621      	mov	r1, r4
 8007afc:	4682      	mov	sl, r0
 8007afe:	f000 fae3 	bl	80080c8 <__mcmp>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	dcb2      	bgt.n	8007a6c <_dtoa_r+0xac4>
 8007b06:	d102      	bne.n	8007b0e <_dtoa_r+0xb66>
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d4ae      	bmi.n	8007a6c <_dtoa_r+0xac4>
 8007b0e:	463b      	mov	r3, r7
 8007b10:	461f      	mov	r7, r3
 8007b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b16:	2a30      	cmp	r2, #48	; 0x30
 8007b18:	d0fa      	beq.n	8007b10 <_dtoa_r+0xb68>
 8007b1a:	e6fb      	b.n	8007914 <_dtoa_r+0x96c>
 8007b1c:	9a08      	ldr	r2, [sp, #32]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d1a5      	bne.n	8007a6e <_dtoa_r+0xac6>
 8007b22:	2331      	movs	r3, #49	; 0x31
 8007b24:	f109 0901 	add.w	r9, r9, #1
 8007b28:	7013      	strb	r3, [r2, #0]
 8007b2a:	e6f3      	b.n	8007914 <_dtoa_r+0x96c>
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <_dtoa_r+0xbd4>)
 8007b2e:	f7ff baa7 	b.w	8007080 <_dtoa_r+0xd8>
 8007b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f47f aa80 	bne.w	800703a <_dtoa_r+0x92>
 8007b3a:	4b11      	ldr	r3, [pc, #68]	; (8007b80 <_dtoa_r+0xbd8>)
 8007b3c:	f7ff baa0 	b.w	8007080 <_dtoa_r+0xd8>
 8007b40:	f1bb 0f00 	cmp.w	fp, #0
 8007b44:	dc03      	bgt.n	8007b4e <_dtoa_r+0xba6>
 8007b46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	f73f aecc 	bgt.w	80078e6 <_dtoa_r+0x93e>
 8007b4e:	9f08      	ldr	r7, [sp, #32]
 8007b50:	4621      	mov	r1, r4
 8007b52:	4650      	mov	r0, sl
 8007b54:	f7ff f998 	bl	8006e88 <quorem>
 8007b58:	9a08      	ldr	r2, [sp, #32]
 8007b5a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b5e:	f807 3b01 	strb.w	r3, [r7], #1
 8007b62:	1aba      	subs	r2, r7, r2
 8007b64:	4593      	cmp	fp, r2
 8007b66:	ddb9      	ble.n	8007adc <_dtoa_r+0xb34>
 8007b68:	4651      	mov	r1, sl
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 f892 	bl	8007c98 <__multadd>
 8007b74:	4682      	mov	sl, r0
 8007b76:	e7eb      	b.n	8007b50 <_dtoa_r+0xba8>
 8007b78:	0800968b 	.word	0x0800968b
 8007b7c:	080095e4 	.word	0x080095e4
 8007b80:	08009608 	.word	0x08009608

08007b84 <_localeconv_r>:
 8007b84:	4800      	ldr	r0, [pc, #0]	; (8007b88 <_localeconv_r+0x4>)
 8007b86:	4770      	bx	lr
 8007b88:	20000168 	.word	0x20000168

08007b8c <malloc>:
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <malloc+0xc>)
 8007b8e:	4601      	mov	r1, r0
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f000 bbfb 	b.w	800838c <_malloc_r>
 8007b96:	bf00      	nop
 8007b98:	20000014 	.word	0x20000014

08007b9c <memchr>:
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	b2c9      	uxtb	r1, r1
 8007ba2:	4402      	add	r2, r0
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	d101      	bne.n	8007bae <memchr+0x12>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e003      	b.n	8007bb6 <memchr+0x1a>
 8007bae:	7804      	ldrb	r4, [r0, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	428c      	cmp	r4, r1
 8007bb4:	d1f6      	bne.n	8007ba4 <memchr+0x8>
 8007bb6:	bd10      	pop	{r4, pc}

08007bb8 <memcpy>:
 8007bb8:	440a      	add	r2, r1
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bc0:	d100      	bne.n	8007bc4 <memcpy+0xc>
 8007bc2:	4770      	bx	lr
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bd0:	d1f9      	bne.n	8007bc6 <memcpy+0xe>
 8007bd2:	bd10      	pop	{r4, pc}

08007bd4 <_Balloc>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	b976      	cbnz	r6, 8007bfc <_Balloc+0x28>
 8007bde:	2010      	movs	r0, #16
 8007be0:	f7ff ffd4 	bl	8007b8c <malloc>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6260      	str	r0, [r4, #36]	; 0x24
 8007be8:	b920      	cbnz	r0, 8007bf4 <_Balloc+0x20>
 8007bea:	2166      	movs	r1, #102	; 0x66
 8007bec:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <_Balloc+0x78>)
 8007bee:	4818      	ldr	r0, [pc, #96]	; (8007c50 <_Balloc+0x7c>)
 8007bf0:	f000 fd92 	bl	8008718 <__assert_func>
 8007bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf8:	6006      	str	r6, [r0, #0]
 8007bfa:	60c6      	str	r6, [r0, #12]
 8007bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bfe:	68f3      	ldr	r3, [r6, #12]
 8007c00:	b183      	cbz	r3, 8007c24 <_Balloc+0x50>
 8007c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c0a:	b9b8      	cbnz	r0, 8007c3c <_Balloc+0x68>
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c12:	1d72      	adds	r2, r6, #5
 8007c14:	4620      	mov	r0, r4
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	f000 fb5e 	bl	80082d8 <_calloc_r>
 8007c1c:	b160      	cbz	r0, 8007c38 <_Balloc+0x64>
 8007c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c22:	e00e      	b.n	8007c42 <_Balloc+0x6e>
 8007c24:	2221      	movs	r2, #33	; 0x21
 8007c26:	2104      	movs	r1, #4
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fb55 	bl	80082d8 <_calloc_r>
 8007c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c30:	60f0      	str	r0, [r6, #12]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e4      	bne.n	8007c02 <_Balloc+0x2e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	6802      	ldr	r2, [r0, #0]
 8007c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c42:	2300      	movs	r3, #0
 8007c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c48:	e7f7      	b.n	8007c3a <_Balloc+0x66>
 8007c4a:	bf00      	nop
 8007c4c:	08009615 	.word	0x08009615
 8007c50:	0800969c 	.word	0x0800969c

08007c54 <_Bfree>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c58:	4605      	mov	r5, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	b976      	cbnz	r6, 8007c7c <_Bfree+0x28>
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff ff94 	bl	8007b8c <malloc>
 8007c64:	4602      	mov	r2, r0
 8007c66:	6268      	str	r0, [r5, #36]	; 0x24
 8007c68:	b920      	cbnz	r0, 8007c74 <_Bfree+0x20>
 8007c6a:	218a      	movs	r1, #138	; 0x8a
 8007c6c:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <_Bfree+0x3c>)
 8007c6e:	4809      	ldr	r0, [pc, #36]	; (8007c94 <_Bfree+0x40>)
 8007c70:	f000 fd52 	bl	8008718 <__assert_func>
 8007c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c78:	6006      	str	r6, [r0, #0]
 8007c7a:	60c6      	str	r6, [r0, #12]
 8007c7c:	b13c      	cbz	r4, 8007c8e <_Bfree+0x3a>
 8007c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c80:	6862      	ldr	r2, [r4, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c88:	6021      	str	r1, [r4, #0]
 8007c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	08009615 	.word	0x08009615
 8007c94:	0800969c 	.word	0x0800969c

08007c98 <__multadd>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	4698      	mov	r8, r3
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	690e      	ldr	r6, [r1, #16]
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	f101 0014 	add.w	r0, r1, #20
 8007caa:	6805      	ldr	r5, [r0, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	b2a9      	uxth	r1, r5
 8007cb0:	fb02 8101 	mla	r1, r2, r1, r8
 8007cb4:	0c2d      	lsrs	r5, r5, #16
 8007cb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007cba:	fb02 c505 	mla	r5, r2, r5, ip
 8007cbe:	b289      	uxth	r1, r1
 8007cc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007cc4:	429e      	cmp	r6, r3
 8007cc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007cca:	f840 1b04 	str.w	r1, [r0], #4
 8007cce:	dcec      	bgt.n	8007caa <__multadd+0x12>
 8007cd0:	f1b8 0f00 	cmp.w	r8, #0
 8007cd4:	d022      	beq.n	8007d1c <__multadd+0x84>
 8007cd6:	68a3      	ldr	r3, [r4, #8]
 8007cd8:	42b3      	cmp	r3, r6
 8007cda:	dc19      	bgt.n	8007d10 <__multadd+0x78>
 8007cdc:	6861      	ldr	r1, [r4, #4]
 8007cde:	4638      	mov	r0, r7
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	f7ff ff77 	bl	8007bd4 <_Balloc>
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <__multadd+0x5e>
 8007cea:	4602      	mov	r2, r0
 8007cec:	21b5      	movs	r1, #181	; 0xb5
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <__multadd+0x8c>)
 8007cf0:	480d      	ldr	r0, [pc, #52]	; (8007d28 <__multadd+0x90>)
 8007cf2:	f000 fd11 	bl	8008718 <__assert_func>
 8007cf6:	6922      	ldr	r2, [r4, #16]
 8007cf8:	f104 010c 	add.w	r1, r4, #12
 8007cfc:	3202      	adds	r2, #2
 8007cfe:	0092      	lsls	r2, r2, #2
 8007d00:	300c      	adds	r0, #12
 8007d02:	f7ff ff59 	bl	8007bb8 <memcpy>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff ffa3 	bl	8007c54 <_Bfree>
 8007d0e:	462c      	mov	r4, r5
 8007d10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d14:	3601      	adds	r6, #1
 8007d16:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d1a:	6126      	str	r6, [r4, #16]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d22:	bf00      	nop
 8007d24:	0800968b 	.word	0x0800968b
 8007d28:	0800969c 	.word	0x0800969c

08007d2c <__hi0bits>:
 8007d2c:	0c02      	lsrs	r2, r0, #16
 8007d2e:	0412      	lsls	r2, r2, #16
 8007d30:	4603      	mov	r3, r0
 8007d32:	b9ca      	cbnz	r2, 8007d68 <__hi0bits+0x3c>
 8007d34:	0403      	lsls	r3, r0, #16
 8007d36:	2010      	movs	r0, #16
 8007d38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d3c:	bf04      	itt	eq
 8007d3e:	021b      	lsleq	r3, r3, #8
 8007d40:	3008      	addeq	r0, #8
 8007d42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d46:	bf04      	itt	eq
 8007d48:	011b      	lsleq	r3, r3, #4
 8007d4a:	3004      	addeq	r0, #4
 8007d4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d50:	bf04      	itt	eq
 8007d52:	009b      	lsleq	r3, r3, #2
 8007d54:	3002      	addeq	r0, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	db05      	blt.n	8007d66 <__hi0bits+0x3a>
 8007d5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d5e:	f100 0001 	add.w	r0, r0, #1
 8007d62:	bf08      	it	eq
 8007d64:	2020      	moveq	r0, #32
 8007d66:	4770      	bx	lr
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e7e5      	b.n	8007d38 <__hi0bits+0xc>

08007d6c <__lo0bits>:
 8007d6c:	6803      	ldr	r3, [r0, #0]
 8007d6e:	4602      	mov	r2, r0
 8007d70:	f013 0007 	ands.w	r0, r3, #7
 8007d74:	d00b      	beq.n	8007d8e <__lo0bits+0x22>
 8007d76:	07d9      	lsls	r1, r3, #31
 8007d78:	d422      	bmi.n	8007dc0 <__lo0bits+0x54>
 8007d7a:	0798      	lsls	r0, r3, #30
 8007d7c:	bf49      	itett	mi
 8007d7e:	085b      	lsrmi	r3, r3, #1
 8007d80:	089b      	lsrpl	r3, r3, #2
 8007d82:	2001      	movmi	r0, #1
 8007d84:	6013      	strmi	r3, [r2, #0]
 8007d86:	bf5c      	itt	pl
 8007d88:	2002      	movpl	r0, #2
 8007d8a:	6013      	strpl	r3, [r2, #0]
 8007d8c:	4770      	bx	lr
 8007d8e:	b299      	uxth	r1, r3
 8007d90:	b909      	cbnz	r1, 8007d96 <__lo0bits+0x2a>
 8007d92:	2010      	movs	r0, #16
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d9a:	bf04      	itt	eq
 8007d9c:	0a1b      	lsreq	r3, r3, #8
 8007d9e:	3008      	addeq	r0, #8
 8007da0:	0719      	lsls	r1, r3, #28
 8007da2:	bf04      	itt	eq
 8007da4:	091b      	lsreq	r3, r3, #4
 8007da6:	3004      	addeq	r0, #4
 8007da8:	0799      	lsls	r1, r3, #30
 8007daa:	bf04      	itt	eq
 8007dac:	089b      	lsreq	r3, r3, #2
 8007dae:	3002      	addeq	r0, #2
 8007db0:	07d9      	lsls	r1, r3, #31
 8007db2:	d403      	bmi.n	8007dbc <__lo0bits+0x50>
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	f100 0001 	add.w	r0, r0, #1
 8007dba:	d003      	beq.n	8007dc4 <__lo0bits+0x58>
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	4770      	bx	lr
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4770      	bx	lr
 8007dc4:	2020      	movs	r0, #32
 8007dc6:	4770      	bx	lr

08007dc8 <__i2b>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	460c      	mov	r4, r1
 8007dcc:	2101      	movs	r1, #1
 8007dce:	f7ff ff01 	bl	8007bd4 <_Balloc>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	b928      	cbnz	r0, 8007de2 <__i2b+0x1a>
 8007dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dda:	4b04      	ldr	r3, [pc, #16]	; (8007dec <__i2b+0x24>)
 8007ddc:	4804      	ldr	r0, [pc, #16]	; (8007df0 <__i2b+0x28>)
 8007dde:	f000 fc9b 	bl	8008718 <__assert_func>
 8007de2:	2301      	movs	r3, #1
 8007de4:	6144      	str	r4, [r0, #20]
 8007de6:	6103      	str	r3, [r0, #16]
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	bf00      	nop
 8007dec:	0800968b 	.word	0x0800968b
 8007df0:	0800969c 	.word	0x0800969c

08007df4 <__multiply>:
 8007df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4614      	mov	r4, r2
 8007dfa:	690a      	ldr	r2, [r1, #16]
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	460d      	mov	r5, r1
 8007e00:	429a      	cmp	r2, r3
 8007e02:	bfbe      	ittt	lt
 8007e04:	460b      	movlt	r3, r1
 8007e06:	4625      	movlt	r5, r4
 8007e08:	461c      	movlt	r4, r3
 8007e0a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e12:	68ab      	ldr	r3, [r5, #8]
 8007e14:	6869      	ldr	r1, [r5, #4]
 8007e16:	eb0a 0709 	add.w	r7, sl, r9
 8007e1a:	42bb      	cmp	r3, r7
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	bfb8      	it	lt
 8007e20:	3101      	addlt	r1, #1
 8007e22:	f7ff fed7 	bl	8007bd4 <_Balloc>
 8007e26:	b930      	cbnz	r0, 8007e36 <__multiply+0x42>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	f240 115d 	movw	r1, #349	; 0x15d
 8007e2e:	4b41      	ldr	r3, [pc, #260]	; (8007f34 <__multiply+0x140>)
 8007e30:	4841      	ldr	r0, [pc, #260]	; (8007f38 <__multiply+0x144>)
 8007e32:	f000 fc71 	bl	8008718 <__assert_func>
 8007e36:	f100 0614 	add.w	r6, r0, #20
 8007e3a:	4633      	mov	r3, r6
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e42:	4543      	cmp	r3, r8
 8007e44:	d31e      	bcc.n	8007e84 <__multiply+0x90>
 8007e46:	f105 0c14 	add.w	ip, r5, #20
 8007e4a:	f104 0314 	add.w	r3, r4, #20
 8007e4e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e52:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e56:	9202      	str	r2, [sp, #8]
 8007e58:	ebac 0205 	sub.w	r2, ip, r5
 8007e5c:	3a15      	subs	r2, #21
 8007e5e:	f022 0203 	bic.w	r2, r2, #3
 8007e62:	3204      	adds	r2, #4
 8007e64:	f105 0115 	add.w	r1, r5, #21
 8007e68:	458c      	cmp	ip, r1
 8007e6a:	bf38      	it	cc
 8007e6c:	2204      	movcc	r2, #4
 8007e6e:	9201      	str	r2, [sp, #4]
 8007e70:	9a02      	ldr	r2, [sp, #8]
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d808      	bhi.n	8007e8a <__multiply+0x96>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	dc55      	bgt.n	8007f28 <__multiply+0x134>
 8007e7c:	6107      	str	r7, [r0, #16]
 8007e7e:	b005      	add	sp, #20
 8007e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e84:	f843 2b04 	str.w	r2, [r3], #4
 8007e88:	e7db      	b.n	8007e42 <__multiply+0x4e>
 8007e8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e8e:	f1ba 0f00 	cmp.w	sl, #0
 8007e92:	d020      	beq.n	8007ed6 <__multiply+0xe2>
 8007e94:	46b1      	mov	r9, r6
 8007e96:	2200      	movs	r2, #0
 8007e98:	f105 0e14 	add.w	lr, r5, #20
 8007e9c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ea0:	f8d9 b000 	ldr.w	fp, [r9]
 8007ea4:	b2a1      	uxth	r1, r4
 8007ea6:	fa1f fb8b 	uxth.w	fp, fp
 8007eaa:	fb0a b101 	mla	r1, sl, r1, fp
 8007eae:	4411      	add	r1, r2
 8007eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8007eb4:	0c24      	lsrs	r4, r4, #16
 8007eb6:	0c12      	lsrs	r2, r2, #16
 8007eb8:	fb0a 2404 	mla	r4, sl, r4, r2
 8007ebc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ec0:	b289      	uxth	r1, r1
 8007ec2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ec6:	45f4      	cmp	ip, lr
 8007ec8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ecc:	f849 1b04 	str.w	r1, [r9], #4
 8007ed0:	d8e4      	bhi.n	8007e9c <__multiply+0xa8>
 8007ed2:	9901      	ldr	r1, [sp, #4]
 8007ed4:	5072      	str	r2, [r6, r1]
 8007ed6:	9a03      	ldr	r2, [sp, #12]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d01f      	beq.n	8007f24 <__multiply+0x130>
 8007ee4:	46b6      	mov	lr, r6
 8007ee6:	f04f 0a00 	mov.w	sl, #0
 8007eea:	6834      	ldr	r4, [r6, #0]
 8007eec:	f105 0114 	add.w	r1, r5, #20
 8007ef0:	880a      	ldrh	r2, [r1, #0]
 8007ef2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ef6:	b2a4      	uxth	r4, r4
 8007ef8:	fb09 b202 	mla	r2, r9, r2, fp
 8007efc:	4492      	add	sl, r2
 8007efe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007f02:	f84e 4b04 	str.w	r4, [lr], #4
 8007f06:	f851 4b04 	ldr.w	r4, [r1], #4
 8007f0a:	f8be 2000 	ldrh.w	r2, [lr]
 8007f0e:	0c24      	lsrs	r4, r4, #16
 8007f10:	fb09 2404 	mla	r4, r9, r4, r2
 8007f14:	458c      	cmp	ip, r1
 8007f16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f1e:	d8e7      	bhi.n	8007ef0 <__multiply+0xfc>
 8007f20:	9a01      	ldr	r2, [sp, #4]
 8007f22:	50b4      	str	r4, [r6, r2]
 8007f24:	3604      	adds	r6, #4
 8007f26:	e7a3      	b.n	8007e70 <__multiply+0x7c>
 8007f28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1a5      	bne.n	8007e7c <__multiply+0x88>
 8007f30:	3f01      	subs	r7, #1
 8007f32:	e7a1      	b.n	8007e78 <__multiply+0x84>
 8007f34:	0800968b 	.word	0x0800968b
 8007f38:	0800969c 	.word	0x0800969c

08007f3c <__pow5mult>:
 8007f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	4615      	mov	r5, r2
 8007f42:	f012 0203 	ands.w	r2, r2, #3
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	d007      	beq.n	8007f5c <__pow5mult+0x20>
 8007f4c:	4c25      	ldr	r4, [pc, #148]	; (8007fe4 <__pow5mult+0xa8>)
 8007f4e:	3a01      	subs	r2, #1
 8007f50:	2300      	movs	r3, #0
 8007f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f56:	f7ff fe9f 	bl	8007c98 <__multadd>
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	10ad      	asrs	r5, r5, #2
 8007f5e:	d03d      	beq.n	8007fdc <__pow5mult+0xa0>
 8007f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f62:	b97c      	cbnz	r4, 8007f84 <__pow5mult+0x48>
 8007f64:	2010      	movs	r0, #16
 8007f66:	f7ff fe11 	bl	8007b8c <malloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f6e:	b928      	cbnz	r0, 8007f7c <__pow5mult+0x40>
 8007f70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <__pow5mult+0xac>)
 8007f76:	481d      	ldr	r0, [pc, #116]	; (8007fec <__pow5mult+0xb0>)
 8007f78:	f000 fbce 	bl	8008718 <__assert_func>
 8007f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f80:	6004      	str	r4, [r0, #0]
 8007f82:	60c4      	str	r4, [r0, #12]
 8007f84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f8c:	b94c      	cbnz	r4, 8007fa2 <__pow5mult+0x66>
 8007f8e:	f240 2171 	movw	r1, #625	; 0x271
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7ff ff18 	bl	8007dc8 <__i2b>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	07eb      	lsls	r3, r5, #31
 8007fa8:	d50a      	bpl.n	8007fc0 <__pow5mult+0x84>
 8007faa:	4639      	mov	r1, r7
 8007fac:	4622      	mov	r2, r4
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ff20 	bl	8007df4 <__multiply>
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff fe4b 	bl	8007c54 <_Bfree>
 8007fbe:	4647      	mov	r7, r8
 8007fc0:	106d      	asrs	r5, r5, #1
 8007fc2:	d00b      	beq.n	8007fdc <__pow5mult+0xa0>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	b938      	cbnz	r0, 8007fd8 <__pow5mult+0x9c>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ff11 	bl	8007df4 <__multiply>
 8007fd2:	6020      	str	r0, [r4, #0]
 8007fd4:	f8c0 9000 	str.w	r9, [r0]
 8007fd8:	4604      	mov	r4, r0
 8007fda:	e7e4      	b.n	8007fa6 <__pow5mult+0x6a>
 8007fdc:	4638      	mov	r0, r7
 8007fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	bf00      	nop
 8007fe4:	080097f0 	.word	0x080097f0
 8007fe8:	08009615 	.word	0x08009615
 8007fec:	0800969c 	.word	0x0800969c

08007ff0 <__lshift>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	4691      	mov	r9, r2
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	6849      	ldr	r1, [r1, #4]
 8007ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008008:	f108 0601 	add.w	r6, r8, #1
 800800c:	42b3      	cmp	r3, r6
 800800e:	db0b      	blt.n	8008028 <__lshift+0x38>
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff fddf 	bl	8007bd4 <_Balloc>
 8008016:	4605      	mov	r5, r0
 8008018:	b948      	cbnz	r0, 800802e <__lshift+0x3e>
 800801a:	4602      	mov	r2, r0
 800801c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008020:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <__lshift+0xd0>)
 8008022:	4828      	ldr	r0, [pc, #160]	; (80080c4 <__lshift+0xd4>)
 8008024:	f000 fb78 	bl	8008718 <__assert_func>
 8008028:	3101      	adds	r1, #1
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	e7ee      	b.n	800800c <__lshift+0x1c>
 800802e:	2300      	movs	r3, #0
 8008030:	f100 0114 	add.w	r1, r0, #20
 8008034:	f100 0210 	add.w	r2, r0, #16
 8008038:	4618      	mov	r0, r3
 800803a:	4553      	cmp	r3, sl
 800803c:	db33      	blt.n	80080a6 <__lshift+0xb6>
 800803e:	6920      	ldr	r0, [r4, #16]
 8008040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008044:	f104 0314 	add.w	r3, r4, #20
 8008048:	f019 091f 	ands.w	r9, r9, #31
 800804c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008054:	d02b      	beq.n	80080ae <__lshift+0xbe>
 8008056:	468a      	mov	sl, r1
 8008058:	2200      	movs	r2, #0
 800805a:	f1c9 0e20 	rsb	lr, r9, #32
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	fa00 f009 	lsl.w	r0, r0, r9
 8008064:	4302      	orrs	r2, r0
 8008066:	f84a 2b04 	str.w	r2, [sl], #4
 800806a:	f853 2b04 	ldr.w	r2, [r3], #4
 800806e:	459c      	cmp	ip, r3
 8008070:	fa22 f20e 	lsr.w	r2, r2, lr
 8008074:	d8f3      	bhi.n	800805e <__lshift+0x6e>
 8008076:	ebac 0304 	sub.w	r3, ip, r4
 800807a:	3b15      	subs	r3, #21
 800807c:	f023 0303 	bic.w	r3, r3, #3
 8008080:	3304      	adds	r3, #4
 8008082:	f104 0015 	add.w	r0, r4, #21
 8008086:	4584      	cmp	ip, r0
 8008088:	bf38      	it	cc
 800808a:	2304      	movcc	r3, #4
 800808c:	50ca      	str	r2, [r1, r3]
 800808e:	b10a      	cbz	r2, 8008094 <__lshift+0xa4>
 8008090:	f108 0602 	add.w	r6, r8, #2
 8008094:	3e01      	subs	r6, #1
 8008096:	4638      	mov	r0, r7
 8008098:	4621      	mov	r1, r4
 800809a:	612e      	str	r6, [r5, #16]
 800809c:	f7ff fdda 	bl	8007c54 <_Bfree>
 80080a0:	4628      	mov	r0, r5
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080aa:	3301      	adds	r3, #1
 80080ac:	e7c5      	b.n	800803a <__lshift+0x4a>
 80080ae:	3904      	subs	r1, #4
 80080b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b4:	459c      	cmp	ip, r3
 80080b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80080ba:	d8f9      	bhi.n	80080b0 <__lshift+0xc0>
 80080bc:	e7ea      	b.n	8008094 <__lshift+0xa4>
 80080be:	bf00      	nop
 80080c0:	0800968b 	.word	0x0800968b
 80080c4:	0800969c 	.word	0x0800969c

080080c8 <__mcmp>:
 80080c8:	4603      	mov	r3, r0
 80080ca:	690a      	ldr	r2, [r1, #16]
 80080cc:	6900      	ldr	r0, [r0, #16]
 80080ce:	b530      	push	{r4, r5, lr}
 80080d0:	1a80      	subs	r0, r0, r2
 80080d2:	d10d      	bne.n	80080f0 <__mcmp+0x28>
 80080d4:	3314      	adds	r3, #20
 80080d6:	3114      	adds	r1, #20
 80080d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080e8:	4295      	cmp	r5, r2
 80080ea:	d002      	beq.n	80080f2 <__mcmp+0x2a>
 80080ec:	d304      	bcc.n	80080f8 <__mcmp+0x30>
 80080ee:	2001      	movs	r0, #1
 80080f0:	bd30      	pop	{r4, r5, pc}
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	d3f4      	bcc.n	80080e0 <__mcmp+0x18>
 80080f6:	e7fb      	b.n	80080f0 <__mcmp+0x28>
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e7f8      	b.n	80080f0 <__mcmp+0x28>
	...

08008100 <__mdiff>:
 8008100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	460c      	mov	r4, r1
 8008106:	4606      	mov	r6, r0
 8008108:	4611      	mov	r1, r2
 800810a:	4620      	mov	r0, r4
 800810c:	4692      	mov	sl, r2
 800810e:	f7ff ffdb 	bl	80080c8 <__mcmp>
 8008112:	1e05      	subs	r5, r0, #0
 8008114:	d111      	bne.n	800813a <__mdiff+0x3a>
 8008116:	4629      	mov	r1, r5
 8008118:	4630      	mov	r0, r6
 800811a:	f7ff fd5b 	bl	8007bd4 <_Balloc>
 800811e:	4602      	mov	r2, r0
 8008120:	b928      	cbnz	r0, 800812e <__mdiff+0x2e>
 8008122:	f240 2132 	movw	r1, #562	; 0x232
 8008126:	4b3c      	ldr	r3, [pc, #240]	; (8008218 <__mdiff+0x118>)
 8008128:	483c      	ldr	r0, [pc, #240]	; (800821c <__mdiff+0x11c>)
 800812a:	f000 faf5 	bl	8008718 <__assert_func>
 800812e:	2301      	movs	r3, #1
 8008130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008134:	4610      	mov	r0, r2
 8008136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	bfa4      	itt	ge
 800813c:	4653      	movge	r3, sl
 800813e:	46a2      	movge	sl, r4
 8008140:	4630      	mov	r0, r6
 8008142:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008146:	bfa6      	itte	ge
 8008148:	461c      	movge	r4, r3
 800814a:	2500      	movge	r5, #0
 800814c:	2501      	movlt	r5, #1
 800814e:	f7ff fd41 	bl	8007bd4 <_Balloc>
 8008152:	4602      	mov	r2, r0
 8008154:	b918      	cbnz	r0, 800815e <__mdiff+0x5e>
 8008156:	f44f 7110 	mov.w	r1, #576	; 0x240
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <__mdiff+0x118>)
 800815c:	e7e4      	b.n	8008128 <__mdiff+0x28>
 800815e:	f100 0814 	add.w	r8, r0, #20
 8008162:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008166:	60c5      	str	r5, [r0, #12]
 8008168:	f04f 0c00 	mov.w	ip, #0
 800816c:	f10a 0514 	add.w	r5, sl, #20
 8008170:	f10a 0010 	add.w	r0, sl, #16
 8008174:	46c2      	mov	sl, r8
 8008176:	6926      	ldr	r6, [r4, #16]
 8008178:	f104 0914 	add.w	r9, r4, #20
 800817c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008180:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008184:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008188:	f859 3b04 	ldr.w	r3, [r9], #4
 800818c:	fa1f f18b 	uxth.w	r1, fp
 8008190:	4461      	add	r1, ip
 8008192:	fa1f fc83 	uxth.w	ip, r3
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	eba1 010c 	sub.w	r1, r1, ip
 800819c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80081a4:	b289      	uxth	r1, r1
 80081a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80081aa:	454e      	cmp	r6, r9
 80081ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80081b0:	f84a 3b04 	str.w	r3, [sl], #4
 80081b4:	d8e6      	bhi.n	8008184 <__mdiff+0x84>
 80081b6:	1b33      	subs	r3, r6, r4
 80081b8:	3b15      	subs	r3, #21
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	3415      	adds	r4, #21
 80081c0:	3304      	adds	r3, #4
 80081c2:	42a6      	cmp	r6, r4
 80081c4:	bf38      	it	cc
 80081c6:	2304      	movcc	r3, #4
 80081c8:	441d      	add	r5, r3
 80081ca:	4443      	add	r3, r8
 80081cc:	461e      	mov	r6, r3
 80081ce:	462c      	mov	r4, r5
 80081d0:	4574      	cmp	r4, lr
 80081d2:	d30e      	bcc.n	80081f2 <__mdiff+0xf2>
 80081d4:	f10e 0103 	add.w	r1, lr, #3
 80081d8:	1b49      	subs	r1, r1, r5
 80081da:	f021 0103 	bic.w	r1, r1, #3
 80081de:	3d03      	subs	r5, #3
 80081e0:	45ae      	cmp	lr, r5
 80081e2:	bf38      	it	cc
 80081e4:	2100      	movcc	r1, #0
 80081e6:	4419      	add	r1, r3
 80081e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80081ec:	b18b      	cbz	r3, 8008212 <__mdiff+0x112>
 80081ee:	6117      	str	r7, [r2, #16]
 80081f0:	e7a0      	b.n	8008134 <__mdiff+0x34>
 80081f2:	f854 8b04 	ldr.w	r8, [r4], #4
 80081f6:	fa1f f188 	uxth.w	r1, r8
 80081fa:	4461      	add	r1, ip
 80081fc:	1408      	asrs	r0, r1, #16
 80081fe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008202:	b289      	uxth	r1, r1
 8008204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008208:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800820c:	f846 1b04 	str.w	r1, [r6], #4
 8008210:	e7de      	b.n	80081d0 <__mdiff+0xd0>
 8008212:	3f01      	subs	r7, #1
 8008214:	e7e8      	b.n	80081e8 <__mdiff+0xe8>
 8008216:	bf00      	nop
 8008218:	0800968b 	.word	0x0800968b
 800821c:	0800969c 	.word	0x0800969c

08008220 <__d2b>:
 8008220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008224:	2101      	movs	r1, #1
 8008226:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800822a:	4690      	mov	r8, r2
 800822c:	461d      	mov	r5, r3
 800822e:	f7ff fcd1 	bl	8007bd4 <_Balloc>
 8008232:	4604      	mov	r4, r0
 8008234:	b930      	cbnz	r0, 8008244 <__d2b+0x24>
 8008236:	4602      	mov	r2, r0
 8008238:	f240 310a 	movw	r1, #778	; 0x30a
 800823c:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <__d2b+0xb0>)
 800823e:	4825      	ldr	r0, [pc, #148]	; (80082d4 <__d2b+0xb4>)
 8008240:	f000 fa6a 	bl	8008718 <__assert_func>
 8008244:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008248:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800824c:	bb2d      	cbnz	r5, 800829a <__d2b+0x7a>
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	f1b8 0300 	subs.w	r3, r8, #0
 8008254:	d026      	beq.n	80082a4 <__d2b+0x84>
 8008256:	4668      	mov	r0, sp
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	f7ff fd87 	bl	8007d6c <__lo0bits>
 800825e:	9900      	ldr	r1, [sp, #0]
 8008260:	b1f0      	cbz	r0, 80082a0 <__d2b+0x80>
 8008262:	9a01      	ldr	r2, [sp, #4]
 8008264:	f1c0 0320 	rsb	r3, r0, #32
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	430b      	orrs	r3, r1
 800826e:	40c2      	lsrs	r2, r0
 8008270:	6163      	str	r3, [r4, #20]
 8008272:	9201      	str	r2, [sp, #4]
 8008274:	9b01      	ldr	r3, [sp, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2102      	movne	r1, #2
 800827c:	2101      	moveq	r1, #1
 800827e:	61a3      	str	r3, [r4, #24]
 8008280:	6121      	str	r1, [r4, #16]
 8008282:	b1c5      	cbz	r5, 80082b6 <__d2b+0x96>
 8008284:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008288:	4405      	add	r5, r0
 800828a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800828e:	603d      	str	r5, [r7, #0]
 8008290:	6030      	str	r0, [r6, #0]
 8008292:	4620      	mov	r0, r4
 8008294:	b002      	add	sp, #8
 8008296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800829e:	e7d6      	b.n	800824e <__d2b+0x2e>
 80082a0:	6161      	str	r1, [r4, #20]
 80082a2:	e7e7      	b.n	8008274 <__d2b+0x54>
 80082a4:	a801      	add	r0, sp, #4
 80082a6:	f7ff fd61 	bl	8007d6c <__lo0bits>
 80082aa:	2101      	movs	r1, #1
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	6121      	str	r1, [r4, #16]
 80082b0:	6163      	str	r3, [r4, #20]
 80082b2:	3020      	adds	r0, #32
 80082b4:	e7e5      	b.n	8008282 <__d2b+0x62>
 80082b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80082ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082be:	6038      	str	r0, [r7, #0]
 80082c0:	6918      	ldr	r0, [r3, #16]
 80082c2:	f7ff fd33 	bl	8007d2c <__hi0bits>
 80082c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80082ca:	6031      	str	r1, [r6, #0]
 80082cc:	e7e1      	b.n	8008292 <__d2b+0x72>
 80082ce:	bf00      	nop
 80082d0:	0800968b 	.word	0x0800968b
 80082d4:	0800969c 	.word	0x0800969c

080082d8 <_calloc_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	fb02 f501 	mul.w	r5, r2, r1
 80082de:	4629      	mov	r1, r5
 80082e0:	f000 f854 	bl	800838c <_malloc_r>
 80082e4:	4604      	mov	r4, r0
 80082e6:	b118      	cbz	r0, 80082f0 <_calloc_r+0x18>
 80082e8:	462a      	mov	r2, r5
 80082ea:	2100      	movs	r1, #0
 80082ec:	f7fe f944 	bl	8006578 <memset>
 80082f0:	4620      	mov	r0, r4
 80082f2:	bd38      	pop	{r3, r4, r5, pc}

080082f4 <_free_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4605      	mov	r5, r0
 80082f8:	2900      	cmp	r1, #0
 80082fa:	d043      	beq.n	8008384 <_free_r+0x90>
 80082fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008300:	1f0c      	subs	r4, r1, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfb8      	it	lt
 8008306:	18e4      	addlt	r4, r4, r3
 8008308:	f000 fa62 	bl	80087d0 <__malloc_lock>
 800830c:	4a1e      	ldr	r2, [pc, #120]	; (8008388 <_free_r+0x94>)
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	4610      	mov	r0, r2
 8008312:	b933      	cbnz	r3, 8008322 <_free_r+0x2e>
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	6014      	str	r4, [r2, #0]
 8008318:	4628      	mov	r0, r5
 800831a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800831e:	f000 ba5d 	b.w	80087dc <__malloc_unlock>
 8008322:	42a3      	cmp	r3, r4
 8008324:	d90a      	bls.n	800833c <_free_r+0x48>
 8008326:	6821      	ldr	r1, [r4, #0]
 8008328:	1862      	adds	r2, r4, r1
 800832a:	4293      	cmp	r3, r2
 800832c:	bf01      	itttt	eq
 800832e:	681a      	ldreq	r2, [r3, #0]
 8008330:	685b      	ldreq	r3, [r3, #4]
 8008332:	1852      	addeq	r2, r2, r1
 8008334:	6022      	streq	r2, [r4, #0]
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	6004      	str	r4, [r0, #0]
 800833a:	e7ed      	b.n	8008318 <_free_r+0x24>
 800833c:	461a      	mov	r2, r3
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	b10b      	cbz	r3, 8008346 <_free_r+0x52>
 8008342:	42a3      	cmp	r3, r4
 8008344:	d9fa      	bls.n	800833c <_free_r+0x48>
 8008346:	6811      	ldr	r1, [r2, #0]
 8008348:	1850      	adds	r0, r2, r1
 800834a:	42a0      	cmp	r0, r4
 800834c:	d10b      	bne.n	8008366 <_free_r+0x72>
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	4401      	add	r1, r0
 8008352:	1850      	adds	r0, r2, r1
 8008354:	4283      	cmp	r3, r0
 8008356:	6011      	str	r1, [r2, #0]
 8008358:	d1de      	bne.n	8008318 <_free_r+0x24>
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4401      	add	r1, r0
 8008360:	6011      	str	r1, [r2, #0]
 8008362:	6053      	str	r3, [r2, #4]
 8008364:	e7d8      	b.n	8008318 <_free_r+0x24>
 8008366:	d902      	bls.n	800836e <_free_r+0x7a>
 8008368:	230c      	movs	r3, #12
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	e7d4      	b.n	8008318 <_free_r+0x24>
 800836e:	6820      	ldr	r0, [r4, #0]
 8008370:	1821      	adds	r1, r4, r0
 8008372:	428b      	cmp	r3, r1
 8008374:	bf01      	itttt	eq
 8008376:	6819      	ldreq	r1, [r3, #0]
 8008378:	685b      	ldreq	r3, [r3, #4]
 800837a:	1809      	addeq	r1, r1, r0
 800837c:	6021      	streq	r1, [r4, #0]
 800837e:	6063      	str	r3, [r4, #4]
 8008380:	6054      	str	r4, [r2, #4]
 8008382:	e7c9      	b.n	8008318 <_free_r+0x24>
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	20000e10 	.word	0x20000e10

0800838c <_malloc_r>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	1ccd      	adds	r5, r1, #3
 8008390:	f025 0503 	bic.w	r5, r5, #3
 8008394:	3508      	adds	r5, #8
 8008396:	2d0c      	cmp	r5, #12
 8008398:	bf38      	it	cc
 800839a:	250c      	movcc	r5, #12
 800839c:	2d00      	cmp	r5, #0
 800839e:	4606      	mov	r6, r0
 80083a0:	db01      	blt.n	80083a6 <_malloc_r+0x1a>
 80083a2:	42a9      	cmp	r1, r5
 80083a4:	d903      	bls.n	80083ae <_malloc_r+0x22>
 80083a6:	230c      	movs	r3, #12
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	2000      	movs	r0, #0
 80083ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ae:	f000 fa0f 	bl	80087d0 <__malloc_lock>
 80083b2:	4921      	ldr	r1, [pc, #132]	; (8008438 <_malloc_r+0xac>)
 80083b4:	680a      	ldr	r2, [r1, #0]
 80083b6:	4614      	mov	r4, r2
 80083b8:	b99c      	cbnz	r4, 80083e2 <_malloc_r+0x56>
 80083ba:	4f20      	ldr	r7, [pc, #128]	; (800843c <_malloc_r+0xb0>)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	b923      	cbnz	r3, 80083ca <_malloc_r+0x3e>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4630      	mov	r0, r6
 80083c4:	f000 f998 	bl	80086f8 <_sbrk_r>
 80083c8:	6038      	str	r0, [r7, #0]
 80083ca:	4629      	mov	r1, r5
 80083cc:	4630      	mov	r0, r6
 80083ce:	f000 f993 	bl	80086f8 <_sbrk_r>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d123      	bne.n	800841e <_malloc_r+0x92>
 80083d6:	230c      	movs	r3, #12
 80083d8:	4630      	mov	r0, r6
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	f000 f9fe 	bl	80087dc <__malloc_unlock>
 80083e0:	e7e3      	b.n	80083aa <_malloc_r+0x1e>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	1b5b      	subs	r3, r3, r5
 80083e6:	d417      	bmi.n	8008418 <_malloc_r+0x8c>
 80083e8:	2b0b      	cmp	r3, #11
 80083ea:	d903      	bls.n	80083f4 <_malloc_r+0x68>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	441c      	add	r4, r3
 80083f0:	6025      	str	r5, [r4, #0]
 80083f2:	e004      	b.n	80083fe <_malloc_r+0x72>
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	42a2      	cmp	r2, r4
 80083f8:	bf0c      	ite	eq
 80083fa:	600b      	streq	r3, [r1, #0]
 80083fc:	6053      	strne	r3, [r2, #4]
 80083fe:	4630      	mov	r0, r6
 8008400:	f000 f9ec 	bl	80087dc <__malloc_unlock>
 8008404:	f104 000b 	add.w	r0, r4, #11
 8008408:	1d23      	adds	r3, r4, #4
 800840a:	f020 0007 	bic.w	r0, r0, #7
 800840e:	1ac2      	subs	r2, r0, r3
 8008410:	d0cc      	beq.n	80083ac <_malloc_r+0x20>
 8008412:	1a1b      	subs	r3, r3, r0
 8008414:	50a3      	str	r3, [r4, r2]
 8008416:	e7c9      	b.n	80083ac <_malloc_r+0x20>
 8008418:	4622      	mov	r2, r4
 800841a:	6864      	ldr	r4, [r4, #4]
 800841c:	e7cc      	b.n	80083b8 <_malloc_r+0x2c>
 800841e:	1cc4      	adds	r4, r0, #3
 8008420:	f024 0403 	bic.w	r4, r4, #3
 8008424:	42a0      	cmp	r0, r4
 8008426:	d0e3      	beq.n	80083f0 <_malloc_r+0x64>
 8008428:	1a21      	subs	r1, r4, r0
 800842a:	4630      	mov	r0, r6
 800842c:	f000 f964 	bl	80086f8 <_sbrk_r>
 8008430:	3001      	adds	r0, #1
 8008432:	d1dd      	bne.n	80083f0 <_malloc_r+0x64>
 8008434:	e7cf      	b.n	80083d6 <_malloc_r+0x4a>
 8008436:	bf00      	nop
 8008438:	20000e10 	.word	0x20000e10
 800843c:	20000e14 	.word	0x20000e14

08008440 <__ssputs_r>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	688e      	ldr	r6, [r1, #8]
 8008446:	4682      	mov	sl, r0
 8008448:	429e      	cmp	r6, r3
 800844a:	460c      	mov	r4, r1
 800844c:	4690      	mov	r8, r2
 800844e:	461f      	mov	r7, r3
 8008450:	d838      	bhi.n	80084c4 <__ssputs_r+0x84>
 8008452:	898a      	ldrh	r2, [r1, #12]
 8008454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008458:	d032      	beq.n	80084c0 <__ssputs_r+0x80>
 800845a:	6825      	ldr	r5, [r4, #0]
 800845c:	6909      	ldr	r1, [r1, #16]
 800845e:	3301      	adds	r3, #1
 8008460:	eba5 0901 	sub.w	r9, r5, r1
 8008464:	6965      	ldr	r5, [r4, #20]
 8008466:	444b      	add	r3, r9
 8008468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800846c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008470:	106d      	asrs	r5, r5, #1
 8008472:	429d      	cmp	r5, r3
 8008474:	bf38      	it	cc
 8008476:	461d      	movcc	r5, r3
 8008478:	0553      	lsls	r3, r2, #21
 800847a:	d531      	bpl.n	80084e0 <__ssputs_r+0xa0>
 800847c:	4629      	mov	r1, r5
 800847e:	f7ff ff85 	bl	800838c <_malloc_r>
 8008482:	4606      	mov	r6, r0
 8008484:	b950      	cbnz	r0, 800849c <__ssputs_r+0x5c>
 8008486:	230c      	movs	r3, #12
 8008488:	f04f 30ff 	mov.w	r0, #4294967295
 800848c:	f8ca 3000 	str.w	r3, [sl]
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	464a      	mov	r2, r9
 800849e:	6921      	ldr	r1, [r4, #16]
 80084a0:	f7ff fb8a 	bl	8007bb8 <memcpy>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	6126      	str	r6, [r4, #16]
 80084b2:	444e      	add	r6, r9
 80084b4:	6026      	str	r6, [r4, #0]
 80084b6:	463e      	mov	r6, r7
 80084b8:	6165      	str	r5, [r4, #20]
 80084ba:	eba5 0509 	sub.w	r5, r5, r9
 80084be:	60a5      	str	r5, [r4, #8]
 80084c0:	42be      	cmp	r6, r7
 80084c2:	d900      	bls.n	80084c6 <__ssputs_r+0x86>
 80084c4:	463e      	mov	r6, r7
 80084c6:	4632      	mov	r2, r6
 80084c8:	4641      	mov	r1, r8
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	f000 f966 	bl	800879c <memmove>
 80084d0:	68a3      	ldr	r3, [r4, #8]
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	1b9b      	subs	r3, r3, r6
 80084d6:	4432      	add	r2, r6
 80084d8:	2000      	movs	r0, #0
 80084da:	60a3      	str	r3, [r4, #8]
 80084dc:	6022      	str	r2, [r4, #0]
 80084de:	e7db      	b.n	8008498 <__ssputs_r+0x58>
 80084e0:	462a      	mov	r2, r5
 80084e2:	f000 f981 	bl	80087e8 <_realloc_r>
 80084e6:	4606      	mov	r6, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d1e1      	bne.n	80084b0 <__ssputs_r+0x70>
 80084ec:	4650      	mov	r0, sl
 80084ee:	6921      	ldr	r1, [r4, #16]
 80084f0:	f7ff ff00 	bl	80082f4 <_free_r>
 80084f4:	e7c7      	b.n	8008486 <__ssputs_r+0x46>
	...

080084f8 <_svfiprintf_r>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4698      	mov	r8, r3
 80084fe:	898b      	ldrh	r3, [r1, #12]
 8008500:	4607      	mov	r7, r0
 8008502:	061b      	lsls	r3, r3, #24
 8008504:	460d      	mov	r5, r1
 8008506:	4614      	mov	r4, r2
 8008508:	b09d      	sub	sp, #116	; 0x74
 800850a:	d50e      	bpl.n	800852a <_svfiprintf_r+0x32>
 800850c:	690b      	ldr	r3, [r1, #16]
 800850e:	b963      	cbnz	r3, 800852a <_svfiprintf_r+0x32>
 8008510:	2140      	movs	r1, #64	; 0x40
 8008512:	f7ff ff3b 	bl	800838c <_malloc_r>
 8008516:	6028      	str	r0, [r5, #0]
 8008518:	6128      	str	r0, [r5, #16]
 800851a:	b920      	cbnz	r0, 8008526 <_svfiprintf_r+0x2e>
 800851c:	230c      	movs	r3, #12
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e0d1      	b.n	80086ca <_svfiprintf_r+0x1d2>
 8008526:	2340      	movs	r3, #64	; 0x40
 8008528:	616b      	str	r3, [r5, #20]
 800852a:	2300      	movs	r3, #0
 800852c:	9309      	str	r3, [sp, #36]	; 0x24
 800852e:	2320      	movs	r3, #32
 8008530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008534:	2330      	movs	r3, #48	; 0x30
 8008536:	f04f 0901 	mov.w	r9, #1
 800853a:	f8cd 800c 	str.w	r8, [sp, #12]
 800853e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086e4 <_svfiprintf_r+0x1ec>
 8008542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008546:	4623      	mov	r3, r4
 8008548:	469a      	mov	sl, r3
 800854a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800854e:	b10a      	cbz	r2, 8008554 <_svfiprintf_r+0x5c>
 8008550:	2a25      	cmp	r2, #37	; 0x25
 8008552:	d1f9      	bne.n	8008548 <_svfiprintf_r+0x50>
 8008554:	ebba 0b04 	subs.w	fp, sl, r4
 8008558:	d00b      	beq.n	8008572 <_svfiprintf_r+0x7a>
 800855a:	465b      	mov	r3, fp
 800855c:	4622      	mov	r2, r4
 800855e:	4629      	mov	r1, r5
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ff6d 	bl	8008440 <__ssputs_r>
 8008566:	3001      	adds	r0, #1
 8008568:	f000 80aa 	beq.w	80086c0 <_svfiprintf_r+0x1c8>
 800856c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856e:	445a      	add	r2, fp
 8008570:	9209      	str	r2, [sp, #36]	; 0x24
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80a2 	beq.w	80086c0 <_svfiprintf_r+0x1c8>
 800857c:	2300      	movs	r3, #0
 800857e:	f04f 32ff 	mov.w	r2, #4294967295
 8008582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008586:	f10a 0a01 	add.w	sl, sl, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	9307      	str	r3, [sp, #28]
 800858e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008592:	931a      	str	r3, [sp, #104]	; 0x68
 8008594:	4654      	mov	r4, sl
 8008596:	2205      	movs	r2, #5
 8008598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859c:	4851      	ldr	r0, [pc, #324]	; (80086e4 <_svfiprintf_r+0x1ec>)
 800859e:	f7ff fafd 	bl	8007b9c <memchr>
 80085a2:	9a04      	ldr	r2, [sp, #16]
 80085a4:	b9d8      	cbnz	r0, 80085de <_svfiprintf_r+0xe6>
 80085a6:	06d0      	lsls	r0, r2, #27
 80085a8:	bf44      	itt	mi
 80085aa:	2320      	movmi	r3, #32
 80085ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b0:	0711      	lsls	r1, r2, #28
 80085b2:	bf44      	itt	mi
 80085b4:	232b      	movmi	r3, #43	; 0x2b
 80085b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ba:	f89a 3000 	ldrb.w	r3, [sl]
 80085be:	2b2a      	cmp	r3, #42	; 0x2a
 80085c0:	d015      	beq.n	80085ee <_svfiprintf_r+0xf6>
 80085c2:	4654      	mov	r4, sl
 80085c4:	2000      	movs	r0, #0
 80085c6:	f04f 0c0a 	mov.w	ip, #10
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	4621      	mov	r1, r4
 80085ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d2:	3b30      	subs	r3, #48	; 0x30
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d94e      	bls.n	8008676 <_svfiprintf_r+0x17e>
 80085d8:	b1b0      	cbz	r0, 8008608 <_svfiprintf_r+0x110>
 80085da:	9207      	str	r2, [sp, #28]
 80085dc:	e014      	b.n	8008608 <_svfiprintf_r+0x110>
 80085de:	eba0 0308 	sub.w	r3, r0, r8
 80085e2:	fa09 f303 	lsl.w	r3, r9, r3
 80085e6:	4313      	orrs	r3, r2
 80085e8:	46a2      	mov	sl, r4
 80085ea:	9304      	str	r3, [sp, #16]
 80085ec:	e7d2      	b.n	8008594 <_svfiprintf_r+0x9c>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	1d19      	adds	r1, r3, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	9103      	str	r1, [sp, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfbb      	ittet	lt
 80085fa:	425b      	neglt	r3, r3
 80085fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008600:	9307      	strge	r3, [sp, #28]
 8008602:	9307      	strlt	r3, [sp, #28]
 8008604:	bfb8      	it	lt
 8008606:	9204      	strlt	r2, [sp, #16]
 8008608:	7823      	ldrb	r3, [r4, #0]
 800860a:	2b2e      	cmp	r3, #46	; 0x2e
 800860c:	d10c      	bne.n	8008628 <_svfiprintf_r+0x130>
 800860e:	7863      	ldrb	r3, [r4, #1]
 8008610:	2b2a      	cmp	r3, #42	; 0x2a
 8008612:	d135      	bne.n	8008680 <_svfiprintf_r+0x188>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	3402      	adds	r4, #2
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	9203      	str	r2, [sp, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	bfb8      	it	lt
 8008622:	f04f 33ff 	movlt.w	r3, #4294967295
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086f4 <_svfiprintf_r+0x1fc>
 800862c:	2203      	movs	r2, #3
 800862e:	4650      	mov	r0, sl
 8008630:	7821      	ldrb	r1, [r4, #0]
 8008632:	f7ff fab3 	bl	8007b9c <memchr>
 8008636:	b140      	cbz	r0, 800864a <_svfiprintf_r+0x152>
 8008638:	2340      	movs	r3, #64	; 0x40
 800863a:	eba0 000a 	sub.w	r0, r0, sl
 800863e:	fa03 f000 	lsl.w	r0, r3, r0
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	3401      	adds	r4, #1
 8008646:	4303      	orrs	r3, r0
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864e:	2206      	movs	r2, #6
 8008650:	4825      	ldr	r0, [pc, #148]	; (80086e8 <_svfiprintf_r+0x1f0>)
 8008652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008656:	f7ff faa1 	bl	8007b9c <memchr>
 800865a:	2800      	cmp	r0, #0
 800865c:	d038      	beq.n	80086d0 <_svfiprintf_r+0x1d8>
 800865e:	4b23      	ldr	r3, [pc, #140]	; (80086ec <_svfiprintf_r+0x1f4>)
 8008660:	bb1b      	cbnz	r3, 80086aa <_svfiprintf_r+0x1b2>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	3307      	adds	r3, #7
 8008666:	f023 0307 	bic.w	r3, r3, #7
 800866a:	3308      	adds	r3, #8
 800866c:	9303      	str	r3, [sp, #12]
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	4433      	add	r3, r6
 8008672:	9309      	str	r3, [sp, #36]	; 0x24
 8008674:	e767      	b.n	8008546 <_svfiprintf_r+0x4e>
 8008676:	460c      	mov	r4, r1
 8008678:	2001      	movs	r0, #1
 800867a:	fb0c 3202 	mla	r2, ip, r2, r3
 800867e:	e7a5      	b.n	80085cc <_svfiprintf_r+0xd4>
 8008680:	2300      	movs	r3, #0
 8008682:	f04f 0c0a 	mov.w	ip, #10
 8008686:	4619      	mov	r1, r3
 8008688:	3401      	adds	r4, #1
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	4620      	mov	r0, r4
 800868e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008692:	3a30      	subs	r2, #48	; 0x30
 8008694:	2a09      	cmp	r2, #9
 8008696:	d903      	bls.n	80086a0 <_svfiprintf_r+0x1a8>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0c5      	beq.n	8008628 <_svfiprintf_r+0x130>
 800869c:	9105      	str	r1, [sp, #20]
 800869e:	e7c3      	b.n	8008628 <_svfiprintf_r+0x130>
 80086a0:	4604      	mov	r4, r0
 80086a2:	2301      	movs	r3, #1
 80086a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a8:	e7f0      	b.n	800868c <_svfiprintf_r+0x194>
 80086aa:	ab03      	add	r3, sp, #12
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	462a      	mov	r2, r5
 80086b0:	4638      	mov	r0, r7
 80086b2:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <_svfiprintf_r+0x1f8>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	f7fe f805 	bl	80066c4 <_printf_float>
 80086ba:	1c42      	adds	r2, r0, #1
 80086bc:	4606      	mov	r6, r0
 80086be:	d1d6      	bne.n	800866e <_svfiprintf_r+0x176>
 80086c0:	89ab      	ldrh	r3, [r5, #12]
 80086c2:	065b      	lsls	r3, r3, #25
 80086c4:	f53f af2c 	bmi.w	8008520 <_svfiprintf_r+0x28>
 80086c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ca:	b01d      	add	sp, #116	; 0x74
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d0:	ab03      	add	r3, sp, #12
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	462a      	mov	r2, r5
 80086d6:	4638      	mov	r0, r7
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_svfiprintf_r+0x1f8>)
 80086da:	a904      	add	r1, sp, #16
 80086dc:	f7fe fa8e 	bl	8006bfc <_printf_i>
 80086e0:	e7eb      	b.n	80086ba <_svfiprintf_r+0x1c2>
 80086e2:	bf00      	nop
 80086e4:	080097fc 	.word	0x080097fc
 80086e8:	08009806 	.word	0x08009806
 80086ec:	080066c5 	.word	0x080066c5
 80086f0:	08008441 	.word	0x08008441
 80086f4:	08009802 	.word	0x08009802

080086f8 <_sbrk_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	2300      	movs	r3, #0
 80086fc:	4d05      	ldr	r5, [pc, #20]	; (8008714 <_sbrk_r+0x1c>)
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	602b      	str	r3, [r5, #0]
 8008704:	f7f9 feea 	bl	80024dc <_sbrk>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_sbrk_r+0x1a>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_sbrk_r+0x1a>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	20002668 	.word	0x20002668

08008718 <__assert_func>:
 8008718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800871a:	4614      	mov	r4, r2
 800871c:	461a      	mov	r2, r3
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <__assert_func+0x2c>)
 8008720:	4605      	mov	r5, r0
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68d8      	ldr	r0, [r3, #12]
 8008726:	b14c      	cbz	r4, 800873c <__assert_func+0x24>
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <__assert_func+0x30>)
 800872a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800872e:	9100      	str	r1, [sp, #0]
 8008730:	462b      	mov	r3, r5
 8008732:	4906      	ldr	r1, [pc, #24]	; (800874c <__assert_func+0x34>)
 8008734:	f000 f80e 	bl	8008754 <fiprintf>
 8008738:	f000 faa2 	bl	8008c80 <abort>
 800873c:	4b04      	ldr	r3, [pc, #16]	; (8008750 <__assert_func+0x38>)
 800873e:	461c      	mov	r4, r3
 8008740:	e7f3      	b.n	800872a <__assert_func+0x12>
 8008742:	bf00      	nop
 8008744:	20000014 	.word	0x20000014
 8008748:	0800980d 	.word	0x0800980d
 800874c:	0800981a 	.word	0x0800981a
 8008750:	08009848 	.word	0x08009848

08008754 <fiprintf>:
 8008754:	b40e      	push	{r1, r2, r3}
 8008756:	b503      	push	{r0, r1, lr}
 8008758:	4601      	mov	r1, r0
 800875a:	ab03      	add	r3, sp, #12
 800875c:	4805      	ldr	r0, [pc, #20]	; (8008774 <fiprintf+0x20>)
 800875e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008762:	6800      	ldr	r0, [r0, #0]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	f000 f88d 	bl	8008884 <_vfiprintf_r>
 800876a:	b002      	add	sp, #8
 800876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008770:	b003      	add	sp, #12
 8008772:	4770      	bx	lr
 8008774:	20000014 	.word	0x20000014

08008778 <__ascii_mbtowc>:
 8008778:	b082      	sub	sp, #8
 800877a:	b901      	cbnz	r1, 800877e <__ascii_mbtowc+0x6>
 800877c:	a901      	add	r1, sp, #4
 800877e:	b142      	cbz	r2, 8008792 <__ascii_mbtowc+0x1a>
 8008780:	b14b      	cbz	r3, 8008796 <__ascii_mbtowc+0x1e>
 8008782:	7813      	ldrb	r3, [r2, #0]
 8008784:	600b      	str	r3, [r1, #0]
 8008786:	7812      	ldrb	r2, [r2, #0]
 8008788:	1e10      	subs	r0, r2, #0
 800878a:	bf18      	it	ne
 800878c:	2001      	movne	r0, #1
 800878e:	b002      	add	sp, #8
 8008790:	4770      	bx	lr
 8008792:	4610      	mov	r0, r2
 8008794:	e7fb      	b.n	800878e <__ascii_mbtowc+0x16>
 8008796:	f06f 0001 	mvn.w	r0, #1
 800879a:	e7f8      	b.n	800878e <__ascii_mbtowc+0x16>

0800879c <memmove>:
 800879c:	4288      	cmp	r0, r1
 800879e:	b510      	push	{r4, lr}
 80087a0:	eb01 0402 	add.w	r4, r1, r2
 80087a4:	d902      	bls.n	80087ac <memmove+0x10>
 80087a6:	4284      	cmp	r4, r0
 80087a8:	4623      	mov	r3, r4
 80087aa:	d807      	bhi.n	80087bc <memmove+0x20>
 80087ac:	1e43      	subs	r3, r0, #1
 80087ae:	42a1      	cmp	r1, r4
 80087b0:	d008      	beq.n	80087c4 <memmove+0x28>
 80087b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ba:	e7f8      	b.n	80087ae <memmove+0x12>
 80087bc:	4601      	mov	r1, r0
 80087be:	4402      	add	r2, r0
 80087c0:	428a      	cmp	r2, r1
 80087c2:	d100      	bne.n	80087c6 <memmove+0x2a>
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087ce:	e7f7      	b.n	80087c0 <memmove+0x24>

080087d0 <__malloc_lock>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__malloc_lock+0x8>)
 80087d2:	f000 bc15 	b.w	8009000 <__retarget_lock_acquire_recursive>
 80087d6:	bf00      	nop
 80087d8:	20002670 	.word	0x20002670

080087dc <__malloc_unlock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__malloc_unlock+0x8>)
 80087de:	f000 bc10 	b.w	8009002 <__retarget_lock_release_recursive>
 80087e2:	bf00      	nop
 80087e4:	20002670 	.word	0x20002670

080087e8 <_realloc_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4607      	mov	r7, r0
 80087ec:	4614      	mov	r4, r2
 80087ee:	460e      	mov	r6, r1
 80087f0:	b921      	cbnz	r1, 80087fc <_realloc_r+0x14>
 80087f2:	4611      	mov	r1, r2
 80087f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087f8:	f7ff bdc8 	b.w	800838c <_malloc_r>
 80087fc:	b922      	cbnz	r2, 8008808 <_realloc_r+0x20>
 80087fe:	f7ff fd79 	bl	80082f4 <_free_r>
 8008802:	4625      	mov	r5, r4
 8008804:	4628      	mov	r0, r5
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	f000 fc60 	bl	80090cc <_malloc_usable_size_r>
 800880c:	42a0      	cmp	r0, r4
 800880e:	d20f      	bcs.n	8008830 <_realloc_r+0x48>
 8008810:	4621      	mov	r1, r4
 8008812:	4638      	mov	r0, r7
 8008814:	f7ff fdba 	bl	800838c <_malloc_r>
 8008818:	4605      	mov	r5, r0
 800881a:	2800      	cmp	r0, #0
 800881c:	d0f2      	beq.n	8008804 <_realloc_r+0x1c>
 800881e:	4631      	mov	r1, r6
 8008820:	4622      	mov	r2, r4
 8008822:	f7ff f9c9 	bl	8007bb8 <memcpy>
 8008826:	4631      	mov	r1, r6
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff fd63 	bl	80082f4 <_free_r>
 800882e:	e7e9      	b.n	8008804 <_realloc_r+0x1c>
 8008830:	4635      	mov	r5, r6
 8008832:	e7e7      	b.n	8008804 <_realloc_r+0x1c>

08008834 <__sfputc_r>:
 8008834:	6893      	ldr	r3, [r2, #8]
 8008836:	b410      	push	{r4}
 8008838:	3b01      	subs	r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	6093      	str	r3, [r2, #8]
 800883e:	da07      	bge.n	8008850 <__sfputc_r+0x1c>
 8008840:	6994      	ldr	r4, [r2, #24]
 8008842:	42a3      	cmp	r3, r4
 8008844:	db01      	blt.n	800884a <__sfputc_r+0x16>
 8008846:	290a      	cmp	r1, #10
 8008848:	d102      	bne.n	8008850 <__sfputc_r+0x1c>
 800884a:	bc10      	pop	{r4}
 800884c:	f000 b94a 	b.w	8008ae4 <__swbuf_r>
 8008850:	6813      	ldr	r3, [r2, #0]
 8008852:	1c58      	adds	r0, r3, #1
 8008854:	6010      	str	r0, [r2, #0]
 8008856:	7019      	strb	r1, [r3, #0]
 8008858:	4608      	mov	r0, r1
 800885a:	bc10      	pop	{r4}
 800885c:	4770      	bx	lr

0800885e <__sfputs_r>:
 800885e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008860:	4606      	mov	r6, r0
 8008862:	460f      	mov	r7, r1
 8008864:	4614      	mov	r4, r2
 8008866:	18d5      	adds	r5, r2, r3
 8008868:	42ac      	cmp	r4, r5
 800886a:	d101      	bne.n	8008870 <__sfputs_r+0x12>
 800886c:	2000      	movs	r0, #0
 800886e:	e007      	b.n	8008880 <__sfputs_r+0x22>
 8008870:	463a      	mov	r2, r7
 8008872:	4630      	mov	r0, r6
 8008874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008878:	f7ff ffdc 	bl	8008834 <__sfputc_r>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d1f3      	bne.n	8008868 <__sfputs_r+0xa>
 8008880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008884 <_vfiprintf_r>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	460d      	mov	r5, r1
 800888a:	4614      	mov	r4, r2
 800888c:	4698      	mov	r8, r3
 800888e:	4606      	mov	r6, r0
 8008890:	b09d      	sub	sp, #116	; 0x74
 8008892:	b118      	cbz	r0, 800889c <_vfiprintf_r+0x18>
 8008894:	6983      	ldr	r3, [r0, #24]
 8008896:	b90b      	cbnz	r3, 800889c <_vfiprintf_r+0x18>
 8008898:	f000 fb14 	bl	8008ec4 <__sinit>
 800889c:	4b89      	ldr	r3, [pc, #548]	; (8008ac4 <_vfiprintf_r+0x240>)
 800889e:	429d      	cmp	r5, r3
 80088a0:	d11b      	bne.n	80088da <_vfiprintf_r+0x56>
 80088a2:	6875      	ldr	r5, [r6, #4]
 80088a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a6:	07d9      	lsls	r1, r3, #31
 80088a8:	d405      	bmi.n	80088b6 <_vfiprintf_r+0x32>
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	059a      	lsls	r2, r3, #22
 80088ae:	d402      	bmi.n	80088b6 <_vfiprintf_r+0x32>
 80088b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088b2:	f000 fba5 	bl	8009000 <__retarget_lock_acquire_recursive>
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	071b      	lsls	r3, r3, #28
 80088ba:	d501      	bpl.n	80088c0 <_vfiprintf_r+0x3c>
 80088bc:	692b      	ldr	r3, [r5, #16]
 80088be:	b9eb      	cbnz	r3, 80088fc <_vfiprintf_r+0x78>
 80088c0:	4629      	mov	r1, r5
 80088c2:	4630      	mov	r0, r6
 80088c4:	f000 f96e 	bl	8008ba4 <__swsetup_r>
 80088c8:	b1c0      	cbz	r0, 80088fc <_vfiprintf_r+0x78>
 80088ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088cc:	07dc      	lsls	r4, r3, #31
 80088ce:	d50e      	bpl.n	80088ee <_vfiprintf_r+0x6a>
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	b01d      	add	sp, #116	; 0x74
 80088d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088da:	4b7b      	ldr	r3, [pc, #492]	; (8008ac8 <_vfiprintf_r+0x244>)
 80088dc:	429d      	cmp	r5, r3
 80088de:	d101      	bne.n	80088e4 <_vfiprintf_r+0x60>
 80088e0:	68b5      	ldr	r5, [r6, #8]
 80088e2:	e7df      	b.n	80088a4 <_vfiprintf_r+0x20>
 80088e4:	4b79      	ldr	r3, [pc, #484]	; (8008acc <_vfiprintf_r+0x248>)
 80088e6:	429d      	cmp	r5, r3
 80088e8:	bf08      	it	eq
 80088ea:	68f5      	ldreq	r5, [r6, #12]
 80088ec:	e7da      	b.n	80088a4 <_vfiprintf_r+0x20>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	0598      	lsls	r0, r3, #22
 80088f2:	d4ed      	bmi.n	80088d0 <_vfiprintf_r+0x4c>
 80088f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088f6:	f000 fb84 	bl	8009002 <__retarget_lock_release_recursive>
 80088fa:	e7e9      	b.n	80088d0 <_vfiprintf_r+0x4c>
 80088fc:	2300      	movs	r3, #0
 80088fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008900:	2320      	movs	r3, #32
 8008902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008906:	2330      	movs	r3, #48	; 0x30
 8008908:	f04f 0901 	mov.w	r9, #1
 800890c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008910:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ad0 <_vfiprintf_r+0x24c>
 8008914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008918:	4623      	mov	r3, r4
 800891a:	469a      	mov	sl, r3
 800891c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008920:	b10a      	cbz	r2, 8008926 <_vfiprintf_r+0xa2>
 8008922:	2a25      	cmp	r2, #37	; 0x25
 8008924:	d1f9      	bne.n	800891a <_vfiprintf_r+0x96>
 8008926:	ebba 0b04 	subs.w	fp, sl, r4
 800892a:	d00b      	beq.n	8008944 <_vfiprintf_r+0xc0>
 800892c:	465b      	mov	r3, fp
 800892e:	4622      	mov	r2, r4
 8008930:	4629      	mov	r1, r5
 8008932:	4630      	mov	r0, r6
 8008934:	f7ff ff93 	bl	800885e <__sfputs_r>
 8008938:	3001      	adds	r0, #1
 800893a:	f000 80aa 	beq.w	8008a92 <_vfiprintf_r+0x20e>
 800893e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008940:	445a      	add	r2, fp
 8008942:	9209      	str	r2, [sp, #36]	; 0x24
 8008944:	f89a 3000 	ldrb.w	r3, [sl]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 80a2 	beq.w	8008a92 <_vfiprintf_r+0x20e>
 800894e:	2300      	movs	r3, #0
 8008950:	f04f 32ff 	mov.w	r2, #4294967295
 8008954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008958:	f10a 0a01 	add.w	sl, sl, #1
 800895c:	9304      	str	r3, [sp, #16]
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008964:	931a      	str	r3, [sp, #104]	; 0x68
 8008966:	4654      	mov	r4, sl
 8008968:	2205      	movs	r2, #5
 800896a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896e:	4858      	ldr	r0, [pc, #352]	; (8008ad0 <_vfiprintf_r+0x24c>)
 8008970:	f7ff f914 	bl	8007b9c <memchr>
 8008974:	9a04      	ldr	r2, [sp, #16]
 8008976:	b9d8      	cbnz	r0, 80089b0 <_vfiprintf_r+0x12c>
 8008978:	06d1      	lsls	r1, r2, #27
 800897a:	bf44      	itt	mi
 800897c:	2320      	movmi	r3, #32
 800897e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008982:	0713      	lsls	r3, r2, #28
 8008984:	bf44      	itt	mi
 8008986:	232b      	movmi	r3, #43	; 0x2b
 8008988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800898c:	f89a 3000 	ldrb.w	r3, [sl]
 8008990:	2b2a      	cmp	r3, #42	; 0x2a
 8008992:	d015      	beq.n	80089c0 <_vfiprintf_r+0x13c>
 8008994:	4654      	mov	r4, sl
 8008996:	2000      	movs	r0, #0
 8008998:	f04f 0c0a 	mov.w	ip, #10
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4621      	mov	r1, r4
 80089a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089a4:	3b30      	subs	r3, #48	; 0x30
 80089a6:	2b09      	cmp	r3, #9
 80089a8:	d94e      	bls.n	8008a48 <_vfiprintf_r+0x1c4>
 80089aa:	b1b0      	cbz	r0, 80089da <_vfiprintf_r+0x156>
 80089ac:	9207      	str	r2, [sp, #28]
 80089ae:	e014      	b.n	80089da <_vfiprintf_r+0x156>
 80089b0:	eba0 0308 	sub.w	r3, r0, r8
 80089b4:	fa09 f303 	lsl.w	r3, r9, r3
 80089b8:	4313      	orrs	r3, r2
 80089ba:	46a2      	mov	sl, r4
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	e7d2      	b.n	8008966 <_vfiprintf_r+0xe2>
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	1d19      	adds	r1, r3, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	9103      	str	r1, [sp, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	bfbb      	ittet	lt
 80089cc:	425b      	neglt	r3, r3
 80089ce:	f042 0202 	orrlt.w	r2, r2, #2
 80089d2:	9307      	strge	r3, [sp, #28]
 80089d4:	9307      	strlt	r3, [sp, #28]
 80089d6:	bfb8      	it	lt
 80089d8:	9204      	strlt	r2, [sp, #16]
 80089da:	7823      	ldrb	r3, [r4, #0]
 80089dc:	2b2e      	cmp	r3, #46	; 0x2e
 80089de:	d10c      	bne.n	80089fa <_vfiprintf_r+0x176>
 80089e0:	7863      	ldrb	r3, [r4, #1]
 80089e2:	2b2a      	cmp	r3, #42	; 0x2a
 80089e4:	d135      	bne.n	8008a52 <_vfiprintf_r+0x1ce>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	3402      	adds	r4, #2
 80089ea:	1d1a      	adds	r2, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	9203      	str	r2, [sp, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bfb8      	it	lt
 80089f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f8:	9305      	str	r3, [sp, #20]
 80089fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ae0 <_vfiprintf_r+0x25c>
 80089fe:	2203      	movs	r2, #3
 8008a00:	4650      	mov	r0, sl
 8008a02:	7821      	ldrb	r1, [r4, #0]
 8008a04:	f7ff f8ca 	bl	8007b9c <memchr>
 8008a08:	b140      	cbz	r0, 8008a1c <_vfiprintf_r+0x198>
 8008a0a:	2340      	movs	r3, #64	; 0x40
 8008a0c:	eba0 000a 	sub.w	r0, r0, sl
 8008a10:	fa03 f000 	lsl.w	r0, r3, r0
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	3401      	adds	r4, #1
 8008a18:	4303      	orrs	r3, r0
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a20:	2206      	movs	r2, #6
 8008a22:	482c      	ldr	r0, [pc, #176]	; (8008ad4 <_vfiprintf_r+0x250>)
 8008a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a28:	f7ff f8b8 	bl	8007b9c <memchr>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d03f      	beq.n	8008ab0 <_vfiprintf_r+0x22c>
 8008a30:	4b29      	ldr	r3, [pc, #164]	; (8008ad8 <_vfiprintf_r+0x254>)
 8008a32:	bb1b      	cbnz	r3, 8008a7c <_vfiprintf_r+0x1f8>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	3307      	adds	r3, #7
 8008a38:	f023 0307 	bic.w	r3, r3, #7
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a42:	443b      	add	r3, r7
 8008a44:	9309      	str	r3, [sp, #36]	; 0x24
 8008a46:	e767      	b.n	8008918 <_vfiprintf_r+0x94>
 8008a48:	460c      	mov	r4, r1
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a50:	e7a5      	b.n	800899e <_vfiprintf_r+0x11a>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f04f 0c0a 	mov.w	ip, #10
 8008a58:	4619      	mov	r1, r3
 8008a5a:	3401      	adds	r4, #1
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a64:	3a30      	subs	r2, #48	; 0x30
 8008a66:	2a09      	cmp	r2, #9
 8008a68:	d903      	bls.n	8008a72 <_vfiprintf_r+0x1ee>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0c5      	beq.n	80089fa <_vfiprintf_r+0x176>
 8008a6e:	9105      	str	r1, [sp, #20]
 8008a70:	e7c3      	b.n	80089fa <_vfiprintf_r+0x176>
 8008a72:	4604      	mov	r4, r0
 8008a74:	2301      	movs	r3, #1
 8008a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a7a:	e7f0      	b.n	8008a5e <_vfiprintf_r+0x1da>
 8008a7c:	ab03      	add	r3, sp, #12
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	462a      	mov	r2, r5
 8008a82:	4630      	mov	r0, r6
 8008a84:	4b15      	ldr	r3, [pc, #84]	; (8008adc <_vfiprintf_r+0x258>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	f7fd fe1c 	bl	80066c4 <_printf_float>
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	1c78      	adds	r0, r7, #1
 8008a90:	d1d6      	bne.n	8008a40 <_vfiprintf_r+0x1bc>
 8008a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a94:	07d9      	lsls	r1, r3, #31
 8008a96:	d405      	bmi.n	8008aa4 <_vfiprintf_r+0x220>
 8008a98:	89ab      	ldrh	r3, [r5, #12]
 8008a9a:	059a      	lsls	r2, r3, #22
 8008a9c:	d402      	bmi.n	8008aa4 <_vfiprintf_r+0x220>
 8008a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aa0:	f000 faaf 	bl	8009002 <__retarget_lock_release_recursive>
 8008aa4:	89ab      	ldrh	r3, [r5, #12]
 8008aa6:	065b      	lsls	r3, r3, #25
 8008aa8:	f53f af12 	bmi.w	80088d0 <_vfiprintf_r+0x4c>
 8008aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aae:	e711      	b.n	80088d4 <_vfiprintf_r+0x50>
 8008ab0:	ab03      	add	r3, sp, #12
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	4b08      	ldr	r3, [pc, #32]	; (8008adc <_vfiprintf_r+0x258>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	f7fe f89e 	bl	8006bfc <_printf_i>
 8008ac0:	e7e4      	b.n	8008a8c <_vfiprintf_r+0x208>
 8008ac2:	bf00      	nop
 8008ac4:	08009974 	.word	0x08009974
 8008ac8:	08009994 	.word	0x08009994
 8008acc:	08009954 	.word	0x08009954
 8008ad0:	080097fc 	.word	0x080097fc
 8008ad4:	08009806 	.word	0x08009806
 8008ad8:	080066c5 	.word	0x080066c5
 8008adc:	0800885f 	.word	0x0800885f
 8008ae0:	08009802 	.word	0x08009802

08008ae4 <__swbuf_r>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	460e      	mov	r6, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	4605      	mov	r5, r0
 8008aec:	b118      	cbz	r0, 8008af6 <__swbuf_r+0x12>
 8008aee:	6983      	ldr	r3, [r0, #24]
 8008af0:	b90b      	cbnz	r3, 8008af6 <__swbuf_r+0x12>
 8008af2:	f000 f9e7 	bl	8008ec4 <__sinit>
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <__swbuf_r+0x98>)
 8008af8:	429c      	cmp	r4, r3
 8008afa:	d12b      	bne.n	8008b54 <__swbuf_r+0x70>
 8008afc:	686c      	ldr	r4, [r5, #4]
 8008afe:	69a3      	ldr	r3, [r4, #24]
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	071a      	lsls	r2, r3, #28
 8008b06:	d52f      	bpl.n	8008b68 <__swbuf_r+0x84>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	b36b      	cbz	r3, 8008b68 <__swbuf_r+0x84>
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	b2f6      	uxtb	r6, r6
 8008b12:	1ac0      	subs	r0, r0, r3
 8008b14:	6963      	ldr	r3, [r4, #20]
 8008b16:	4637      	mov	r7, r6
 8008b18:	4283      	cmp	r3, r0
 8008b1a:	dc04      	bgt.n	8008b26 <__swbuf_r+0x42>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 f93c 	bl	8008d9c <_fflush_r>
 8008b24:	bb30      	cbnz	r0, 8008b74 <__swbuf_r+0x90>
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	3001      	adds	r0, #1
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	6022      	str	r2, [r4, #0]
 8008b34:	701e      	strb	r6, [r3, #0]
 8008b36:	6963      	ldr	r3, [r4, #20]
 8008b38:	4283      	cmp	r3, r0
 8008b3a:	d004      	beq.n	8008b46 <__swbuf_r+0x62>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d506      	bpl.n	8008b50 <__swbuf_r+0x6c>
 8008b42:	2e0a      	cmp	r6, #10
 8008b44:	d104      	bne.n	8008b50 <__swbuf_r+0x6c>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 f927 	bl	8008d9c <_fflush_r>
 8008b4e:	b988      	cbnz	r0, 8008b74 <__swbuf_r+0x90>
 8008b50:	4638      	mov	r0, r7
 8008b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <__swbuf_r+0x9c>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	d101      	bne.n	8008b5e <__swbuf_r+0x7a>
 8008b5a:	68ac      	ldr	r4, [r5, #8]
 8008b5c:	e7cf      	b.n	8008afe <__swbuf_r+0x1a>
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <__swbuf_r+0xa0>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	bf08      	it	eq
 8008b64:	68ec      	ldreq	r4, [r5, #12]
 8008b66:	e7ca      	b.n	8008afe <__swbuf_r+0x1a>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 f81a 	bl	8008ba4 <__swsetup_r>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d0cb      	beq.n	8008b0c <__swbuf_r+0x28>
 8008b74:	f04f 37ff 	mov.w	r7, #4294967295
 8008b78:	e7ea      	b.n	8008b50 <__swbuf_r+0x6c>
 8008b7a:	bf00      	nop
 8008b7c:	08009974 	.word	0x08009974
 8008b80:	08009994 	.word	0x08009994
 8008b84:	08009954 	.word	0x08009954

08008b88 <__ascii_wctomb>:
 8008b88:	4603      	mov	r3, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	b141      	cbz	r1, 8008ba0 <__ascii_wctomb+0x18>
 8008b8e:	2aff      	cmp	r2, #255	; 0xff
 8008b90:	d904      	bls.n	8008b9c <__ascii_wctomb+0x14>
 8008b92:	228a      	movs	r2, #138	; 0x8a
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	4770      	bx	lr
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	700a      	strb	r2, [r1, #0]
 8008ba0:	4770      	bx	lr
	...

08008ba4 <__swsetup_r>:
 8008ba4:	4b32      	ldr	r3, [pc, #200]	; (8008c70 <__swsetup_r+0xcc>)
 8008ba6:	b570      	push	{r4, r5, r6, lr}
 8008ba8:	681d      	ldr	r5, [r3, #0]
 8008baa:	4606      	mov	r6, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	b125      	cbz	r5, 8008bba <__swsetup_r+0x16>
 8008bb0:	69ab      	ldr	r3, [r5, #24]
 8008bb2:	b913      	cbnz	r3, 8008bba <__swsetup_r+0x16>
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	f000 f985 	bl	8008ec4 <__sinit>
 8008bba:	4b2e      	ldr	r3, [pc, #184]	; (8008c74 <__swsetup_r+0xd0>)
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	d10f      	bne.n	8008be0 <__swsetup_r+0x3c>
 8008bc0:	686c      	ldr	r4, [r5, #4]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bc8:	0719      	lsls	r1, r3, #28
 8008bca:	d42c      	bmi.n	8008c26 <__swsetup_r+0x82>
 8008bcc:	06dd      	lsls	r5, r3, #27
 8008bce:	d411      	bmi.n	8008bf4 <__swsetup_r+0x50>
 8008bd0:	2309      	movs	r3, #9
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	e03e      	b.n	8008c5e <__swsetup_r+0xba>
 8008be0:	4b25      	ldr	r3, [pc, #148]	; (8008c78 <__swsetup_r+0xd4>)
 8008be2:	429c      	cmp	r4, r3
 8008be4:	d101      	bne.n	8008bea <__swsetup_r+0x46>
 8008be6:	68ac      	ldr	r4, [r5, #8]
 8008be8:	e7eb      	b.n	8008bc2 <__swsetup_r+0x1e>
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <__swsetup_r+0xd8>)
 8008bec:	429c      	cmp	r4, r3
 8008bee:	bf08      	it	eq
 8008bf0:	68ec      	ldreq	r4, [r5, #12]
 8008bf2:	e7e6      	b.n	8008bc2 <__swsetup_r+0x1e>
 8008bf4:	0758      	lsls	r0, r3, #29
 8008bf6:	d512      	bpl.n	8008c1e <__swsetup_r+0x7a>
 8008bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfa:	b141      	cbz	r1, 8008c0e <__swsetup_r+0x6a>
 8008bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c00:	4299      	cmp	r1, r3
 8008c02:	d002      	beq.n	8008c0a <__swsetup_r+0x66>
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff fb75 	bl	80082f4 <_free_r>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	2300      	movs	r3, #0
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	f043 0308 	orr.w	r3, r3, #8
 8008c24:	81a3      	strh	r3, [r4, #12]
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	b94b      	cbnz	r3, 8008c3e <__swsetup_r+0x9a>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d003      	beq.n	8008c3e <__swsetup_r+0x9a>
 8008c36:	4621      	mov	r1, r4
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f000 fa07 	bl	800904c <__smakebuf_r>
 8008c3e:	89a0      	ldrh	r0, [r4, #12]
 8008c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c44:	f010 0301 	ands.w	r3, r0, #1
 8008c48:	d00a      	beq.n	8008c60 <__swsetup_r+0xbc>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60a3      	str	r3, [r4, #8]
 8008c4e:	6963      	ldr	r3, [r4, #20]
 8008c50:	425b      	negs	r3, r3
 8008c52:	61a3      	str	r3, [r4, #24]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	b943      	cbnz	r3, 8008c6a <__swsetup_r+0xc6>
 8008c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c5c:	d1ba      	bne.n	8008bd4 <__swsetup_r+0x30>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	0781      	lsls	r1, r0, #30
 8008c62:	bf58      	it	pl
 8008c64:	6963      	ldrpl	r3, [r4, #20]
 8008c66:	60a3      	str	r3, [r4, #8]
 8008c68:	e7f4      	b.n	8008c54 <__swsetup_r+0xb0>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e7f7      	b.n	8008c5e <__swsetup_r+0xba>
 8008c6e:	bf00      	nop
 8008c70:	20000014 	.word	0x20000014
 8008c74:	08009974 	.word	0x08009974
 8008c78:	08009994 	.word	0x08009994
 8008c7c:	08009954 	.word	0x08009954

08008c80 <abort>:
 8008c80:	2006      	movs	r0, #6
 8008c82:	b508      	push	{r3, lr}
 8008c84:	f000 fa52 	bl	800912c <raise>
 8008c88:	2001      	movs	r0, #1
 8008c8a:	f7f9 fbb4 	bl	80023f6 <_exit>
	...

08008c90 <__sflush_r>:
 8008c90:	898a      	ldrh	r2, [r1, #12]
 8008c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	4605      	mov	r5, r0
 8008c98:	0710      	lsls	r0, r2, #28
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	d458      	bmi.n	8008d50 <__sflush_r+0xc0>
 8008c9e:	684b      	ldr	r3, [r1, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dc05      	bgt.n	8008cb0 <__sflush_r+0x20>
 8008ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dc02      	bgt.n	8008cb0 <__sflush_r+0x20>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cb2:	2e00      	cmp	r6, #0
 8008cb4:	d0f9      	beq.n	8008caa <__sflush_r+0x1a>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cbc:	682f      	ldr	r7, [r5, #0]
 8008cbe:	602b      	str	r3, [r5, #0]
 8008cc0:	d032      	beq.n	8008d28 <__sflush_r+0x98>
 8008cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	075a      	lsls	r2, r3, #29
 8008cc8:	d505      	bpl.n	8008cd6 <__sflush_r+0x46>
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	1ac0      	subs	r0, r0, r3
 8008cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cd0:	b10b      	cbz	r3, 8008cd6 <__sflush_r+0x46>
 8008cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cd4:	1ac0      	subs	r0, r0, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cdc:	4628      	mov	r0, r5
 8008cde:	6a21      	ldr	r1, [r4, #32]
 8008ce0:	47b0      	blx	r6
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	d106      	bne.n	8008cf6 <__sflush_r+0x66>
 8008ce8:	6829      	ldr	r1, [r5, #0]
 8008cea:	291d      	cmp	r1, #29
 8008cec:	d82c      	bhi.n	8008d48 <__sflush_r+0xb8>
 8008cee:	4a2a      	ldr	r2, [pc, #168]	; (8008d98 <__sflush_r+0x108>)
 8008cf0:	40ca      	lsrs	r2, r1
 8008cf2:	07d6      	lsls	r6, r2, #31
 8008cf4:	d528      	bpl.n	8008d48 <__sflush_r+0xb8>
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6062      	str	r2, [r4, #4]
 8008cfa:	6922      	ldr	r2, [r4, #16]
 8008cfc:	04d9      	lsls	r1, r3, #19
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	d504      	bpl.n	8008d0c <__sflush_r+0x7c>
 8008d02:	1c42      	adds	r2, r0, #1
 8008d04:	d101      	bne.n	8008d0a <__sflush_r+0x7a>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	b903      	cbnz	r3, 8008d0c <__sflush_r+0x7c>
 8008d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0e:	602f      	str	r7, [r5, #0]
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d0ca      	beq.n	8008caa <__sflush_r+0x1a>
 8008d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d18:	4299      	cmp	r1, r3
 8008d1a:	d002      	beq.n	8008d22 <__sflush_r+0x92>
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	f7ff fae9 	bl	80082f4 <_free_r>
 8008d22:	2000      	movs	r0, #0
 8008d24:	6360      	str	r0, [r4, #52]	; 0x34
 8008d26:	e7c1      	b.n	8008cac <__sflush_r+0x1c>
 8008d28:	6a21      	ldr	r1, [r4, #32]
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	47b0      	blx	r6
 8008d30:	1c41      	adds	r1, r0, #1
 8008d32:	d1c7      	bne.n	8008cc4 <__sflush_r+0x34>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0c4      	beq.n	8008cc4 <__sflush_r+0x34>
 8008d3a:	2b1d      	cmp	r3, #29
 8008d3c:	d001      	beq.n	8008d42 <__sflush_r+0xb2>
 8008d3e:	2b16      	cmp	r3, #22
 8008d40:	d101      	bne.n	8008d46 <__sflush_r+0xb6>
 8008d42:	602f      	str	r7, [r5, #0]
 8008d44:	e7b1      	b.n	8008caa <__sflush_r+0x1a>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	e7ad      	b.n	8008cac <__sflush_r+0x1c>
 8008d50:	690f      	ldr	r7, [r1, #16]
 8008d52:	2f00      	cmp	r7, #0
 8008d54:	d0a9      	beq.n	8008caa <__sflush_r+0x1a>
 8008d56:	0793      	lsls	r3, r2, #30
 8008d58:	bf18      	it	ne
 8008d5a:	2300      	movne	r3, #0
 8008d5c:	680e      	ldr	r6, [r1, #0]
 8008d5e:	bf08      	it	eq
 8008d60:	694b      	ldreq	r3, [r1, #20]
 8008d62:	eba6 0807 	sub.w	r8, r6, r7
 8008d66:	600f      	str	r7, [r1, #0]
 8008d68:	608b      	str	r3, [r1, #8]
 8008d6a:	f1b8 0f00 	cmp.w	r8, #0
 8008d6e:	dd9c      	ble.n	8008caa <__sflush_r+0x1a>
 8008d70:	4643      	mov	r3, r8
 8008d72:	463a      	mov	r2, r7
 8008d74:	4628      	mov	r0, r5
 8008d76:	6a21      	ldr	r1, [r4, #32]
 8008d78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d7a:	47b0      	blx	r6
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	dc06      	bgt.n	8008d8e <__sflush_r+0xfe>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	e78e      	b.n	8008cac <__sflush_r+0x1c>
 8008d8e:	4407      	add	r7, r0
 8008d90:	eba8 0800 	sub.w	r8, r8, r0
 8008d94:	e7e9      	b.n	8008d6a <__sflush_r+0xda>
 8008d96:	bf00      	nop
 8008d98:	20400001 	.word	0x20400001

08008d9c <_fflush_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	690b      	ldr	r3, [r1, #16]
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	b913      	cbnz	r3, 8008dac <_fflush_r+0x10>
 8008da6:	2500      	movs	r5, #0
 8008da8:	4628      	mov	r0, r5
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	b118      	cbz	r0, 8008db6 <_fflush_r+0x1a>
 8008dae:	6983      	ldr	r3, [r0, #24]
 8008db0:	b90b      	cbnz	r3, 8008db6 <_fflush_r+0x1a>
 8008db2:	f000 f887 	bl	8008ec4 <__sinit>
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <_fflush_r+0x6c>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d11b      	bne.n	8008df4 <_fflush_r+0x58>
 8008dbc:	686c      	ldr	r4, [r5, #4]
 8008dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0ef      	beq.n	8008da6 <_fflush_r+0xa>
 8008dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dc8:	07d0      	lsls	r0, r2, #31
 8008dca:	d404      	bmi.n	8008dd6 <_fflush_r+0x3a>
 8008dcc:	0599      	lsls	r1, r3, #22
 8008dce:	d402      	bmi.n	8008dd6 <_fflush_r+0x3a>
 8008dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dd2:	f000 f915 	bl	8009000 <__retarget_lock_acquire_recursive>
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f7ff ff59 	bl	8008c90 <__sflush_r>
 8008dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008de0:	4605      	mov	r5, r0
 8008de2:	07da      	lsls	r2, r3, #31
 8008de4:	d4e0      	bmi.n	8008da8 <_fflush_r+0xc>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	059b      	lsls	r3, r3, #22
 8008dea:	d4dd      	bmi.n	8008da8 <_fflush_r+0xc>
 8008dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dee:	f000 f908 	bl	8009002 <__retarget_lock_release_recursive>
 8008df2:	e7d9      	b.n	8008da8 <_fflush_r+0xc>
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <_fflush_r+0x70>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d101      	bne.n	8008dfe <_fflush_r+0x62>
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	e7df      	b.n	8008dbe <_fflush_r+0x22>
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <_fflush_r+0x74>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	bf08      	it	eq
 8008e04:	68ec      	ldreq	r4, [r5, #12]
 8008e06:	e7da      	b.n	8008dbe <_fflush_r+0x22>
 8008e08:	08009974 	.word	0x08009974
 8008e0c:	08009994 	.word	0x08009994
 8008e10:	08009954 	.word	0x08009954

08008e14 <std>:
 8008e14:	2300      	movs	r3, #0
 8008e16:	b510      	push	{r4, lr}
 8008e18:	4604      	mov	r4, r0
 8008e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e22:	6083      	str	r3, [r0, #8]
 8008e24:	8181      	strh	r1, [r0, #12]
 8008e26:	6643      	str	r3, [r0, #100]	; 0x64
 8008e28:	81c2      	strh	r2, [r0, #14]
 8008e2a:	6183      	str	r3, [r0, #24]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	2208      	movs	r2, #8
 8008e30:	305c      	adds	r0, #92	; 0x5c
 8008e32:	f7fd fba1 	bl	8006578 <memset>
 8008e36:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <std+0x38>)
 8008e38:	6224      	str	r4, [r4, #32]
 8008e3a:	6263      	str	r3, [r4, #36]	; 0x24
 8008e3c:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <std+0x3c>)
 8008e3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <std+0x40>)
 8008e42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e44:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <std+0x44>)
 8008e46:	6323      	str	r3, [r4, #48]	; 0x30
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08009165 	.word	0x08009165
 8008e50:	08009187 	.word	0x08009187
 8008e54:	080091bf 	.word	0x080091bf
 8008e58:	080091e3 	.word	0x080091e3

08008e5c <_cleanup_r>:
 8008e5c:	4901      	ldr	r1, [pc, #4]	; (8008e64 <_cleanup_r+0x8>)
 8008e5e:	f000 b8af 	b.w	8008fc0 <_fwalk_reent>
 8008e62:	bf00      	nop
 8008e64:	08008d9d 	.word	0x08008d9d

08008e68 <__sfmoreglue>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	2568      	movs	r5, #104	; 0x68
 8008e6c:	1e4a      	subs	r2, r1, #1
 8008e6e:	4355      	muls	r5, r2
 8008e70:	460e      	mov	r6, r1
 8008e72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e76:	f7ff fa89 	bl	800838c <_malloc_r>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	b140      	cbz	r0, 8008e90 <__sfmoreglue+0x28>
 8008e7e:	2100      	movs	r1, #0
 8008e80:	e9c0 1600 	strd	r1, r6, [r0]
 8008e84:	300c      	adds	r0, #12
 8008e86:	60a0      	str	r0, [r4, #8]
 8008e88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e8c:	f7fd fb74 	bl	8006578 <memset>
 8008e90:	4620      	mov	r0, r4
 8008e92:	bd70      	pop	{r4, r5, r6, pc}

08008e94 <__sfp_lock_acquire>:
 8008e94:	4801      	ldr	r0, [pc, #4]	; (8008e9c <__sfp_lock_acquire+0x8>)
 8008e96:	f000 b8b3 	b.w	8009000 <__retarget_lock_acquire_recursive>
 8008e9a:	bf00      	nop
 8008e9c:	20002674 	.word	0x20002674

08008ea0 <__sfp_lock_release>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	; (8008ea8 <__sfp_lock_release+0x8>)
 8008ea2:	f000 b8ae 	b.w	8009002 <__retarget_lock_release_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20002674 	.word	0x20002674

08008eac <__sinit_lock_acquire>:
 8008eac:	4801      	ldr	r0, [pc, #4]	; (8008eb4 <__sinit_lock_acquire+0x8>)
 8008eae:	f000 b8a7 	b.w	8009000 <__retarget_lock_acquire_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	2000266f 	.word	0x2000266f

08008eb8 <__sinit_lock_release>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	; (8008ec0 <__sinit_lock_release+0x8>)
 8008eba:	f000 b8a2 	b.w	8009002 <__retarget_lock_release_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	2000266f 	.word	0x2000266f

08008ec4 <__sinit>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	f7ff fff0 	bl	8008eac <__sinit_lock_acquire>
 8008ecc:	69a3      	ldr	r3, [r4, #24]
 8008ece:	b11b      	cbz	r3, 8008ed8 <__sinit+0x14>
 8008ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed4:	f7ff bff0 	b.w	8008eb8 <__sinit_lock_release>
 8008ed8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008edc:	6523      	str	r3, [r4, #80]	; 0x50
 8008ede:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <__sinit+0x68>)
 8008ee0:	4a13      	ldr	r2, [pc, #76]	; (8008f30 <__sinit+0x6c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ee6:	42a3      	cmp	r3, r4
 8008ee8:	bf08      	it	eq
 8008eea:	2301      	moveq	r3, #1
 8008eec:	4620      	mov	r0, r4
 8008eee:	bf08      	it	eq
 8008ef0:	61a3      	streq	r3, [r4, #24]
 8008ef2:	f000 f81f 	bl	8008f34 <__sfp>
 8008ef6:	6060      	str	r0, [r4, #4]
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 f81b 	bl	8008f34 <__sfp>
 8008efe:	60a0      	str	r0, [r4, #8]
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 f817 	bl	8008f34 <__sfp>
 8008f06:	2200      	movs	r2, #0
 8008f08:	2104      	movs	r1, #4
 8008f0a:	60e0      	str	r0, [r4, #12]
 8008f0c:	6860      	ldr	r0, [r4, #4]
 8008f0e:	f7ff ff81 	bl	8008e14 <std>
 8008f12:	2201      	movs	r2, #1
 8008f14:	2109      	movs	r1, #9
 8008f16:	68a0      	ldr	r0, [r4, #8]
 8008f18:	f7ff ff7c 	bl	8008e14 <std>
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	2112      	movs	r1, #18
 8008f20:	68e0      	ldr	r0, [r4, #12]
 8008f22:	f7ff ff77 	bl	8008e14 <std>
 8008f26:	2301      	movs	r3, #1
 8008f28:	61a3      	str	r3, [r4, #24]
 8008f2a:	e7d1      	b.n	8008ed0 <__sinit+0xc>
 8008f2c:	080095d0 	.word	0x080095d0
 8008f30:	08008e5d 	.word	0x08008e5d

08008f34 <__sfp>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	4607      	mov	r7, r0
 8008f38:	f7ff ffac 	bl	8008e94 <__sfp_lock_acquire>
 8008f3c:	4b1e      	ldr	r3, [pc, #120]	; (8008fb8 <__sfp+0x84>)
 8008f3e:	681e      	ldr	r6, [r3, #0]
 8008f40:	69b3      	ldr	r3, [r6, #24]
 8008f42:	b913      	cbnz	r3, 8008f4a <__sfp+0x16>
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7ff ffbd 	bl	8008ec4 <__sinit>
 8008f4a:	3648      	adds	r6, #72	; 0x48
 8008f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	d503      	bpl.n	8008f5c <__sfp+0x28>
 8008f54:	6833      	ldr	r3, [r6, #0]
 8008f56:	b30b      	cbz	r3, 8008f9c <__sfp+0x68>
 8008f58:	6836      	ldr	r6, [r6, #0]
 8008f5a:	e7f7      	b.n	8008f4c <__sfp+0x18>
 8008f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f60:	b9d5      	cbnz	r5, 8008f98 <__sfp+0x64>
 8008f62:	4b16      	ldr	r3, [pc, #88]	; (8008fbc <__sfp+0x88>)
 8008f64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f68:	60e3      	str	r3, [r4, #12]
 8008f6a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f6c:	f000 f847 	bl	8008ffe <__retarget_lock_init_recursive>
 8008f70:	f7ff ff96 	bl	8008ea0 <__sfp_lock_release>
 8008f74:	2208      	movs	r2, #8
 8008f76:	4629      	mov	r1, r5
 8008f78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f80:	6025      	str	r5, [r4, #0]
 8008f82:	61a5      	str	r5, [r4, #24]
 8008f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f88:	f7fd faf6 	bl	8006578 <memset>
 8008f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f94:	4620      	mov	r0, r4
 8008f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f98:	3468      	adds	r4, #104	; 0x68
 8008f9a:	e7d9      	b.n	8008f50 <__sfp+0x1c>
 8008f9c:	2104      	movs	r1, #4
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f7ff ff62 	bl	8008e68 <__sfmoreglue>
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	6030      	str	r0, [r6, #0]
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1d5      	bne.n	8008f58 <__sfp+0x24>
 8008fac:	f7ff ff78 	bl	8008ea0 <__sfp_lock_release>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	e7ee      	b.n	8008f94 <__sfp+0x60>
 8008fb6:	bf00      	nop
 8008fb8:	080095d0 	.word	0x080095d0
 8008fbc:	ffff0001 	.word	0xffff0001

08008fc0 <_fwalk_reent>:
 8008fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	4688      	mov	r8, r1
 8008fc8:	2700      	movs	r7, #0
 8008fca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fd2:	f1b9 0901 	subs.w	r9, r9, #1
 8008fd6:	d505      	bpl.n	8008fe4 <_fwalk_reent+0x24>
 8008fd8:	6824      	ldr	r4, [r4, #0]
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	d1f7      	bne.n	8008fce <_fwalk_reent+0xe>
 8008fde:	4638      	mov	r0, r7
 8008fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe4:	89ab      	ldrh	r3, [r5, #12]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d907      	bls.n	8008ffa <_fwalk_reent+0x3a>
 8008fea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	d003      	beq.n	8008ffa <_fwalk_reent+0x3a>
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	47c0      	blx	r8
 8008ff8:	4307      	orrs	r7, r0
 8008ffa:	3568      	adds	r5, #104	; 0x68
 8008ffc:	e7e9      	b.n	8008fd2 <_fwalk_reent+0x12>

08008ffe <__retarget_lock_init_recursive>:
 8008ffe:	4770      	bx	lr

08009000 <__retarget_lock_acquire_recursive>:
 8009000:	4770      	bx	lr

08009002 <__retarget_lock_release_recursive>:
 8009002:	4770      	bx	lr

08009004 <__swhatbuf_r>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	460e      	mov	r6, r1
 8009008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900c:	4614      	mov	r4, r2
 800900e:	2900      	cmp	r1, #0
 8009010:	461d      	mov	r5, r3
 8009012:	b096      	sub	sp, #88	; 0x58
 8009014:	da07      	bge.n	8009026 <__swhatbuf_r+0x22>
 8009016:	2300      	movs	r3, #0
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	89b3      	ldrh	r3, [r6, #12]
 800901c:	061a      	lsls	r2, r3, #24
 800901e:	d410      	bmi.n	8009042 <__swhatbuf_r+0x3e>
 8009020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009024:	e00e      	b.n	8009044 <__swhatbuf_r+0x40>
 8009026:	466a      	mov	r2, sp
 8009028:	f000 f902 	bl	8009230 <_fstat_r>
 800902c:	2800      	cmp	r0, #0
 800902e:	dbf2      	blt.n	8009016 <__swhatbuf_r+0x12>
 8009030:	9a01      	ldr	r2, [sp, #4]
 8009032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800903a:	425a      	negs	r2, r3
 800903c:	415a      	adcs	r2, r3
 800903e:	602a      	str	r2, [r5, #0]
 8009040:	e7ee      	b.n	8009020 <__swhatbuf_r+0x1c>
 8009042:	2340      	movs	r3, #64	; 0x40
 8009044:	2000      	movs	r0, #0
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	b016      	add	sp, #88	; 0x58
 800904a:	bd70      	pop	{r4, r5, r6, pc}

0800904c <__smakebuf_r>:
 800904c:	898b      	ldrh	r3, [r1, #12]
 800904e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009050:	079d      	lsls	r5, r3, #30
 8009052:	4606      	mov	r6, r0
 8009054:	460c      	mov	r4, r1
 8009056:	d507      	bpl.n	8009068 <__smakebuf_r+0x1c>
 8009058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	2301      	movs	r3, #1
 8009062:	6163      	str	r3, [r4, #20]
 8009064:	b002      	add	sp, #8
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	466a      	mov	r2, sp
 800906a:	ab01      	add	r3, sp, #4
 800906c:	f7ff ffca 	bl	8009004 <__swhatbuf_r>
 8009070:	9900      	ldr	r1, [sp, #0]
 8009072:	4605      	mov	r5, r0
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff f989 	bl	800838c <_malloc_r>
 800907a:	b948      	cbnz	r0, 8009090 <__smakebuf_r+0x44>
 800907c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009080:	059a      	lsls	r2, r3, #22
 8009082:	d4ef      	bmi.n	8009064 <__smakebuf_r+0x18>
 8009084:	f023 0303 	bic.w	r3, r3, #3
 8009088:	f043 0302 	orr.w	r3, r3, #2
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	e7e3      	b.n	8009058 <__smakebuf_r+0xc>
 8009090:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <__smakebuf_r+0x7c>)
 8009092:	62b3      	str	r3, [r6, #40]	; 0x28
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	6020      	str	r0, [r4, #0]
 8009098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	9b00      	ldr	r3, [sp, #0]
 80090a0:	6120      	str	r0, [r4, #16]
 80090a2:	6163      	str	r3, [r4, #20]
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	b15b      	cbz	r3, 80090c0 <__smakebuf_r+0x74>
 80090a8:	4630      	mov	r0, r6
 80090aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ae:	f000 f8d1 	bl	8009254 <_isatty_r>
 80090b2:	b128      	cbz	r0, 80090c0 <__smakebuf_r+0x74>
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	89a0      	ldrh	r0, [r4, #12]
 80090c2:	4305      	orrs	r5, r0
 80090c4:	81a5      	strh	r5, [r4, #12]
 80090c6:	e7cd      	b.n	8009064 <__smakebuf_r+0x18>
 80090c8:	08008e5d 	.word	0x08008e5d

080090cc <_malloc_usable_size_r>:
 80090cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d0:	1f18      	subs	r0, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfbc      	itt	lt
 80090d6:	580b      	ldrlt	r3, [r1, r0]
 80090d8:	18c0      	addlt	r0, r0, r3
 80090da:	4770      	bx	lr

080090dc <_raise_r>:
 80090dc:	291f      	cmp	r1, #31
 80090de:	b538      	push	{r3, r4, r5, lr}
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	d904      	bls.n	80090f0 <_raise_r+0x14>
 80090e6:	2316      	movs	r3, #22
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	f04f 30ff 	mov.w	r0, #4294967295
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090f2:	b112      	cbz	r2, 80090fa <_raise_r+0x1e>
 80090f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090f8:	b94b      	cbnz	r3, 800910e <_raise_r+0x32>
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 f830 	bl	8009160 <_getpid_r>
 8009100:	462a      	mov	r2, r5
 8009102:	4601      	mov	r1, r0
 8009104:	4620      	mov	r0, r4
 8009106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800910a:	f000 b817 	b.w	800913c <_kill_r>
 800910e:	2b01      	cmp	r3, #1
 8009110:	d00a      	beq.n	8009128 <_raise_r+0x4c>
 8009112:	1c59      	adds	r1, r3, #1
 8009114:	d103      	bne.n	800911e <_raise_r+0x42>
 8009116:	2316      	movs	r3, #22
 8009118:	6003      	str	r3, [r0, #0]
 800911a:	2001      	movs	r0, #1
 800911c:	e7e7      	b.n	80090ee <_raise_r+0x12>
 800911e:	2400      	movs	r4, #0
 8009120:	4628      	mov	r0, r5
 8009122:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009126:	4798      	blx	r3
 8009128:	2000      	movs	r0, #0
 800912a:	e7e0      	b.n	80090ee <_raise_r+0x12>

0800912c <raise>:
 800912c:	4b02      	ldr	r3, [pc, #8]	; (8009138 <raise+0xc>)
 800912e:	4601      	mov	r1, r0
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	f7ff bfd3 	b.w	80090dc <_raise_r>
 8009136:	bf00      	nop
 8009138:	20000014 	.word	0x20000014

0800913c <_kill_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	2300      	movs	r3, #0
 8009140:	4d06      	ldr	r5, [pc, #24]	; (800915c <_kill_r+0x20>)
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	4611      	mov	r1, r2
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	f7f9 f944 	bl	80023d6 <_kill>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	d102      	bne.n	8009158 <_kill_r+0x1c>
 8009152:	682b      	ldr	r3, [r5, #0]
 8009154:	b103      	cbz	r3, 8009158 <_kill_r+0x1c>
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	bd38      	pop	{r3, r4, r5, pc}
 800915a:	bf00      	nop
 800915c:	20002668 	.word	0x20002668

08009160 <_getpid_r>:
 8009160:	f7f9 b932 	b.w	80023c8 <_getpid>

08009164 <__sread>:
 8009164:	b510      	push	{r4, lr}
 8009166:	460c      	mov	r4, r1
 8009168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916c:	f000 f894 	bl	8009298 <_read_r>
 8009170:	2800      	cmp	r0, #0
 8009172:	bfab      	itete	ge
 8009174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009176:	89a3      	ldrhlt	r3, [r4, #12]
 8009178:	181b      	addge	r3, r3, r0
 800917a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800917e:	bfac      	ite	ge
 8009180:	6563      	strge	r3, [r4, #84]	; 0x54
 8009182:	81a3      	strhlt	r3, [r4, #12]
 8009184:	bd10      	pop	{r4, pc}

08009186 <__swrite>:
 8009186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918a:	461f      	mov	r7, r3
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	4605      	mov	r5, r0
 8009190:	05db      	lsls	r3, r3, #23
 8009192:	460c      	mov	r4, r1
 8009194:	4616      	mov	r6, r2
 8009196:	d505      	bpl.n	80091a4 <__swrite+0x1e>
 8009198:	2302      	movs	r3, #2
 800919a:	2200      	movs	r2, #0
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	f000 f868 	bl	8009274 <_lseek_r>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	4632      	mov	r2, r6
 80091a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	4628      	mov	r0, r5
 80091b0:	463b      	mov	r3, r7
 80091b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	f000 b817 	b.w	80091ec <_write_r>

080091be <__sseek>:
 80091be:	b510      	push	{r4, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 f855 	bl	8009274 <_lseek_r>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	bf15      	itete	ne
 80091d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091da:	81a3      	strheq	r3, [r4, #12]
 80091dc:	bf18      	it	ne
 80091de:	81a3      	strhne	r3, [r4, #12]
 80091e0:	bd10      	pop	{r4, pc}

080091e2 <__sclose>:
 80091e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e6:	f000 b813 	b.w	8009210 <_close_r>
	...

080091ec <_write_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	2200      	movs	r2, #0
 80091f6:	4d05      	ldr	r5, [pc, #20]	; (800920c <_write_r+0x20>)
 80091f8:	602a      	str	r2, [r5, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	f7f9 f922 	bl	8002444 <_write>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_write_r+0x1e>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_write_r+0x1e>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20002668 	.word	0x20002668

08009210 <_close_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	2300      	movs	r3, #0
 8009214:	4d05      	ldr	r5, [pc, #20]	; (800922c <_close_r+0x1c>)
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7f9 f92e 	bl	800247c <_close>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_close_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_close_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20002668 	.word	0x20002668

08009230 <_fstat_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	2300      	movs	r3, #0
 8009234:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_fstat_r+0x20>)
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	f7f9 f928 	bl	8002492 <_fstat>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d102      	bne.n	800924c <_fstat_r+0x1c>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	b103      	cbz	r3, 800924c <_fstat_r+0x1c>
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	20002668 	.word	0x20002668

08009254 <_isatty_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	2300      	movs	r3, #0
 8009258:	4d05      	ldr	r5, [pc, #20]	; (8009270 <_isatty_r+0x1c>)
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7f9 f926 	bl	80024b0 <_isatty>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_isatty_r+0x1a>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_isatty_r+0x1a>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20002668 	.word	0x20002668

08009274 <_lseek_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	2200      	movs	r2, #0
 800927e:	4d05      	ldr	r5, [pc, #20]	; (8009294 <_lseek_r+0x20>)
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f9 f91e 	bl	80024c4 <_lseek>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_lseek_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_lseek_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20002668 	.word	0x20002668

08009298 <_read_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	4611      	mov	r1, r2
 80092a0:	2200      	movs	r2, #0
 80092a2:	4d05      	ldr	r5, [pc, #20]	; (80092b8 <_read_r+0x20>)
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7f9 f8af 	bl	800240a <_read>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_read_r+0x1e>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_read_r+0x1e>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20002668 	.word	0x20002668

080092bc <_init>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr

080092c8 <_fini>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr
